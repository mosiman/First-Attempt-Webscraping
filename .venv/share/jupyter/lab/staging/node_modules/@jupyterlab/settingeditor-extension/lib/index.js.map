{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../settingeditor-extension/src/index.ts"],"names":[],"mappings":"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","sourcesContent":["/*-----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\n\nimport {\n  ILayoutRestorer,\n  JupyterLab,\n  JupyterLabPlugin\n} from '@jupyterlab/application';\n\nimport {\n  ICommandPalette,\n  InstanceTracker,\n  MainAreaWidget\n} from '@jupyterlab/apputils';\n\nimport { IEditorServices } from '@jupyterlab/codeeditor';\n\nimport { ISettingRegistry, IStateDB } from '@jupyterlab/coreutils';\n\nimport { IRenderMimeRegistry } from '@jupyterlab/rendermime';\n\nimport {\n  ISettingEditorTracker,\n  SettingEditor\n} from '@jupyterlab/settingeditor';\n\n/**\n * The command IDs used by the setting editor.\n */\nnamespace CommandIDs {\n  export const debug = 'settingeditor:debug';\n\n  export const open = 'settingeditor:open';\n\n  export const revert = 'settingeditor:revert';\n\n  export const save = 'settingeditor:save';\n}\n\n/**\n * The default setting editor extension.\n */\nconst plugin: JupyterLabPlugin<ISettingEditorTracker> = {\n  id: '@jupyterlab/settingeditor-extension:plugin',\n  requires: [\n    ILayoutRestorer,\n    ISettingRegistry,\n    IEditorServices,\n    IStateDB,\n    IRenderMimeRegistry,\n    ICommandPalette\n  ],\n  autoStart: true,\n  provides: ISettingEditorTracker,\n  activate\n};\n\n/**\n * Activate the setting editor extension.\n */\nfunction activate(\n  app: JupyterLab,\n  restorer: ILayoutRestorer,\n  registry: ISettingRegistry,\n  editorServices: IEditorServices,\n  state: IStateDB,\n  rendermime: IRenderMimeRegistry,\n  palette: ICommandPalette\n): ISettingEditorTracker {\n  const { commands, shell } = app;\n  const namespace = 'setting-editor';\n  const factoryService = editorServices.factoryService;\n  const editorFactory = factoryService.newInlineEditor;\n  const tracker = new InstanceTracker<MainAreaWidget<SettingEditor>>({\n    namespace\n  });\n  let editor: SettingEditor;\n\n  // Handle state restoration.\n  restorer.restore(tracker, {\n    command: CommandIDs.open,\n    args: widget => ({}),\n    name: widget => namespace\n  });\n\n  commands.addCommand(CommandIDs.debug, {\n    execute: () => {\n      tracker.currentWidget.content.toggleDebug();\n    },\n    iconClass: 'jp-MaterialIcon jp-BugIcon',\n    label: 'Debug User Settings In Inspector',\n    isToggled: () => tracker.currentWidget.content.isDebugVisible\n  });\n\n  commands.addCommand(CommandIDs.open, {\n    execute: () => {\n      if (tracker.currentWidget) {\n        shell.activateById(tracker.currentWidget.id);\n        return;\n      }\n\n      const key = plugin.id;\n      const when = app.restored;\n\n      editor = new SettingEditor({\n        commands: {\n          registry: commands,\n          debug: CommandIDs.debug,\n          revert: CommandIDs.revert,\n          save: CommandIDs.save\n        },\n        editorFactory,\n        key,\n        registry,\n        rendermime,\n        state,\n        when\n      });\n\n      // Notify the command registry when the visibility status of the setting\n      // editor's commands change. The setting editor toolbar listens for this\n      // signal from the command registry.\n      editor.commandsChanged.connect((sender: any, args: string[]) => {\n        args.forEach(id => {\n          commands.notifyCommandChanged(id);\n        });\n      });\n\n      editor.id = namespace;\n      editor.title.label = 'Settings';\n      editor.title.iconClass = 'jp-SettingsIcon';\n\n      let main = new MainAreaWidget({ content: editor });\n      tracker.add(main);\n      shell.addToMainArea(main);\n    },\n    label: 'Advanced Settings Editor'\n  });\n  palette.addItem({ category: 'Settings', command: CommandIDs.open });\n\n  commands.addCommand(CommandIDs.revert, {\n    execute: () => {\n      tracker.currentWidget.content.revert();\n    },\n    iconClass: 'jp-MaterialIcon jp-UndoIcon',\n    label: 'Revert User Settings',\n    isEnabled: () => tracker.currentWidget.content.canRevertRaw\n  });\n\n  commands.addCommand(CommandIDs.save, {\n    execute: () => tracker.currentWidget.content.save(),\n    iconClass: 'jp-MaterialIcon jp-SaveIcon',\n    label: 'Save User Settings',\n    isEnabled: () => tracker.currentWidget.content.canSaveRaw\n  });\n\n  return tracker;\n}\nexport default plugin;\n"]}