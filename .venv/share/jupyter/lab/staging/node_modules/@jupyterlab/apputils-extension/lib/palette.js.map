{"version":3,"file":"palette.js","sourceRoot":"","sources":["../../../../apputils-extension/src/palette.ts"],"names":[],"mappings":";AAAA;;;+EAG+E;;AAE/E,qDAAuE;AAEvE,+CAAmD;AAMnD;;GAEG;AACH,IAAU,UAAU,CAEnB;AAFD,WAAU,UAAU;IACL,mBAAQ,GAAG,mCAAmC,CAAC;AAC9D,CAAC,EAFS,UAAU,KAAV,UAAU,QAEnB;AAED;;;GAGG;AACH;IACE;;OAEG;IACH,YAAY,OAAuB;QACjC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IAC1B,CAAC;IAED;;OAEG;IACH,IAAI,WAAW,CAAC,WAAmB;QACjC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,WAAW,GAAG,WAAW,CAAC;IACpD,CAAC;IACD,IAAI,WAAW;QACb,OAAO,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,WAAW,CAAC;IAC7C,CAAC;IAED;;OAEG;IACH,QAAQ;QACN,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;IAC3B,CAAC;IAED;;;;;;OAMG;IACH,OAAO,CAAC,OAAqB;QAC3B,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAsC,CAAC,CAAC;QACzE,OAAO,IAAI,+BAAkB,CAAC,GAAG,EAAE;YACjC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;IACL,CAAC;CAGF;AAED;;GAEG;AACH,yBAAgC,GAAe;IAC7C,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG,GAAG,CAAC;IAChC,MAAM,OAAO,GAAG,OAAO,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;IAE3C,QAAQ,CAAC,UAAU,CAAC,UAAU,CAAC,QAAQ,EAAE;QACvC,OAAO,EAAE,GAAG,EAAE;YACZ,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QACjC,CAAC;QACD,KAAK,EAAE,0BAA0B;KAClC,CAAC,CAAC;IAEH,OAAO,CAAC,SAAS,CAAC,WAAW,GAAG,QAAQ,CAAC;IAEzC,KAAK,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;IAE7B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,CAAC;AAC9B,CAAC;AAhBD,0CAgBC;AAED;;GAEG;AACH,wBACE,GAAe,EACf,QAAyB;IAEzB,MAAM,OAAO,GAAG,OAAO,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;IAE3C,4EAA4E;IAC5E,8EAA8E;IAC9E,WAAW;IACX,QAAQ,CAAC,GAAG,CAAC,OAAO,EAAE,iBAAiB,CAAC,CAAC;AAC3C,CAAC;AAVD,wCAUC;AAED;;GAEG;AACH,IAAU,OAAO,CAkBhB;AAlBD,WAAU,OAAO;IACf;;OAEG;IACH,IAAI,OAAuB,CAAC;IAE5B;;OAEG;IACH,uBAA8B,GAAe;QAC3C,IAAI,CAAC,OAAO,EAAE;YACZ,OAAO,GAAG,IAAI,wBAAc,CAAC,EAAE,QAAQ,EAAE,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;YACzD,OAAO,CAAC,EAAE,GAAG,iBAAiB,CAAC;YAC/B,OAAO,CAAC,KAAK,CAAC,KAAK,GAAG,UAAU,CAAC;SAClC;QAED,OAAO,OAAO,CAAC;IACjB,CAAC;IARe,qBAAa,gBAQ5B,CAAA;AACH,CAAC,EAlBS,OAAO,KAAP,OAAO,QAkBhB","sourcesContent":["/*-----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\n\nimport { DisposableDelegate, IDisposable } from '@phosphor/disposable';\n\nimport { CommandPalette } from '@phosphor/widgets';\n\nimport { ILayoutRestorer, JupyterLab } from '@jupyterlab/application';\n\nimport { ICommandPalette, IPaletteItem } from '@jupyterlab/apputils';\n\n/**\n * The command IDs used by the apputils extension.\n */\nnamespace CommandIDs {\n  export const activate = 'apputils:activate-command-palette';\n}\n\n/**\n * A thin wrapper around the `CommandPalette` class to conform with the\n * JupyterLab interface for the application-wide command palette.\n */\nclass Palette implements ICommandPalette {\n  /**\n   * Create a palette instance.\n   */\n  constructor(palette: CommandPalette) {\n    this._palette = palette;\n  }\n\n  /**\n   * The placeholder text of the command palette's search input.\n   */\n  set placeholder(placeholder: string) {\n    this._palette.inputNode.placeholder = placeholder;\n  }\n  get placeholder(): string {\n    return this._palette.inputNode.placeholder;\n  }\n\n  /**\n   * Activate the command palette for user input.\n   */\n  activate(): void {\n    this._palette.activate();\n  }\n\n  /**\n   * Add a command item to the command palette.\n   *\n   * @param options - The options for creating the command item.\n   *\n   * @returns A disposable that will remove the item from the palette.\n   */\n  addItem(options: IPaletteItem): IDisposable {\n    let item = this._palette.addItem(options as CommandPalette.IItemOptions);\n    return new DisposableDelegate(() => {\n      this._palette.removeItem(item);\n    });\n  }\n\n  private _palette: CommandPalette;\n}\n\n/**\n * Activate the command palette.\n */\nexport function activatePalette(app: JupyterLab): ICommandPalette {\n  const { commands, shell } = app;\n  const palette = Private.createPalette(app);\n\n  commands.addCommand(CommandIDs.activate, {\n    execute: () => {\n      shell.activateById(palette.id);\n    },\n    label: 'Activate Command Palette'\n  });\n\n  palette.inputNode.placeholder = 'SEARCH';\n\n  shell.addToLeftArea(palette);\n\n  return new Palette(palette);\n}\n\n/**\n * Restore the command palette.\n */\nexport function restorePalette(\n  app: JupyterLab,\n  restorer: ILayoutRestorer\n): void {\n  const palette = Private.createPalette(app);\n\n  // Let the application restorer track the command palette for restoration of\n  // application state (e.g. setting the command palette as the current side bar\n  // widget).\n  restorer.add(palette, 'command-palette');\n}\n\n/**\n * The namespace for module private data.\n */\nnamespace Private {\n  /**\n   * The private command palette instance.\n   */\n  let palette: CommandPalette;\n\n  /**\n   * Create the application-wide command palette.\n   */\n  export function createPalette(app: JupyterLab): CommandPalette {\n    if (!palette) {\n      palette = new CommandPalette({ commands: app.commands });\n      palette.id = 'command-palette';\n      palette.title.label = 'Commands';\n    }\n\n    return palette;\n  }\n}\n"]}