{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../completer-extension/src/index.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { JupyterLab, JupyterLabPlugin } from '@jupyterlab/application';\n\nimport {\n  CompleterModel,\n  Completer,\n  CompletionHandler,\n  ICompletionManager,\n  KernelConnector\n} from '@jupyterlab/completer';\n\nimport { IConsoleTracker } from '@jupyterlab/console';\n\nimport { INotebookTracker } from '@jupyterlab/notebook';\n\nimport { Widget } from '@phosphor/widgets';\n\n/**\n * The command IDs used by the completer plugin.\n */\nnamespace CommandIDs {\n  export const invoke = 'completer:invoke';\n\n  export const invokeConsole = 'completer:invoke-console';\n\n  export const invokeNotebook = 'completer:invoke-notebook';\n\n  export const select = 'completer:select';\n\n  export const selectConsole = 'completer:select-console';\n\n  export const selectNotebook = 'completer:select-notebook';\n}\n\n/**\n * A plugin providing code completion for editors.\n */\nconst manager: JupyterLabPlugin<ICompletionManager> = {\n  id: '@jupyterlab/completer-extension:manager',\n  autoStart: true,\n  provides: ICompletionManager,\n  activate: (app: JupyterLab): ICompletionManager => {\n    const handlers: { [id: string]: CompletionHandler } = {};\n\n    app.commands.addCommand(CommandIDs.invoke, {\n      execute: args => {\n        let id = args && (args['id'] as string);\n        if (!id) {\n          return;\n        }\n\n        const handler = handlers[id];\n        if (handler) {\n          handler.invoke();\n        }\n      }\n    });\n\n    app.commands.addCommand(CommandIDs.select, {\n      execute: args => {\n        let id = args && (args['id'] as string);\n        if (!id) {\n          return;\n        }\n\n        const handler = handlers[id];\n        if (handler) {\n          handler.completer.selectActive();\n        }\n      }\n    });\n\n    return {\n      register: (\n        completable: ICompletionManager.ICompletable\n      ): ICompletionManager.ICompletableAttributes => {\n        const { connector, editor, parent } = completable;\n        const model = new CompleterModel();\n        const completer = new Completer({ editor, model });\n        const handler = new CompletionHandler({ completer, connector });\n        const id = parent.id;\n\n        // Hide the widget when it first loads.\n        completer.hide();\n\n        // Associate the handler with the parent widget.\n        handlers[id] = handler;\n\n        // Set the handler's editor.\n        handler.editor = editor;\n\n        // Attach the completer widget.\n        Widget.attach(completer, document.body);\n\n        // Listen for parent disposal.\n        parent.disposed.connect(() => {\n          delete handlers[id];\n          model.dispose();\n          completer.dispose();\n          handler.dispose();\n        });\n\n        return handler;\n      }\n    };\n  }\n};\n\n/**\n * An extension that registers consoles for code completion.\n */\nconst consoles: JupyterLabPlugin<void> = {\n  id: '@jupyterlab/completer-extension:consoles',\n  requires: [ICompletionManager, IConsoleTracker],\n  autoStart: true,\n  activate: (\n    app: JupyterLab,\n    manager: ICompletionManager,\n    consoles: IConsoleTracker\n  ): void => {\n    // Create a handler for each console that is created.\n    consoles.widgetAdded.connect((sender, panel) => {\n      const anchor = panel.console;\n      const cell = anchor.promptCell;\n      const editor = cell && cell.editor;\n      const session = anchor.session;\n      const parent = panel;\n      const connector = new KernelConnector({ session });\n      const handler = manager.register({ connector, editor, parent });\n\n      // Listen for prompt creation.\n      anchor.promptCellCreated.connect((sender, cell) => {\n        handler.editor = cell && cell.editor;\n      });\n    });\n\n    // Add console completer invoke command.\n    app.commands.addCommand(CommandIDs.invokeConsole, {\n      execute: () => {\n        const id = consoles.currentWidget && consoles.currentWidget.id;\n\n        if (id) {\n          return app.commands.execute(CommandIDs.invoke, { id });\n        }\n      }\n    });\n\n    // Add console completer select command.\n    app.commands.addCommand(CommandIDs.selectConsole, {\n      execute: () => {\n        const id = consoles.currentWidget && consoles.currentWidget.id;\n\n        if (id) {\n          return app.commands.execute(CommandIDs.select, { id });\n        }\n      }\n    });\n\n    // Set enter key for console completer select command.\n    app.commands.addKeyBinding({\n      command: CommandIDs.selectConsole,\n      keys: ['Enter'],\n      selector: `.jp-ConsolePanel .jp-mod-completer-active`\n    });\n  }\n};\n\n/**\n * An extension that registers notebooks for code completion.\n */\nconst notebooks: JupyterLabPlugin<void> = {\n  id: '@jupyterlab/completer-extension:notebooks',\n  requires: [ICompletionManager, INotebookTracker],\n  autoStart: true,\n  activate: (\n    app: JupyterLab,\n    manager: ICompletionManager,\n    notebooks: INotebookTracker\n  ): void => {\n    // Create a handler for each notebook that is created.\n    notebooks.widgetAdded.connect((sender, panel) => {\n      const cell = panel.content.activeCell;\n      const editor = cell && cell.editor;\n      const session = panel.session;\n      const parent = panel;\n      const connector = new KernelConnector({ session });\n      const handler = manager.register({ connector, editor, parent });\n\n      // Listen for active cell changes.\n      panel.content.activeCellChanged.connect((sender, cell) => {\n        handler.editor = cell && cell.editor;\n      });\n    });\n\n    // Add notebook completer command.\n    app.commands.addCommand(CommandIDs.invokeNotebook, {\n      execute: () => {\n        const panel = notebooks.currentWidget;\n        if (panel && panel.content.activeCell.model.type === 'code') {\n          return app.commands.execute(CommandIDs.invoke, { id: panel.id });\n        }\n      }\n    });\n\n    // Add notebook completer select command.\n    app.commands.addCommand(CommandIDs.selectNotebook, {\n      execute: () => {\n        const id = notebooks.currentWidget && notebooks.currentWidget.id;\n\n        if (id) {\n          return app.commands.execute(CommandIDs.select, { id });\n        }\n      }\n    });\n\n    // Set enter key for notebook completer select command.\n    app.commands.addKeyBinding({\n      command: CommandIDs.selectNotebook,\n      keys: ['Enter'],\n      selector: `.jp-Notebook .jp-mod-completer-active`\n    });\n  }\n};\n\n/**\n * Export the plugins as default.\n */\nconst plugins: JupyterLabPlugin<any>[] = [manager, consoles, notebooks];\nexport default plugins;\n"]}