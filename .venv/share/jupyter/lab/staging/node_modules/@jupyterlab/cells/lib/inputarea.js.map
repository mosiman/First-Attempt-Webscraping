{"version":3,"file":"inputarea.js","sourceRoot":"","sources":["../../../../cells/src/inputarea.ts"],"names":[],"mappings":"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","sourcesContent":["/*-----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\n\nimport { PanelLayout } from '@phosphor/widgets';\n\nimport { Widget } from '@phosphor/widgets';\n\nimport { CodeEditor, CodeEditorWrapper } from '@jupyterlab/codeeditor';\n\nimport { CodeMirrorEditorFactory } from '@jupyterlab/codemirror';\n\nimport { ICellModel } from './model';\n\n/**\n * The class name added to input area widgets.\n */\nconst INPUT_AREA_CLASS = 'jp-InputArea';\n\n/**\n * The class name added to the prompt area of cell.\n */\nconst INPUT_AREA_PROMPT_CLASS = 'jp-InputArea-prompt';\n\n/**\n * The class name added to OutputPrompt.\n */\nconst INPUT_PROMPT_CLASS = 'jp-InputPrompt';\n\n/**\n * The class name added to the editor area of the cell.\n */\nconst INPUT_AREA_EDITOR_CLASS = 'jp-InputArea-editor';\n\n/******************************************************************************\n * InputArea\n ******************************************************************************/\n\n/**\n * An input area widget, which hosts a prompt and an editor widget.\n */\nexport class InputArea extends Widget {\n  /**\n   * Construct an input area widget.\n   */\n  constructor(options: InputArea.IOptions) {\n    super();\n    this.addClass(INPUT_AREA_CLASS);\n    let model = (this.model = options.model);\n    let contentFactory = (this.contentFactory =\n      options.contentFactory || InputArea.defaultContentFactory);\n\n    // Prompt\n    let prompt = (this._prompt = contentFactory.createInputPrompt());\n    prompt.addClass(INPUT_AREA_PROMPT_CLASS);\n\n    // Editor\n    let editorOptions = { model, factory: contentFactory.editorFactory };\n    let editor = (this._editor = new CodeEditorWrapper(editorOptions));\n    editor.addClass(INPUT_AREA_EDITOR_CLASS);\n\n    let layout = (this.layout = new PanelLayout());\n    layout.addWidget(prompt);\n    layout.addWidget(editor);\n  }\n\n  /**\n   * The model used by the widget.\n   */\n  readonly model: ICellModel;\n\n  /**\n   * The content factory used by the widget.\n   */\n  readonly contentFactory: InputArea.IContentFactory;\n\n  /**\n   * Get the CodeEditorWrapper used by the cell.\n   */\n  get editorWidget(): CodeEditorWrapper {\n    return this._editor;\n  }\n\n  /**\n   * Get the CodeEditor used by the cell.\n   */\n  get editor(): CodeEditor.IEditor {\n    return this._editor.editor;\n  }\n\n  /**\n   * Get the prompt node used by the cell.\n   */\n  get promptNode(): HTMLElement {\n    return this._prompt.node;\n  }\n\n  /**\n   * Render an input instead of the text editor.\n   */\n  renderInput(widget: Widget): void {\n    let layout = this.layout as PanelLayout;\n    if (this._rendered) {\n      this._rendered.parent = null;\n    }\n    this._editor.hide();\n    this._rendered = widget;\n    layout.addWidget(widget);\n  }\n\n  /**\n   * Show the text editor.\n   */\n  showEditor(): void {\n    if (this._rendered) {\n      this._rendered.parent = null;\n    }\n    this._editor.show();\n  }\n\n  /**\n   * Set the prompt of the input area.\n   */\n  setPrompt(value: string): void {\n    this._prompt.executionCount = value;\n  }\n\n  /**\n   * Dispose of the resources held by the widget.\n   */\n  dispose() {\n    // Do nothing if already disposed.\n    if (this.isDisposed) {\n      return;\n    }\n    this._prompt = null;\n    this._editor = null;\n    this._rendered = null;\n    super.dispose();\n  }\n\n  private _prompt: IInputPrompt = null;\n  private _editor: CodeEditorWrapper = null;\n  private _rendered: Widget = null;\n}\n\n/**\n * A namespace for `InputArea` statics.\n */\nexport namespace InputArea {\n  /**\n   * The options used to create an `InputArea`.\n   */\n  export interface IOptions {\n    /**\n     * The model used by the widget.\n     */\n    model: ICellModel;\n\n    /**\n     * The content factory used by the widget to create children.\n     *\n     * Defaults to one that uses CodeMirror.\n     */\n    contentFactory?: IContentFactory;\n  }\n\n  /**\n   * An input area widget content factory.\n   *\n   * The content factory is used to create children in a way\n   * that can be customized.\n   */\n  export interface IContentFactory {\n    /**\n     * The editor factory we need to include in `CodeEditorWratter.IOptions`.\n     *\n     * This is a separate readonly attribute rather than a factory method as we need\n     * to pass it around.\n     */\n    readonly editorFactory: CodeEditor.Factory;\n\n    /**\n     * Create an input prompt.\n     */\n    createInputPrompt(): IInputPrompt;\n  }\n\n  /**\n   * Default implementation of `IContentFactory`.\n   *\n   * This defaults to using an `editorFactory` based on CodeMirror.\n   */\n  export class ContentFactory implements IContentFactory {\n    /**\n     * Construct a `ContentFactory`.\n     */\n    constructor(options: ContentFactory.IOptions = {}) {\n      this._editor = options.editorFactory || defaultEditorFactory;\n    }\n\n    /**\n     * Return the `CodeEditor.Factory` being used.\n     */\n    get editorFactory(): CodeEditor.Factory {\n      return this._editor;\n    }\n\n    /**\n     * Create an input prompt.\n     */\n    createInputPrompt(): IInputPrompt {\n      return new InputPrompt();\n    }\n\n    private _editor: CodeEditor.Factory = null;\n  }\n\n  /**\n   * A namespace for the input area content factory.\n   */\n  export namespace ContentFactory {\n    /**\n     * Options for the content factory.\n     */\n    export interface IOptions {\n      /**\n       * The editor factory used by the content factory.\n       *\n       * If this is not passed, a default CodeMirror editor factory\n       * will be used.\n       */\n      editorFactory?: CodeEditor.Factory;\n    }\n  }\n\n  /**\n   * A function to create the default CodeMirror editor factory.\n   */\n  function _createDefaultEditorFactory(): CodeEditor.Factory {\n    let editorServices = new CodeMirrorEditorFactory();\n    return editorServices.newInlineEditor;\n  }\n\n  /**\n   * The default editor factory singleton based on CodeMirror.\n   */\n  export const defaultEditorFactory: CodeEditor.Factory = _createDefaultEditorFactory();\n\n  /**\n   * The default `ContentFactory` instance.\n   */\n  export const defaultContentFactory = new ContentFactory({});\n}\n\n/******************************************************************************\n * InputPrompt\n ******************************************************************************/\n\n/**\n * The interface for the input prompt.\n */\nexport interface IInputPrompt extends Widget {\n  /**\n   * The execution count of the prompt.\n   */\n  executionCount: string;\n}\n\n/**\n * The default input prompt implementation.\n */\nexport class InputPrompt extends Widget implements IInputPrompt {\n  /*\n   * Create an output prompt widget.\n   */\n  constructor() {\n    super();\n    this.addClass(INPUT_PROMPT_CLASS);\n  }\n\n  /**\n   * The execution count for the prompt.\n   */\n  get executionCount(): string {\n    return this._executionCount;\n  }\n  set executionCount(value: string) {\n    this._executionCount = value;\n    if (value === null) {\n      this.node.textContent = ' ';\n    } else {\n      this.node.textContent = `In [${value || ' '}]:`;\n    }\n  }\n\n  private _executionCount: string = null;\n}\n"]}