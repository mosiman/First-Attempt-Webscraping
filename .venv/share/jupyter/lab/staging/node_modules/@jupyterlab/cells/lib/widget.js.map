{"version":3,"file":"widget.js","sourceRoot":"","sources":["../../../../cells/src/widget.ts"],"names":[],"mappings":"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","sourcesContent":["/*-----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\n\nimport { AttachmentsResolver } from '@jupyterlab/attachments';\n\nimport { IClientSession } from '@jupyterlab/apputils';\n\nimport { IChangedArgs, ActivityMonitor } from '@jupyterlab/coreutils';\n\nimport { CodeEditor, CodeEditorWrapper } from '@jupyterlab/codeeditor';\n\nimport { IObservableMap } from '@jupyterlab/observables';\n\nimport {\n  OutputArea,\n  SimplifiedOutputArea,\n  IOutputPrompt,\n  OutputPrompt,\n  IStdin,\n  Stdin\n} from '@jupyterlab/outputarea';\n\nimport {\n  IRenderMime,\n  MimeModel,\n  RenderMimeRegistry\n} from '@jupyterlab/rendermime';\n\nimport { KernelMessage } from '@jupyterlab/services';\n\nimport { JSONValue, PromiseDelegate } from '@phosphor/coreutils';\n\nimport { Message } from '@phosphor/messaging';\n\nimport { PanelLayout, Panel, Widget } from '@phosphor/widgets';\n\nimport { InputCollapser, OutputCollapser } from './collapser';\n\nimport {\n  CellHeader,\n  CellFooter,\n  ICellHeader,\n  ICellFooter\n} from './headerfooter';\n\nimport { InputArea, IInputPrompt, InputPrompt } from './inputarea';\n\nimport {\n  ICellModel,\n  ICodeCellModel,\n  IMarkdownCellModel,\n  IRawCellModel\n} from './model';\n\nimport { InputPlaceholder, OutputPlaceholder } from './placeholder';\n\n/**\n * The CSS class added to cell widgets.\n */\nconst CELL_CLASS = 'jp-Cell';\n\n/**\n * The CSS class added to the cell header.\n */\nconst CELL_HEADER_CLASS = 'jp-Cell-header';\n\n/**\n * The CSS class added to the cell footer.\n */\nconst CELL_FOOTER_CLASS = 'jp-Cell-footer';\n\n/**\n * The CSS class added to the cell input wrapper.\n */\nconst CELL_INPUT_WRAPPER_CLASS = 'jp-Cell-inputWrapper';\n\n/**\n * The CSS class added to the cell output wrapper.\n */\nconst CELL_OUTPUT_WRAPPER_CLASS = 'jp-Cell-outputWrapper';\n\n/**\n * The CSS class added to the cell input area.\n */\nconst CELL_INPUT_AREA_CLASS = 'jp-Cell-inputArea';\n\n/**\n * The CSS class added to the cell output area.\n */\nconst CELL_OUTPUT_AREA_CLASS = 'jp-Cell-outputArea';\n\n/**\n * The CSS class added to the cell input collapser.\n */\nconst CELL_INPUT_COLLAPSER_CLASS = 'jp-Cell-inputCollapser';\n\n/**\n * The CSS class added to the cell output collapser.\n */\nconst CELL_OUTPUT_COLLAPSER_CLASS = 'jp-Cell-outputCollapser';\n\n/**\n * The class name added to the cell when collapsed.\n */\nconst COLLAPSED_CLASS = 'jp-mod-collapsed';\n\n/**\n * The class name added to the cell when readonly.\n */\nconst READONLY_CLASS = 'jp-mod-readOnly';\n\n/**\n * The class name added to code cells.\n */\nconst CODE_CELL_CLASS = 'jp-CodeCell';\n\n/**\n * The class name added to markdown cells.\n */\nconst MARKDOWN_CELL_CLASS = 'jp-MarkdownCell';\n\n/**\n * The class name added to rendered markdown output widgets.\n */\nconst MARKDOWN_OUTPUT_CLASS = 'jp-MarkdownOutput';\n\n/**\n * The class name added to raw cells.\n */\nconst RAW_CELL_CLASS = 'jp-RawCell';\n\n/**\n * The class name added to a rendered input area.\n */\nconst RENDERED_CLASS = 'jp-mod-rendered';\n\nconst NO_OUTPUTS_CLASS = 'jp-mod-noOutputs';\n\n/**\n * The text applied to an empty markdown cell.\n */\nconst DEFAULT_MARKDOWN_TEXT = 'Type Markdown and LaTeX: $ α^2 $';\n\n/**\n * The timeout to wait for change activity to have ceased before rendering.\n */\nconst RENDER_TIMEOUT = 1000;\n\n/******************************************************************************\n * Cell\n ******************************************************************************/\n\n/**\n * A base cell widget.\n */\nexport class Cell extends Widget {\n  /**\n   * Construct a new base cell widget.\n   */\n  constructor(options: Cell.IOptions) {\n    super();\n    this.addClass(CELL_CLASS);\n    let model = (this._model = options.model);\n    let contentFactory = (this.contentFactory =\n      options.contentFactory || Cell.defaultContentFactory);\n    this.layout = new PanelLayout();\n\n    // Header\n    let header = (this._header = contentFactory.createCellHeader());\n    header.addClass(CELL_HEADER_CLASS);\n    (this.layout as PanelLayout).addWidget(header);\n\n    // Input\n    let inputWrapper = (this._inputWrapper = new Panel());\n    inputWrapper.addClass(CELL_INPUT_WRAPPER_CLASS);\n    let inputCollapser = (this._inputCollapser = new InputCollapser());\n    inputCollapser.addClass(CELL_INPUT_COLLAPSER_CLASS);\n    let input = (this._input = new InputArea({ model, contentFactory }));\n    input.addClass(CELL_INPUT_AREA_CLASS);\n    inputWrapper.addWidget(inputCollapser);\n    inputWrapper.addWidget(input);\n    (this.layout as PanelLayout).addWidget(inputWrapper);\n\n    this._inputPlaceholder = new InputPlaceholder(() => {\n      this.inputHidden = !this.inputHidden;\n    });\n\n    // Footer\n    let footer = (this._footer = this.contentFactory.createCellFooter());\n    footer.addClass(CELL_FOOTER_CLASS);\n    (this.layout as PanelLayout).addWidget(footer);\n\n    // Editor settings\n    if (options.editorConfig) {\n      Object.keys(options.editorConfig).forEach(\n        (key: keyof CodeEditor.IConfig) => {\n          this.editor.setOption(key, options.editorConfig[key]);\n        }\n      );\n    }\n  }\n\n  /**\n   * Modify some state for initialization.\n   *\n   * Should be called at the end of the subclasses's constructor.\n   */\n  protected initializeState() {\n    const jupyter = this.model.metadata.get('jupyter') || ({} as any);\n    this.inputHidden = jupyter.source_hidden === true;\n  }\n\n  /**\n   * The content factory used by the widget.\n   */\n  readonly contentFactory: Cell.IContentFactory;\n\n  /**\n   * Get the prompt node used by the cell.\n   */\n  get promptNode(): HTMLElement {\n    if (!this._inputHidden) {\n      return this._input.promptNode;\n    } else {\n      return (this._inputPlaceholder.node as HTMLElement)\n        .firstElementChild as HTMLElement;\n    }\n  }\n\n  /**\n   * Get the CodeEditorWrapper used by the cell.\n   */\n  get editorWidget(): CodeEditorWrapper {\n    return this._input.editorWidget;\n  }\n\n  /**\n   * Get the CodeEditor used by the cell.\n   */\n  get editor(): CodeEditor.IEditor {\n    return this._input.editor;\n  }\n\n  /**\n   * Get the model used by the cell.\n   */\n  get model(): ICellModel {\n    return this._model;\n  }\n\n  /**\n   * Get the input area for the cell.\n   */\n  get inputArea(): InputArea {\n    return this._input;\n  }\n\n  /**\n   * The read only state of the cell.\n   */\n  get readOnly(): boolean {\n    return this._readOnly;\n  }\n  set readOnly(value: boolean) {\n    if (value === this._readOnly) {\n      return;\n    }\n    this._readOnly = value;\n    this.update();\n  }\n\n  /**\n   * A promise that resolves when the widget renders for the first time.\n   */\n  get ready(): Promise<void> {\n    return Promise.resolve(undefined);\n  }\n\n  /**\n   * Set the prompt for the widget.\n   */\n  setPrompt(value: string): void {\n    this._input.setPrompt(value);\n  }\n\n  /**\n   * The view state of input being hidden.\n   */\n  get inputHidden(): boolean {\n    return this._inputHidden;\n  }\n  set inputHidden(value: boolean) {\n    if (this._inputHidden === value) {\n      return;\n    }\n    let layout = this._inputWrapper.layout as PanelLayout;\n    if (value) {\n      this._input.parent = null;\n      layout.addWidget(this._inputPlaceholder);\n    } else {\n      this._inputPlaceholder.parent = null;\n      layout.addWidget(this._input);\n    }\n    this._inputHidden = value;\n    this.handleInputHidden(value);\n  }\n\n  /**\n   * Handle the input being hidden.\n   *\n   * #### Notes\n   * This is called by the `inputHidden` setter so that subclasses\n   * can perform actions upon the input being hidden without accessing\n   * private state.\n   */\n  protected handleInputHidden(value: boolean): void {\n    return;\n  }\n\n  /**\n   * Clone the cell, using the same model.\n   */\n  clone(): Cell {\n    let constructor = this.constructor as typeof Cell;\n    return new constructor({\n      model: this.model,\n      contentFactory: this.contentFactory\n    });\n  }\n\n  /**\n   * Dispose of the resources held by the widget.\n   */\n  dispose() {\n    // Do nothing if already disposed.\n    if (this.isDisposed) {\n      return;\n    }\n    this._input = null;\n    this._model = null;\n    this._header = null;\n    this._footer = null;\n    this._inputCollapser = null;\n    this._inputWrapper = null;\n    this._inputPlaceholder = null;\n    super.dispose();\n  }\n\n  /**\n   * Handle `after-attach` messages.\n   */\n  protected onAfterAttach(msg: Message): void {\n    this.update();\n  }\n\n  /**\n   * Handle `'activate-request'` messages.\n   */\n  protected onActivateRequest(msg: Message): void {\n    this.editor.focus();\n  }\n\n  /**\n   * Handle `update-request` messages.\n   */\n  protected onUpdateRequest(msg: Message): void {\n    if (!this._model) {\n      return;\n    }\n    // Handle read only state.\n    if (this.editor.getOption('readOnly') !== this._readOnly) {\n      this.editor.setOption('readOnly', this._readOnly);\n      this.toggleClass(READONLY_CLASS, this._readOnly);\n    }\n  }\n\n  private _readOnly = false;\n  private _model: ICellModel = null;\n  private _header: ICellHeader = null;\n  private _footer: ICellFooter = null;\n  private _inputHidden = false;\n  private _input: InputArea = null;\n  private _inputCollapser: InputCollapser = null;\n  private _inputWrapper: Widget = null;\n  private _inputPlaceholder: InputPlaceholder = null;\n}\n\n/**\n * The namespace for the `Cell` class statics.\n */\nexport namespace Cell {\n  /**\n   * An options object for initializing a cell widget.\n   */\n  export interface IOptions {\n    /**\n     * The model used by the cell.\n     */\n    model: ICellModel;\n\n    /**\n     * The factory object for customizable cell children.\n     */\n    contentFactory?: IContentFactory;\n\n    /**\n     * The configuration options for the text editor widget.\n     */\n    editorConfig?: Partial<CodeEditor.IConfig>;\n  }\n\n  /**\n   * The factory object for customizable cell children.\n   *\n   * This is used to allow users of cells to customize child content.\n   *\n   * This inherits from `OutputArea.IContentFactory` to avoid needless nesting and\n   * provide a single factory object for all notebook/cell/outputarea related\n   * widgets.\n   */\n  export interface IContentFactory\n    extends OutputArea.IContentFactory,\n      InputArea.IContentFactory {\n    /**\n     * Create a new cell header for the parent widget.\n     */\n    createCellHeader(): ICellHeader;\n\n    /**\n     * Create a new cell header for the parent widget.\n     */\n    createCellFooter(): ICellFooter;\n  }\n\n  /**\n   * The default implementation of an `IContentFactory`.\n   *\n   * This includes a CodeMirror editor factory to make it easy to use out of the box.\n   */\n  export class ContentFactory implements IContentFactory {\n    /**\n     * Create a content factory for a cell.\n     */\n    constructor(options: ContentFactory.IOptions = {}) {\n      this._editorFactory =\n        options.editorFactory || InputArea.defaultEditorFactory;\n    }\n\n    /**\n     * The readonly editor factory that create code editors\n     */\n    get editorFactory(): CodeEditor.Factory {\n      return this._editorFactory;\n    }\n\n    /**\n     * Create a new cell header for the parent widget.\n     */\n    createCellHeader(): ICellHeader {\n      return new CellHeader();\n    }\n\n    /**\n     * Create a new cell header for the parent widget.\n     */\n    createCellFooter(): ICellFooter {\n      return new CellFooter();\n    }\n\n    /**\n     * Create an input prompt.\n     */\n    createInputPrompt(): IInputPrompt {\n      return new InputPrompt();\n    }\n\n    /**\n     * Create the output prompt for the widget.\n     */\n    createOutputPrompt(): IOutputPrompt {\n      return new OutputPrompt();\n    }\n\n    /**\n     * Create an stdin widget.\n     */\n    createStdin(options: Stdin.IOptions): IStdin {\n      return new Stdin(options);\n    }\n\n    private _editorFactory: CodeEditor.Factory = null;\n  }\n\n  /**\n   * A namespace for cell content factory.\n   */\n  export namespace ContentFactory {\n    /**\n     * Options for the content factory.\n     */\n    export interface IOptions {\n      /**\n       * The editor factory used by the content factory.\n       *\n       * If this is not passed, a default CodeMirror editor factory\n       * will be used.\n       */\n      editorFactory?: CodeEditor.Factory;\n    }\n  }\n\n  /**\n   * The default content factory for cells.\n   */\n  export const defaultContentFactory = new ContentFactory();\n}\n\n/******************************************************************************\n * CodeCell\n ******************************************************************************/\n\n/**\n * A widget for a code cell.\n */\nexport class CodeCell extends Cell {\n  /**\n   * Construct a code cell widget.\n   */\n  constructor(options: CodeCell.IOptions) {\n    super(options);\n    this.addClass(CODE_CELL_CLASS);\n\n    // Only save options not handled by parent constructor.\n    let rendermime = (this._rendermime = options.rendermime);\n    let contentFactory = this.contentFactory;\n    let model = this.model;\n\n    // Insert the output before the cell footer.\n    let outputWrapper = (this._outputWrapper = new Panel());\n    outputWrapper.addClass(CELL_OUTPUT_WRAPPER_CLASS);\n    let outputCollapser = (this._outputCollapser = new OutputCollapser());\n    outputCollapser.addClass(CELL_OUTPUT_COLLAPSER_CLASS);\n    let output = (this._output = new OutputArea({\n      model: model.outputs,\n      rendermime,\n      contentFactory: contentFactory\n    }));\n    output.addClass(CELL_OUTPUT_AREA_CLASS);\n    // Set a CSS if there are no outputs, and connect a signal for future\n    // changes to the number of outputs. This is for conditional styling\n    // if there are no outputs.\n    if (model.outputs.length === 0) {\n      this.addClass(NO_OUTPUTS_CLASS);\n    }\n    output.outputLengthChanged.connect(this._outputLengthHandler, this);\n    outputWrapper.addWidget(outputCollapser);\n    outputWrapper.addWidget(output);\n    (this.layout as PanelLayout).insertWidget(2, outputWrapper);\n\n    this._outputPlaceholder = new OutputPlaceholder(() => {\n      this.outputHidden = !this.outputHidden;\n    });\n\n    // Modify state\n    this.initializeState();\n    model.stateChanged.connect(this.onStateChanged, this);\n    model.metadata.changed.connect(this.onMetadataChanged, this);\n  }\n\n  /**\n   * The model used by the widget.\n   */\n  readonly model: ICodeCellModel;\n\n  /**\n   * Modify some state for initialization.\n   *\n   * Should be called at the end of the subclasses's constructor.\n   */\n  protected initializeState() {\n    super.initializeState();\n\n    const metadataScrolled = this.model.metadata.get('scrolled');\n    this.outputsScrolled = metadataScrolled === true;\n\n    const jupyter = this.model.metadata.get('jupyter') || ({} as any);\n    const collapsed = this.model.metadata.get('collapsed');\n    this.outputHidden = collapsed === true || jupyter.outputs_hidden === true;\n\n    this.setPrompt(`${this.model.executionCount || ''}`);\n  }\n\n  /**\n   * Get the output area for the cell.\n   */\n  get outputArea(): OutputArea {\n    return this._output;\n  }\n\n  /**\n   * The view state of output being collapsed.\n   */\n  get outputHidden(): boolean {\n    return this._outputHidden;\n  }\n  set outputHidden(value: boolean) {\n    if (this._outputHidden === value) {\n      return;\n    }\n    let layout = this._outputWrapper.layout as PanelLayout;\n    if (value) {\n      layout.removeWidget(this._output);\n      layout.addWidget(this._outputPlaceholder);\n      if (this.inputHidden && !this._outputWrapper.isHidden) {\n        this._outputWrapper.hide();\n      }\n    } else {\n      if (this._outputWrapper.isHidden) {\n        this._outputWrapper.show();\n      }\n      layout.removeWidget(this._outputPlaceholder);\n      layout.addWidget(this._output);\n    }\n    this._outputHidden = value;\n  }\n\n  /**\n   * Whether the output is in a scrolled state?\n   */\n  get outputsScrolled(): boolean {\n    return this._outputsScrolled;\n  }\n  set outputsScrolled(value: boolean) {\n    this.toggleClass('jp-mod-outputsScrolled', value);\n    this._outputsScrolled = value;\n  }\n\n  /**\n   * Handle the input being hidden.\n   *\n   * #### Notes\n   * This method is called by the case cell implementation and is\n   * subclasses here so the code cell can watch to see when input\n   * is hidden without accessing private state.\n   */\n  protected handleInputHidden(value: boolean): void {\n    if (!value && this._outputWrapper.isHidden) {\n      this._outputWrapper.show();\n    } else if (value && !this._outputWrapper.isHidden && this._outputHidden) {\n      this._outputWrapper.hide();\n    }\n  }\n\n  /**\n   * Clone the cell, using the same model.\n   */\n  clone(): CodeCell {\n    let constructor = this.constructor as typeof CodeCell;\n    return new constructor({\n      model: this.model,\n      contentFactory: this.contentFactory,\n      rendermime: this._rendermime\n    });\n  }\n\n  /**\n   * Clone the OutputArea alone, returning a simplified output area, using the same model.\n   */\n  cloneOutputArea(): OutputArea {\n    return new SimplifiedOutputArea({\n      model: this.model.outputs,\n      contentFactory: this.contentFactory,\n      rendermime: this._rendermime\n    });\n  }\n\n  /**\n   * Dispose of the resources used by the widget.\n   */\n  dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n    this._output.outputLengthChanged.disconnect(\n      this._outputLengthHandler,\n      this\n    );\n    this._rendermime = null;\n    this._output = null;\n    this._outputWrapper = null;\n    this._outputCollapser = null;\n    this._outputPlaceholder = null;\n    super.dispose();\n  }\n\n  /**\n   * Handle `update-request` messages.\n   */\n  protected onUpdateRequest(msg: Message): void {\n    let value = this.model.metadata.get('collapsed') as boolean;\n    this.toggleClass(COLLAPSED_CLASS, value);\n    if (this._output) {\n      // TODO: handle scrolled state.\n    }\n    super.onUpdateRequest(msg);\n  }\n\n  /**\n   * Handle changes in the model.\n   */\n  protected onStateChanged(model: ICellModel, args: IChangedArgs<any>): void {\n    switch (args.name) {\n      case 'executionCount':\n        this.setPrompt(`${(model as ICodeCellModel).executionCount || ''}`);\n        break;\n      default:\n        break;\n    }\n  }\n\n  /**\n   * Handle changes in the metadata.\n   */\n  protected onMetadataChanged(\n    model: IObservableMap<JSONValue>,\n    args: IObservableMap.IChangedArgs<JSONValue>\n  ): void {\n    switch (args.key) {\n      case 'collapsed':\n      case 'scrolled':\n        this.update();\n        break;\n      default:\n        break;\n    }\n  }\n\n  /**\n   * Handle changes in the number of outputs in the output area.\n   */\n  private _outputLengthHandler(sender: OutputArea, args: number) {\n    let force = args === 0 ? true : false;\n    this.toggleClass(NO_OUTPUTS_CLASS, force);\n    /* Turn off scrolling outputs if there are none */\n    if (force) {\n      this.outputsScrolled = false;\n    }\n  }\n\n  private _rendermime: RenderMimeRegistry = null;\n  private _outputHidden = false;\n  private _outputsScrolled: boolean;\n  private _outputWrapper: Widget = null;\n  private _outputCollapser: OutputCollapser = null;\n  private _outputPlaceholder: OutputPlaceholder = null;\n  private _output: OutputArea = null;\n}\n\n/**\n * The namespace for the `CodeCell` class statics.\n */\nexport namespace CodeCell {\n  /**\n   * An options object for initializing a base cell widget.\n   */\n  export interface IOptions extends Cell.IOptions {\n    /**\n     * The model used by the cell.\n     */\n    model: ICodeCellModel;\n\n    /**\n     * The mime renderer for the cell widget.\n     */\n    rendermime: RenderMimeRegistry;\n  }\n\n  /**\n   * Execute a cell given a client session.\n   */\n  export function execute(\n    cell: CodeCell,\n    session: IClientSession\n  ): Promise<KernelMessage.IExecuteReplyMsg> {\n    let model = cell.model;\n    let code = model.value.text;\n    if (!code.trim() || !session.kernel) {\n      model.executionCount = null;\n      model.outputs.clear();\n      return Promise.resolve(void 0);\n    }\n\n    model.executionCount = null;\n    cell.outputHidden = false;\n    cell.setPrompt('*');\n    model.trusted = true;\n\n    return OutputArea.execute(code, cell.outputArea, session)\n      .then(msg => {\n        model.executionCount = msg.content.execution_count;\n        return msg;\n      })\n      .catch(e => {\n        if (e.message === 'Canceled') {\n          cell.setPrompt('');\n        }\n        throw e;\n      });\n  }\n}\n\n/******************************************************************************\n * MarkdownCell\n ******************************************************************************/\n\n/**\n * A widget for a Markdown cell.\n *\n * #### Notes\n * Things get complicated if we want the rendered text to update\n * any time the text changes, the text editor model changes,\n * or the input area model changes.  We don't support automatically\n * updating the rendered text in all of these cases.\n */\nexport class MarkdownCell extends Cell {\n  /**\n   * Construct a Markdown cell widget.\n   */\n  constructor(options: MarkdownCell.IOptions) {\n    super(options);\n    this.addClass(MARKDOWN_CELL_CLASS);\n    // Ensure we can resolve attachments:\n    this._rendermime = options.rendermime.clone({\n      resolver: new AttachmentsResolver({\n        parent: options.rendermime.resolver,\n        model: this.model.attachments\n      })\n    });\n\n    // Throttle the rendering rate of the widget.\n    this._monitor = new ActivityMonitor({\n      signal: this.model.contentChanged,\n      timeout: RENDER_TIMEOUT\n    });\n    this._monitor.activityStopped.connect(() => {\n      if (this._rendered) {\n        this.update();\n      }\n    }, this);\n\n    this._updateRenderedInput().then(() => {\n      this._ready.resolve(void 0);\n    });\n\n    super.initializeState();\n  }\n\n  /**\n   * The model used by the widget.\n   */\n  readonly model: IMarkdownCellModel;\n\n  /**\n   * A promise that resolves when the widget renders for the first time.\n   */\n  get ready(): Promise<void> {\n    return this._ready.promise;\n  }\n\n  /**\n   * Whether the cell is rendered.\n   */\n  get rendered(): boolean {\n    return this._rendered;\n  }\n  set rendered(value: boolean) {\n    if (value === this._rendered) {\n      return;\n    }\n    this._rendered = value;\n    this._handleRendered();\n  }\n\n  /**\n   * Render an input instead of the text editor.\n   */\n  protected renderInput(widget: Widget): void {\n    this.addClass(RENDERED_CLASS);\n    this.inputArea.renderInput(widget);\n  }\n\n  /**\n   * Show the text editor instead of rendered input.\n   */\n  protected showEditor(): void {\n    this.removeClass(RENDERED_CLASS);\n    this.inputArea.showEditor();\n  }\n\n  /*\n   * Handle `update-request` messages.\n   */\n  protected onUpdateRequest(msg: Message): void {\n    // Make sure we are properly rendered.\n    this._handleRendered();\n    super.onUpdateRequest(msg);\n  }\n\n  /**\n   * Handle the rendered state.\n   */\n  private _handleRendered(): void {\n    if (!this._rendered) {\n      this.showEditor();\n    } else {\n      this._updateRenderedInput();\n      this.renderInput(this._renderer);\n    }\n  }\n\n  /**\n   * Update the rendered input.\n   */\n  private _updateRenderedInput(): Promise<void> {\n    let model = this.model;\n    let text = (model && model.value.text) || DEFAULT_MARKDOWN_TEXT;\n    // Do not re-render if the text has not changed.\n    if (text !== this._prevText) {\n      let mimeModel = new MimeModel({ data: { 'text/markdown': text } });\n      if (!this._renderer) {\n        this._renderer = this._rendermime.createRenderer('text/markdown');\n        this._renderer.addClass(MARKDOWN_OUTPUT_CLASS);\n      }\n      this._prevText = text;\n      return this._renderer.renderModel(mimeModel);\n    }\n    return Promise.resolve(void 0);\n  }\n\n  /**\n   * Clone the cell, using the same model.\n   */\n  clone(): MarkdownCell {\n    let constructor = this.constructor as typeof MarkdownCell;\n    return new constructor({\n      model: this.model,\n      contentFactory: this.contentFactory,\n      rendermime: this._rendermime\n    });\n  }\n\n  private _monitor: ActivityMonitor<any, any> = null;\n  private _renderer: IRenderMime.IRenderer = null;\n  private _rendermime: RenderMimeRegistry;\n  private _rendered = true;\n  private _prevText = '';\n  private _ready = new PromiseDelegate<void>();\n}\n\n/**\n * The namespace for the `CodeCell` class statics.\n */\nexport namespace MarkdownCell {\n  /**\n   * An options object for initializing a base cell widget.\n   */\n  export interface IOptions extends Cell.IOptions {\n    /**\n     * The model used by the cell.\n     */\n    model: IMarkdownCellModel;\n\n    /**\n     * The mime renderer for the cell widget.\n     */\n    rendermime: RenderMimeRegistry;\n  }\n}\n\n/******************************************************************************\n * RawCell\n ******************************************************************************/\n\n/**\n * A widget for a raw cell.\n */\nexport class RawCell extends Cell {\n  /**\n   * Construct a raw cell widget.\n   */\n  constructor(options: Cell.IOptions) {\n    super(options);\n    this.addClass(RAW_CELL_CLASS);\n    super.initializeState();\n  }\n\n  /**\n   * Clone the cell, using the same model.\n   */\n  clone(): RawCell {\n    let constructor = this.constructor as typeof RawCell;\n    return new constructor({\n      model: this.model,\n      contentFactory: this.contentFactory\n    });\n  }\n\n  /**\n   * The model used by the widget.\n   */\n  readonly model: IRawCellModel;\n}\n\n/**\n * The namespace for the `RawCell` class statics.\n */\nexport namespace RawCell {\n  /**\n   * An options object for initializing a base cell widget.\n   */\n  export interface IOptions extends Cell.IOptions {\n    /**\n     * The model used by the cell.\n     */\n    model: IRawCellModel;\n  }\n}\n"]}