{"version":3,"file":"model.js","sourceRoot":"","sources":["../../../../cells/src/model.ts"],"names":[],"mappings":"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","sourcesContent":["/*-----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\n\nimport { JSONExt, JSONValue } from '@phosphor/coreutils';\n\nimport { ISignal, Signal } from '@phosphor/signaling';\n\nimport { IAttachmentsModel, AttachmentsModel } from '@jupyterlab/attachments';\n\nimport { CodeEditor } from '@jupyterlab/codeeditor';\n\nimport { IChangedArgs, nbformat } from '@jupyterlab/coreutils';\n\nimport { UUID } from '@phosphor/coreutils';\n\nimport {\n  IObservableJSON,\n  IModelDB,\n  IObservableValue,\n  ObservableValue\n} from '@jupyterlab/observables';\n\nimport { IOutputAreaModel, OutputAreaModel } from '@jupyterlab/outputarea';\n\n/**\n * The definition of a model object for a cell.\n */\nexport interface ICellModel extends CodeEditor.IModel {\n  /**\n   * The type of the cell.\n   */\n  readonly type: nbformat.CellType;\n\n  /**\n   * A unique identifier for the cell.\n   */\n  readonly id: string;\n\n  /**\n   * A signal emitted when the content of the model changes.\n   */\n  readonly contentChanged: ISignal<ICellModel, void>;\n\n  /**\n   * A signal emitted when a model state changes.\n   */\n  readonly stateChanged: ISignal<ICellModel, IChangedArgs<any>>;\n\n  /**\n   * Whether the cell is trusted.\n   */\n  trusted: boolean;\n\n  /**\n   * The metadata associated with the cell.\n   */\n  readonly metadata: IObservableJSON;\n\n  /**\n   * Serialize the model to JSON.\n   */\n  toJSON(): nbformat.ICell;\n}\n\n/**\n * The definition of a model cell object for a cell with attachments.\n */\nexport interface IAttachmentsCellModel extends ICellModel {\n  /**\n   * The cell attachments\n   */\n  readonly attachments: IAttachmentsModel;\n}\n\n/**\n * The definition of a code cell.\n */\nexport interface ICodeCellModel extends ICellModel {\n  /**\n   * The type of the cell.\n   *\n   * #### Notes\n   * This is a read-only property.\n   */\n  readonly type: 'code';\n\n  /**\n   * Serialize the model to JSON.\n   */\n  toJSON(): nbformat.ICodeCell;\n\n  /**\n   * The code cell's prompt number. Will be null if the cell has not been run.\n   */\n  executionCount: nbformat.ExecutionCount;\n\n  /**\n   * The cell outputs.\n   */\n  readonly outputs: IOutputAreaModel;\n}\n\n/**\n * The definition of a markdown cell.\n */\nexport interface IMarkdownCellModel extends IAttachmentsCellModel {\n  /**\n   * The type of the cell.\n   */\n  readonly type: 'markdown';\n\n  /**\n   * Serialize the model to JSON.\n   */\n  toJSON(): nbformat.IMarkdownCell;\n}\n\n/**\n * The definition of a raw cell.\n */\nexport interface IRawCellModel extends IAttachmentsCellModel {\n  /**\n   * The type of the cell.\n   */\n  readonly type: 'raw';\n\n  /**\n   * Serialize the model to JSON.\n   */\n  toJSON(): nbformat.IRawCell;\n}\n\nexport function isCodeCellModel(model: ICellModel): model is ICodeCellModel {\n  return model.type === 'code';\n}\n\nexport function isMarkdownCellModel(\n  model: ICellModel\n): model is IMarkdownCellModel {\n  return model.type === 'markdown';\n}\n\nexport function isRawCellModel(model: ICellModel): model is IRawCellModel {\n  return model.type === 'raw';\n}\n\n/**\n * An implementation of the cell model.\n */\nexport class CellModel extends CodeEditor.Model implements ICellModel {\n  /**\n   * Construct a cell model from optional cell content.\n   */\n  constructor(options: CellModel.IOptions) {\n    super({ modelDB: options.modelDB });\n\n    this.id = options.id || UUID.uuid4();\n\n    this.value.changed.connect(this.onGenericChange, this);\n\n    let cellType = this.modelDB.createValue('type');\n    cellType.set(this.type);\n\n    let observableMetadata = this.modelDB.createMap('metadata');\n    observableMetadata.changed.connect(this.onGenericChange, this);\n\n    let cell = options.cell;\n    let trusted = this.modelDB.createValue('trusted');\n    trusted.changed.connect(this.onTrustedChanged, this);\n\n    if (!cell) {\n      trusted.set(false);\n      return;\n    }\n    trusted.set(!!cell.metadata['trusted']);\n    delete cell.metadata['trusted'];\n\n    if (Array.isArray(cell.source)) {\n      this.value.text = (cell.source as string[]).join('');\n    } else {\n      this.value.text = cell.source as string;\n    }\n    let metadata = JSONExt.deepCopy(cell.metadata);\n    if (this.type !== 'raw') {\n      delete metadata['format'];\n    }\n    if (this.type !== 'code') {\n      delete metadata['collapsed'];\n      delete metadata['scrolled'];\n    }\n\n    for (let key in metadata) {\n      observableMetadata.set(key, metadata[key]);\n    }\n  }\n\n  /**\n   * The type of cell.\n   */\n  readonly type: nbformat.CellType;\n\n  /**\n   * A signal emitted when the state of the model changes.\n   */\n  readonly contentChanged = new Signal<this, void>(this);\n\n  /**\n   * A signal emitted when a model state changes.\n   */\n  readonly stateChanged = new Signal<this, IChangedArgs<any>>(this);\n\n  /**\n   * The id for the cell.\n   */\n  readonly id: string;\n\n  /**\n   * The metadata associated with the cell.\n   */\n  get metadata(): IObservableJSON {\n    return this.modelDB.get('metadata') as IObservableJSON;\n  }\n\n  /**\n   * Get the trusted state of the model.\n   */\n  get trusted(): boolean {\n    return this.modelDB.getValue('trusted') as boolean;\n  }\n\n  /**\n   * Set the trusted state of the model.\n   */\n  set trusted(newValue: boolean) {\n    let oldValue = this.trusted;\n    if (oldValue === newValue) {\n      return;\n    }\n    this.modelDB.setValue('trusted', newValue);\n  }\n\n  /**\n   * Serialize the model to JSON.\n   */\n  toJSON(): nbformat.ICell {\n    let metadata: nbformat.IBaseCellMetadata = Object.create(null);\n    for (let key of this.metadata.keys()) {\n      let value = JSON.parse(JSON.stringify(this.metadata.get(key)));\n      metadata[key] = value as JSONValue;\n    }\n    if (this.trusted) {\n      metadata['trusted'] = true;\n    }\n    return {\n      cell_type: this.type,\n      source: this.value.text,\n      metadata\n    } as nbformat.ICell;\n  }\n\n  /**\n   * Handle a change to the trusted state.\n   *\n   * The default implementation is a no-op.\n   */\n  onTrustedChanged(\n    trusted: IObservableValue,\n    args: ObservableValue.IChangedArgs\n  ): void {\n    /* no-op */\n  }\n\n  /**\n   * Handle a change to the observable value.\n   */\n  protected onGenericChange(): void {\n    this.contentChanged.emit(void 0);\n  }\n}\n\n/**\n * The namespace for `CellModel` statics.\n */\nexport namespace CellModel {\n  /**\n   * The options used to initialize a `CellModel`.\n   */\n  export interface IOptions {\n    /**\n     * The source cell data.\n     */\n    cell?: nbformat.IBaseCell;\n\n    /**\n     * An IModelDB in which to store cell data.\n     */\n    modelDB?: IModelDB;\n\n    /**\n     * A unique identifier for this cell.\n     */\n    id?: string;\n  }\n}\n\n/**\n * A base implementation for cell models with attachments.\n */\nexport class AttachmentsCellModel extends CellModel {\n  /**\n   * Construct a new cell with optional attachments.\n   */\n  constructor(options: AttachmentsCellModel.IOptions) {\n    super(options);\n    let factory =\n      options.contentFactory || AttachmentsCellModel.defaultContentFactory;\n    let attachments: nbformat.IAttachments | undefined;\n    let cell = options.cell;\n    if (cell && (cell.cell_type === 'raw' || cell.cell_type === 'markdown')) {\n      attachments = (cell as nbformat.IRawCell | nbformat.IMarkdownCell)\n        .attachments;\n    }\n\n    this._attachments = factory.createAttachmentsModel({\n      values: attachments,\n      modelDB: this.modelDB\n    });\n    this._attachments.stateChanged.connect(this.onGenericChange, this);\n  }\n\n  /**\n   * Get the attachments of the model.\n   */\n  get attachments(): IAttachmentsModel {\n    return this._attachments;\n  }\n\n  /**\n   * Serialize the model to JSON.\n   */\n  toJSON(): nbformat.IRawCell | nbformat.IMarkdownCell {\n    let cell = super.toJSON() as nbformat.IRawCell | nbformat.IMarkdownCell;\n    if (this.attachments.length) {\n      cell.attachments = this.attachments.toJSON();\n    }\n    return cell;\n  }\n\n  private _attachments: IAttachmentsModel | null = null;\n}\n\n/**\n * The namespace for `AttachmentsCellModel` statics.\n */\nexport namespace AttachmentsCellModel {\n  /**\n   * The options used to initialize a `AttachmentsCellModel`.\n   */\n  export interface IOptions extends CellModel.IOptions {\n    /**\n     * The factory for attachment model creation.\n     */\n    contentFactory?: IContentFactory;\n  }\n\n  /**\n   * A factory for creating code cell model content.\n   */\n  export interface IContentFactory {\n    /**\n     * Create an output area.\n     */\n    createAttachmentsModel(\n      options: IAttachmentsModel.IOptions\n    ): IAttachmentsModel;\n  }\n\n  /**\n   * The default implementation of an `IContentFactory`.\n   */\n  export class ContentFactory implements IContentFactory {\n    /**\n     * Create an attachments model.\n     */\n    createAttachmentsModel(\n      options: IAttachmentsModel.IOptions\n    ): IAttachmentsModel {\n      return new AttachmentsModel(options);\n    }\n  }\n\n  /**\n   * The shared `ContentFactory` instance.\n   */\n  export const defaultContentFactory = new ContentFactory();\n}\n\n/**\n * An implementation of a raw cell model.\n */\nexport class RawCellModel extends AttachmentsCellModel {\n  /**\n   * The type of the cell.\n   */\n  get type(): 'raw' {\n    return 'raw';\n  }\n\n  /**\n   * Serialize the model to JSON.\n   */\n  toJSON(): nbformat.IRawCell {\n    return super.toJSON() as nbformat.IRawCell;\n  }\n}\n\n/**\n * An implementation of a markdown cell model.\n */\nexport class MarkdownCellModel extends AttachmentsCellModel {\n  /**\n   * Construct a markdown cell model from optional cell content.\n   */\n  constructor(options: CellModel.IOptions) {\n    super(options);\n    // Use the Github-flavored markdown mode.\n    this.mimeType = 'text/x-ipythongfm';\n  }\n\n  /**\n   * The type of the cell.\n   */\n  get type(): 'markdown' {\n    return 'markdown';\n  }\n\n  /**\n   * Serialize the model to JSON.\n   */\n  toJSON(): nbformat.IMarkdownCell {\n    return super.toJSON() as nbformat.IMarkdownCell;\n  }\n}\n\n/**\n * An implementation of a code cell Model.\n */\nexport class CodeCellModel extends CellModel implements ICodeCellModel {\n  /**\n   * Construct a new code cell with optional original cell content.\n   */\n  constructor(options: CodeCellModel.IOptions) {\n    super(options);\n    let factory = options.contentFactory || CodeCellModel.defaultContentFactory;\n    let trusted = this.trusted;\n    let cell = options.cell as nbformat.ICodeCell;\n    let outputs: nbformat.IOutput[] = [];\n    let executionCount = this.modelDB.createValue('executionCount');\n    if (!executionCount.get()) {\n      if (cell && cell.cell_type === 'code') {\n        executionCount.set(cell.execution_count || null);\n        outputs = cell.outputs;\n      } else {\n        executionCount.set(null);\n      }\n    }\n    executionCount.changed.connect(this._onExecutionCountChanged, this);\n\n    this._outputs = factory.createOutputArea({\n      trusted,\n      values: outputs,\n      modelDB: this.modelDB\n    });\n    this._outputs.changed.connect(this.onGenericChange, this);\n  }\n\n  /**\n   * The type of the cell.\n   */\n  get type(): 'code' {\n    return 'code';\n  }\n\n  /**\n   * The execution count of the cell.\n   */\n  get executionCount(): nbformat.ExecutionCount {\n    return this.modelDB.getValue('executionCount') as nbformat.ExecutionCount;\n  }\n  set executionCount(newValue: nbformat.ExecutionCount) {\n    let oldValue = this.executionCount;\n    if (newValue === oldValue) {\n      return;\n    }\n    this.modelDB.setValue('executionCount', newValue || null);\n  }\n\n  /**\n   * The cell outputs.\n   */\n  get outputs(): IOutputAreaModel {\n    return this._outputs;\n  }\n\n  /**\n   * Dispose of the resources held by the model.\n   */\n  dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n    this._outputs.dispose();\n    this._outputs = null;\n    super.dispose();\n  }\n\n  /**\n   * Serialize the model to JSON.\n   */\n  toJSON(): nbformat.ICodeCell {\n    let cell = super.toJSON() as nbformat.ICodeCell;\n    cell.execution_count = this.executionCount || null;\n    cell.outputs = this.outputs.toJSON();\n    return cell;\n  }\n\n  /**\n   * Handle a change to the trusted state.\n   */\n  onTrustedChanged(\n    trusted: IObservableValue,\n    args: ObservableValue.IChangedArgs\n  ): void {\n    if (this._outputs) {\n      this._outputs.trusted = args.newValue as boolean;\n    }\n    this.stateChanged.emit({\n      name: 'trusted',\n      oldValue: args.oldValue,\n      newValue: args.newValue\n    });\n  }\n\n  /**\n   * Handle a change to the execution count.\n   */\n  private _onExecutionCountChanged(\n    count: IObservableValue,\n    args: ObservableValue.IChangedArgs\n  ): void {\n    this.contentChanged.emit(void 0);\n    this.stateChanged.emit({\n      name: 'executionCount',\n      oldValue: args.oldValue,\n      newValue: args.newValue\n    });\n  }\n\n  private _outputs: IOutputAreaModel = null;\n}\n\n/**\n * The namespace for `CodeCellModel` statics.\n */\nexport namespace CodeCellModel {\n  /**\n   * The options used to initialize a `CodeCellModel`.\n   */\n  export interface IOptions extends CellModel.IOptions {\n    /**\n     * The factory for output area model creation.\n     */\n    contentFactory?: IContentFactory;\n  }\n\n  /**\n   * A factory for creating code cell model content.\n   */\n  export interface IContentFactory {\n    /**\n     * Create an output area.\n     */\n    createOutputArea(options: IOutputAreaModel.IOptions): IOutputAreaModel;\n  }\n\n  /**\n   * The default implementation of an `IContentFactory`.\n   */\n  export class ContentFactory implements IContentFactory {\n    /**\n     * Create an output area.\n     */\n    createOutputArea(options: IOutputAreaModel.IOptions): IOutputAreaModel {\n      return new OutputAreaModel(options);\n    }\n  }\n\n  /**\n   * The shared `ContentFactory` instance.\n   */\n  export const defaultContentFactory = new ContentFactory();\n}\n"]}