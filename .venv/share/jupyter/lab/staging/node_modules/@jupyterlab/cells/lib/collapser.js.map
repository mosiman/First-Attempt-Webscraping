{"version":3,"file":"collapser.js","sourceRoot":"","sources":["../../../../cells/src/collapser.tsx"],"names":[],"mappings":";AAAA;;;+EAG+E;;;;;;;;;AAE/E,mDAAoD;AAEpD,6CAA+B;AAI/B;;GAEG;AACH,MAAM,eAAe,GAAG,cAAc,CAAC;AAEvC;;GAEG;AACH,MAAM,qBAAqB,GAAG,oBAAoB,CAAC;AAEnD;;GAEG;AACH,MAAM,eAAe,GAAG,mBAAmB,CAAC;AAE5C;;GAEG;AACH,MAAM,gBAAgB,GAAG,oBAAoB,CAAC;AAE9C;;GAEG;AACH,MAAM,mBAAmB,GAAG,kBAAkB,CAAC;AAE/C;;;;;;;GAOG;AACH,eAAgC,SAAQ,uBAAkB;IACxD;;OAEG;IACH;QACE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC;IACjC,CAAC;IAED;;OAEG;IACH,IAAI,SAAS;QACX,OAAO,KAAK,CAAC;IACf,CAAC;IAED;;OAEG;IACO,MAAM;QACd,IAAI,UAAU,GAAG,qBAAqB,CAAC;QACvC,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,UAAU,IAAI,IAAI,mBAAmB,EAAE,CAAC;SACzC;QACD,OAAO,6BAAK,SAAS,EAAE,UAAU,EAAE,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,GAAI,CAAC;IAC3E,CAAC;CAMF;AA/BD,8BA+BC;AAED;;GAEG;AACH,oBAA4B,SAAQ,SAAS;IAC3C;;OAEG;IACH;QACE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC;IACjC,CAAC;IAED;;OAEG;IACH,IAAI,SAAS;QACX,IAAI,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,MAAc,CAAC;QACtC,IAAI,IAAI,EAAE;YACR,OAAO,IAAI,CAAC,WAAW,CAAC;SACzB;aAAM;YACL,OAAO,KAAK,CAAC;SACd;IACH,CAAC;IAED;;OAEG;IACO,WAAW,CAAC,CAAmC;QACvD,IAAI,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,MAAc,CAAC;QACtC,IAAI,IAAI,EAAE;YACR,IAAI,CAAC,WAAW,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;SACtC;QACD,gDAAgD;QAChD,IAAI,CAAC,MAAM,EAAE,CAAC;IAChB,CAAC;CACF;AAhCD,wCAgCC;AAED;;GAEG;AACH,qBAA6B,SAAQ,SAAS;IAC5C;;OAEG;IACH;QACE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC;IAClC,CAAC;IAED;;OAEG;IACH,IAAI,SAAS;QACX,IAAI,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,MAAkB,CAAC;QAC1C,IAAI,IAAI,EAAE;YACR,OAAO,IAAI,CAAC,YAAY,CAAC;SAC1B;aAAM;YACL,OAAO,KAAK,CAAC;SACd;IACH,CAAC;IAED;;OAEG;IACO,WAAW,CAAC,CAAmC;QACvD,IAAI,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,MAAkB,CAAC;QAC1C,IAAI,IAAI,EAAE;YACR,IAAI,CAAC,YAAY,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC;SACxC;QACD,gDAAgD;QAChD,IAAI,CAAC,MAAM,EAAE,CAAC;IAChB,CAAC;CACF;AAhCD,0CAgCC","sourcesContent":["/*-----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\n\nimport { VDomRenderer } from '@jupyterlab/apputils';\n\nimport * as React from 'react';\n\nimport { Cell, CodeCell } from './widget';\n\n/**\n * The CSS class added to all collapsers.\n */\nconst COLLAPSER_CLASS = 'jp-Collapser';\n\n/**\n * The CSS class added to the collapser child.\n */\nconst COLLAPSER_CHILD_CLASS = 'jp-Collapser-child';\n\n/**\n * The CSS class added to input collapsers.\n */\nconst INPUT_COLLAPSER = 'jp-InputCollapser';\n\n/**\n * The CSS class added to output collapsers.\n */\nconst OUTPUT_COLLAPSER = 'jp-OutputCollapser';\n\n/**\n * The CSS class added the collapser child when collapsed.\n */\nconst MOD_COLLAPSED_CLASS = 'jp-mod-collapsed';\n\n/**\n * Abstract collapser base class.\n *\n * ### Notes\n * A collapser is a visible div to the left of a cell's\n * input/output that a user can click on to collapse the\n * input/output.\n */\nexport abstract class Collapser extends VDomRenderer<null> {\n  /**\n   * Construct a new collapser.\n   */\n  constructor() {\n    super();\n    this.addClass(COLLAPSER_CLASS);\n  }\n\n  /**\n   * Is the input/output of the parent collapsed.\n   */\n  get collapsed(): boolean {\n    return false;\n  }\n\n  /**\n   * Render the collapser with the virtual DOM.\n   */\n  protected render(): React.ReactElement<any> {\n    let childClass = COLLAPSER_CHILD_CLASS;\n    if (this.collapsed) {\n      childClass += ` ${MOD_COLLAPSED_CLASS}`;\n    }\n    return <div className={childClass} onClick={e => this.handleClick(e)} />;\n  }\n\n  /**\n   * Handle the click event.\n   */\n  protected abstract handleClick(e: React.MouseEvent<HTMLDivElement>): void;\n}\n\n/**\n * A collapser subclass to collapse a cell's input area.\n */\nexport class InputCollapser extends Collapser {\n  /**\n   * Construct a new input collapser.\n   */\n  constructor() {\n    super();\n    this.addClass(INPUT_COLLAPSER);\n  }\n\n  /**\n   * Is the cell's input collapsed?\n   */\n  get collapsed(): boolean {\n    let cell = this.parent.parent as Cell;\n    if (cell) {\n      return cell.inputHidden;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Handle a click event for the user to collapse the cell's input.\n   */\n  protected handleClick(e: React.MouseEvent<HTMLDivElement>): void {\n    let cell = this.parent.parent as Cell;\n    if (cell) {\n      cell.inputHidden = !cell.inputHidden;\n    }\n    /* We need this until we watch the cell state */\n    this.update();\n  }\n}\n\n/**\n * A collapser subclass to collapse a cell's output area.\n */\nexport class OutputCollapser extends Collapser {\n  /**\n   * Construct a new output collapser.\n   */\n  constructor() {\n    super();\n    this.addClass(OUTPUT_COLLAPSER);\n  }\n\n  /**\n   * Is the cell's output collapsed?\n   */\n  get collapsed(): boolean {\n    let cell = this.parent.parent as CodeCell;\n    if (cell) {\n      return cell.outputHidden;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Handle a click event for the user to collapse the cell's output.\n   */\n  protected handleClick(e: React.MouseEvent<HTMLDivElement>): void {\n    let cell = this.parent.parent as CodeCell;\n    if (cell) {\n      cell.outputHidden = !cell.outputHidden;\n    }\n    /* We need this until we watch the cell state */\n    this.update();\n  }\n}\n"]}