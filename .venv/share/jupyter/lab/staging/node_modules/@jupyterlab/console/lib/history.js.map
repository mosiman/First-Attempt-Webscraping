{"version":3,"file":"history.js","sourceRoot":"","sources":["../../../../console/src/history.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { KernelMessage } from '@jupyterlab/services';\n\nimport { IDisposable } from '@phosphor/disposable';\n\nimport { Signal } from '@phosphor/signaling';\n\nimport { IClientSession } from '@jupyterlab/apputils';\n\nimport { CodeEditor } from '@jupyterlab/codeeditor';\n\n/**\n * The definition of a console history manager object.\n */\nexport interface IConsoleHistory extends IDisposable {\n  /**\n   * The client session used by the foreign handler.\n   */\n  readonly session: IClientSession;\n\n  /**\n   * The current editor used by the history widget.\n   */\n  editor: CodeEditor.IEditor | null;\n\n  /**\n   * The placeholder text that a history session began with.\n   */\n  readonly placeholder: string;\n\n  /**\n   * Get the previous item in the console history.\n   *\n   * @param placeholder - The placeholder string that gets temporarily added\n   * to the history only for the duration of one history session. If multiple\n   * placeholders are sent within a session, only the first one is accepted.\n   *\n   * @returns A Promise for console command text or `undefined` if unavailable.\n   */\n  back(placeholder: string): Promise<string>;\n\n  /**\n   * Get the next item in the console history.\n   *\n   * @param placeholder - The placeholder string that gets temporarily added\n   * to the history only for the duration of one history session. If multiple\n   * placeholders are sent within a session, only the first one is accepted.\n   *\n   * @returns A Promise for console command text or `undefined` if unavailable.\n   */\n  forward(placeholder: string): Promise<string>;\n\n  /**\n   * Add a new item to the bottom of history.\n   *\n   * @param item The item being added to the bottom of history.\n   *\n   * #### Notes\n   * If the item being added is undefined or empty, it is ignored. If the item\n   * being added is the same as the last item in history, it is ignored as well\n   * so that the console's history will consist of no contiguous repetitions.\n   */\n  push(item: string): void;\n\n  /**\n   * Reset the history navigation state, i.e., start a new history session.\n   */\n  reset(): void;\n}\n\n/**\n * A console history manager object.\n */\nexport class ConsoleHistory implements IConsoleHistory {\n  /**\n   * Construct a new console history object.\n   */\n  constructor(options: ConsoleHistory.IOptions) {\n    this.session = options.session;\n    this._handleKernel();\n    this.session.kernelChanged.connect(this._handleKernel, this);\n  }\n\n  /**\n   * The client session used by the foreign handler.\n   */\n  readonly session: IClientSession;\n\n  /**\n   * The current editor used by the history manager.\n   */\n  get editor(): CodeEditor.IEditor | null {\n    return this._editor;\n  }\n  set editor(value: CodeEditor.IEditor | null) {\n    if (this._editor === value) {\n      return;\n    }\n\n    let prev = this._editor;\n    if (prev) {\n      prev.edgeRequested.disconnect(this.onEdgeRequest, this);\n      prev.model.value.changed.disconnect(this.onTextChange, this);\n    }\n\n    this._editor = value;\n\n    if (value) {\n      value.edgeRequested.connect(this.onEdgeRequest, this);\n      value.model.value.changed.connect(this.onTextChange, this);\n    }\n  }\n\n  /**\n   * The placeholder text that a history session began with.\n   */\n  get placeholder(): string {\n    return this._placeholder;\n  }\n\n  /**\n   * Get whether the console history manager is disposed.\n   */\n  get isDisposed(): boolean {\n    return this._isDisposed;\n  }\n\n  /**\n   * Dispose of the resources held by the console history manager.\n   */\n  dispose(): void {\n    this._isDisposed = true;\n    this._history.length = 0;\n    Signal.clearData(this);\n  }\n\n  /**\n   * Get the previous item in the console history.\n   *\n   * @param placeholder - The placeholder string that gets temporarily added\n   * to the history only for the duration of one history session. If multiple\n   * placeholders are sent within a session, only the first one is accepted.\n   *\n   * @returns A Promise for console command text or `undefined` if unavailable.\n   */\n  back(placeholder: string): Promise<string> {\n    if (!this._hasSession) {\n      this._hasSession = true;\n      this._placeholder = placeholder;\n      // Filter the history with the placeholder string.\n      this.setFilter(placeholder);\n      this._cursor = this._filtered.length - 1;\n    }\n\n    --this._cursor;\n    this._cursor = Math.max(0, this._cursor);\n    let content = this._filtered[this._cursor];\n    return Promise.resolve(content);\n  }\n\n  /**\n   * Get the next item in the console history.\n   *\n   * @param placeholder - The placeholder string that gets temporarily added\n   * to the history only for the duration of one history session. If multiple\n   * placeholders are sent within a session, only the first one is accepted.\n   *\n   * @returns A Promise for console command text or `undefined` if unavailable.\n   */\n  forward(placeholder: string): Promise<string> {\n    if (!this._hasSession) {\n      this._hasSession = true;\n      this._placeholder = placeholder;\n      // Filter the history with the placeholder string.\n      this.setFilter(placeholder);\n      this._cursor = this._filtered.length;\n    }\n\n    ++this._cursor;\n    this._cursor = Math.min(this._filtered.length - 1, this._cursor);\n    let content = this._filtered[this._cursor];\n    return Promise.resolve(content);\n  }\n\n  /**\n   * Add a new item to the bottom of history.\n   *\n   * @param item The item being added to the bottom of history.\n   *\n   * #### Notes\n   * If the item being added is undefined or empty, it is ignored. If the item\n   * being added is the same as the last item in history, it is ignored as well\n   * so that the console's history will consist of no contiguous repetitions.\n   */\n  push(item: string): void {\n    if (item && item !== this._history[this._history.length - 1]) {\n      this._history.push(item);\n    }\n    this.reset();\n  }\n\n  /**\n   * Reset the history navigation state, i.e., start a new history session.\n   */\n  reset(): void {\n    this._cursor = this._history.length;\n    this._hasSession = false;\n    this._placeholder = '';\n  }\n\n  /**\n   * Populate the history collection on history reply from a kernel.\n   *\n   * @param value The kernel message history reply.\n   *\n   * #### Notes\n   * History entries have the shape:\n   * [session: number, line: number, input: string]\n   * Contiguous duplicates are stripped out of the API response.\n   */\n  protected onHistory(value: KernelMessage.IHistoryReplyMsg): void {\n    this._history.length = 0;\n    let last = '';\n    let current = '';\n    for (let i = 0; i < value.content.history.length; i++) {\n      current = (value.content.history[i] as string[])[2];\n      if (current !== last) {\n        this._history.push((last = current));\n      }\n    }\n    // Reset the history navigation cursor back to the bottom.\n    this._cursor = this._history.length;\n  }\n\n  /**\n   * Handle a text change signal from the editor.\n   */\n  protected onTextChange(): void {\n    if (this._setByHistory) {\n      this._setByHistory = false;\n      return;\n    }\n    this.reset();\n  }\n\n  /**\n   * Handle an edge requested signal.\n   */\n  protected onEdgeRequest(\n    editor: CodeEditor.IEditor,\n    location: CodeEditor.EdgeLocation\n  ): void {\n    let model = editor.model;\n    let source = model.value.text;\n\n    if (location === 'top') {\n      this.back(source).then(value => {\n        if (this.isDisposed || !value) {\n          return;\n        }\n        if (model.value.text === value) {\n          return;\n        }\n        this._setByHistory = true;\n        model.value.text = value;\n        editor.setCursorPosition({ line: 0, column: 0 });\n      });\n    } else {\n      this.forward(source).then(value => {\n        if (this.isDisposed) {\n          return;\n        }\n        let text = value || this.placeholder;\n        if (model.value.text === text) {\n          return;\n        }\n        this._setByHistory = true;\n        model.value.text = text;\n        let pos = editor.getPositionAt(text.length);\n        if (pos) {\n          editor.setCursorPosition(pos);\n        }\n      });\n    }\n  }\n\n  /**\n   * Handle the current kernel changing.\n   */\n  private _handleKernel(): void {\n    let kernel = this.session.kernel;\n    if (!kernel) {\n      this._history.length = 0;\n      return;\n    }\n\n    kernel.requestHistory(Private.initialRequest).then(v => {\n      this.onHistory(v);\n    });\n  }\n\n  /**\n   * Set the filter data.\n   *\n   * @param filterStr - The string to use when filtering the data.\n   */\n  protected setFilter(filterStr: string = ''): void {\n    // Apply the new filter and remove contiguous duplicates.\n    this._filtered.length = 0;\n\n    let last = '';\n    let current = '';\n\n    for (let i = 0; i < this._history.length; i++) {\n      current = this._history[i];\n      if (\n        current !== last &&\n        filterStr === current.slice(0, filterStr.length)\n      ) {\n        this._filtered.push((last = current));\n      }\n    }\n\n    this._filtered.push(filterStr);\n  }\n\n  private _cursor = 0;\n  private _hasSession = false;\n  private _history: string[] = [];\n  private _placeholder: string = '';\n  private _setByHistory = false;\n  private _isDisposed = false;\n  private _editor: CodeEditor.IEditor | null = null;\n  private _filtered: string[] = [];\n}\n\n/**\n * A namespace for ConsoleHistory statics.\n */\nexport namespace ConsoleHistory {\n  /**\n   * The initialization options for a console history object.\n   */\n  export interface IOptions {\n    /**\n     * The client session used by the foreign handler.\n     */\n    session: IClientSession;\n  }\n}\n\n/**\n * A namespace for private data.\n */\nnamespace Private {\n  export const initialRequest: KernelMessage.IHistoryRequest = {\n    output: false,\n    raw: true,\n    hist_access_type: 'tail',\n    n: 500\n  };\n}\n"]}