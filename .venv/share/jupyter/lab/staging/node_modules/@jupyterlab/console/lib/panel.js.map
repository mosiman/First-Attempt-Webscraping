{"version":3,"file":"panel.js","sourceRoot":"","sources":["../../../../console/src/panel.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { ClientSession, IClientSession } from '@jupyterlab/apputils';\n\nimport { IEditorMimeTypeService } from '@jupyterlab/codeeditor';\n\nimport { PathExt, Time } from '@jupyterlab/coreutils';\n\nimport { UUID } from '@phosphor/coreutils';\n\nimport { RenderMimeRegistry } from '@jupyterlab/rendermime';\n\nimport { ServiceManager } from '@jupyterlab/services';\n\nimport { Token } from '@phosphor/coreutils';\n\nimport { Message } from '@phosphor/messaging';\n\nimport { Panel } from '@phosphor/widgets';\n\nimport { CodeConsole } from './widget';\nimport { IDisposable } from '@phosphor/disposable';\n\n/**\n * The class name added to console panels.\n */\nconst PANEL_CLASS = 'jp-ConsolePanel';\n\nconst CONSOLE_ICON_CLASS = 'jp-CodeConsoleIcon';\n\n/**\n * A panel which contains a console and the ability to add other children.\n */\nexport class ConsolePanel extends Panel {\n  /**\n   * Construct a console panel.\n   */\n  constructor(options: ConsolePanel.IOptions) {\n    super();\n    this.addClass(PANEL_CLASS);\n    let {\n      rendermime,\n      mimeTypeService,\n      path,\n      basePath,\n      name,\n      manager,\n      modelFactory\n    } = options;\n    let contentFactory = (this.contentFactory =\n      options.contentFactory || ConsolePanel.defaultContentFactory);\n    let count = Private.count++;\n    if (!path) {\n      path = `${basePath || ''}/console-${count}-${UUID.uuid4()}`;\n    }\n\n    let session = (this._session = new ClientSession({\n      manager: manager.sessions,\n      path,\n      name: name || `Console ${count}`,\n      type: 'console',\n      kernelPreference: options.kernelPreference,\n      setBusy: options.setBusy\n    }));\n\n    let resolver = new RenderMimeRegistry.UrlResolver({\n      session,\n      contents: manager.contents\n    });\n    rendermime = rendermime.clone({ resolver });\n\n    this.console = contentFactory.createConsole({\n      rendermime,\n      session,\n      mimeTypeService,\n      contentFactory,\n      modelFactory\n    });\n    this.addWidget(this.console);\n\n    session.initialize().then(() => {\n      this._connected = new Date();\n      this._updateTitle();\n    });\n\n    this.console.executed.connect(this._onExecuted, this);\n    this._updateTitle();\n    session.kernelChanged.connect(this._updateTitle, this);\n    session.propertyChanged.connect(this._updateTitle, this);\n\n    this.title.icon = CONSOLE_ICON_CLASS;\n    this.title.closable = true;\n    this.id = `console-${count}`;\n  }\n\n  /**\n   * The content factory used by the console panel.\n   */\n  readonly contentFactory: ConsolePanel.IContentFactory;\n\n  /**\n   * The console widget used by the panel.\n   */\n  readonly console: CodeConsole;\n\n  /**\n   * The session used by the panel.\n   */\n  get session(): IClientSession {\n    return this._session;\n  }\n\n  /**\n   * Dispose of the resources held by the widget.\n   */\n  dispose(): void {\n    this.session.dispose();\n    this.console.dispose();\n    super.dispose();\n  }\n\n  /**\n   * Handle `'activate-request'` messages.\n   */\n  protected onActivateRequest(msg: Message): void {\n    let prompt = this.console.promptCell;\n    if (prompt) {\n      prompt.editor.focus();\n    }\n  }\n\n  /**\n   * Handle `'close-request'` messages.\n   */\n  protected onCloseRequest(msg: Message): void {\n    super.onCloseRequest(msg);\n    this.dispose();\n  }\n\n  /**\n   * Handle a console execution.\n   */\n  private _onExecuted(sender: CodeConsole, args: Date) {\n    this._executed = args;\n    this._updateTitle();\n  }\n\n  /**\n   * Update the console panel title.\n   */\n  private _updateTitle(): void {\n    Private.updateTitle(this, this._connected, this._executed);\n  }\n\n  private _executed: Date | null = null;\n  private _connected: Date | null = null;\n  private _session: ClientSession;\n}\n\n/**\n * A namespace for ConsolePanel statics.\n */\nexport namespace ConsolePanel {\n  /**\n   * The initialization options for a console panel.\n   */\n  export interface IOptions {\n    /**\n     * The rendermime instance used by the panel.\n     */\n    rendermime: RenderMimeRegistry;\n\n    /**\n     * The content factory for the panel.\n     */\n    contentFactory: IContentFactory;\n\n    /**\n     * The service manager used by the panel.\n     */\n    manager: ServiceManager.IManager;\n\n    /**\n     * The path of an existing console.\n     */\n    path?: string;\n\n    /**\n     * The base path for a new console.\n     */\n    basePath?: string;\n\n    /**\n     * The name of the console.\n     */\n    name?: string;\n\n    /**\n     * A kernel preference.\n     */\n    kernelPreference?: IClientSession.IKernelPreference;\n\n    /**\n     * The model factory for the console widget.\n     */\n    modelFactory?: CodeConsole.IModelFactory;\n\n    /**\n     * The service used to look up mime types.\n     */\n    mimeTypeService: IEditorMimeTypeService;\n\n    /**\n     * A function to call when the kernel is busy.\n     */\n    setBusy?: () => IDisposable;\n  }\n\n  /**\n   * The console panel renderer.\n   */\n  export interface IContentFactory extends CodeConsole.IContentFactory {\n    /**\n     * Create a new console panel.\n     */\n    createConsole(options: CodeConsole.IOptions): CodeConsole;\n  }\n\n  /**\n   * Default implementation of `IContentFactory`.\n   */\n  export class ContentFactory extends CodeConsole.ContentFactory\n    implements IContentFactory {\n    /**\n     * Create a new console panel.\n     */\n    createConsole(options: CodeConsole.IOptions): CodeConsole {\n      return new CodeConsole(options);\n    }\n  }\n\n  /**\n   * A namespace for the console panel content factory.\n   */\n  export namespace ContentFactory {\n    /**\n     * Options for the code console content factory.\n     */\n    export interface IOptions extends CodeConsole.ContentFactory.IOptions {}\n  }\n\n  /**\n   * A default code console content factory.\n   */\n  export const defaultContentFactory: IContentFactory = new ContentFactory();\n\n  /* tslint:disable */\n  /**\n   * The console renderer token.\n   */\n  export const IContentFactory = new Token<IContentFactory>(\n    '@jupyterlab/console:IContentFactory'\n  );\n  /* tslint:enable */\n}\n\n/**\n * A namespace for private data.\n */\nnamespace Private {\n  /**\n   * The counter for new consoles.\n   */\n  export let count = 1;\n\n  /**\n   * Update the title of a console panel.\n   */\n  export function updateTitle(\n    panel: ConsolePanel,\n    connected: Date | null,\n    executed: Date | null\n  ) {\n    let session = panel.console.session;\n    let caption =\n      `Name: ${session.name}\\n` +\n      `Directory: ${PathExt.dirname(session.path)}\\n` +\n      `Kernel: ${session.kernelDisplayName}`;\n    if (connected) {\n      caption += `\\nConnected: ${Time.format(connected.toISOString())}`;\n    }\n    if (executed) {\n      caption += `\\nLast Execution: ${Time.format(executed.toISOString())}`;\n    }\n    panel.title.label = session.name || 'Console';\n    panel.title.caption = caption;\n  }\n}\n"]}