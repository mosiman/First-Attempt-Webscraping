{"version":3,"file":"widget.js","sourceRoot":"","sources":["../../../../console/src/widget.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { IClientSession } from '@jupyterlab/apputils';\n\nimport {\n  Cell,\n  CellModel,\n  CodeCell,\n  CodeCellModel,\n  ICodeCellModel,\n  isCodeCellModel,\n  IRawCellModel,\n  RawCell,\n  RawCellModel\n} from '@jupyterlab/cells';\n\nimport { IEditorMimeTypeService, CodeEditor } from '@jupyterlab/codeeditor';\n\nimport { nbformat } from '@jupyterlab/coreutils';\n\nimport { IObservableList, ObservableList } from '@jupyterlab/observables';\n\nimport { RenderMimeRegistry } from '@jupyterlab/rendermime';\n\nimport { KernelMessage } from '@jupyterlab/services';\n\nimport { each } from '@phosphor/algorithm';\n\nimport { Message } from '@phosphor/messaging';\n\nimport { ISignal, Signal } from '@phosphor/signaling';\n\nimport { Panel, PanelLayout, Widget } from '@phosphor/widgets';\n\nimport { ForeignHandler } from './foreign';\n\nimport { ConsoleHistory, IConsoleHistory } from './history';\n\n/**\n * The data attribute added to a widget that has an active kernel.\n */\nconst KERNEL_USER = 'jpKernelUser';\n\n/**\n * The data attribute added to a widget can run code.\n */\nconst CODE_RUNNER = 'jpCodeRunner';\n\n/**\n * The class name added to console widgets.\n */\nconst CONSOLE_CLASS = 'jp-CodeConsole';\n\n/**\n * The class name added to the console banner.\n */\nconst BANNER_CLASS = 'jp-CodeConsole-banner';\n\n/**\n * The class name of a cell whose input originated from a foreign session.\n */\nconst FOREIGN_CELL_CLASS = 'jp-CodeConsole-foreignCell';\n\n/**\n * The class name of the active prompt cell.\n */\nconst PROMPT_CLASS = 'jp-CodeConsole-promptCell';\n\n/**\n * The class name of the panel that holds cell content.\n */\nconst CONTENT_CLASS = 'jp-CodeConsole-content';\n\n/**\n * The class name of the panel that holds prompts.\n */\nconst INPUT_CLASS = 'jp-CodeConsole-input';\n\n/**\n * The timeout in ms for execution requests to the kernel.\n */\nconst EXECUTION_TIMEOUT = 250;\n\n/**\n * A widget containing a Jupyter console.\n *\n * #### Notes\n * The CodeConsole class is intended to be used within a ConsolePanel\n * instance. Under most circumstances, it is not instantiated by user code.\n */\nexport class CodeConsole extends Widget {\n  /**\n   * Construct a console widget.\n   */\n  constructor(options: CodeConsole.IOptions) {\n    super();\n    this.addClass(CONSOLE_CLASS);\n    this.node.dataset[KERNEL_USER] = 'true';\n    this.node.dataset[CODE_RUNNER] = 'true';\n    this.node.tabIndex = -1; // Allow the widget to take focus.\n\n    // Create the panels that hold the content and input.\n    const layout = (this.layout = new PanelLayout());\n    this._cells = new ObservableList<Cell>();\n    this._content = new Panel();\n    this._input = new Panel();\n\n    this.contentFactory =\n      options.contentFactory || CodeConsole.defaultContentFactory;\n    this.modelFactory = options.modelFactory || CodeConsole.defaultModelFactory;\n    this.rendermime = options.rendermime;\n    this.session = options.session;\n    this._mimeTypeService = options.mimeTypeService;\n\n    // Add top-level CSS classes.\n    this._content.addClass(CONTENT_CLASS);\n    this._input.addClass(INPUT_CLASS);\n\n    // Insert the content and input panes into the widget.\n    layout.addWidget(this._content);\n    layout.addWidget(this._input);\n\n    // Set up the foreign iopub handler.\n    this._foreignHandler = new ForeignHandler({\n      session: this.session,\n      parent: this,\n      cellFactory: () => this._createCodeCell()\n    });\n\n    this._history = new ConsoleHistory({\n      session: this.session\n    });\n\n    this._onKernelChanged();\n    this.session.kernelChanged.connect(this._onKernelChanged, this);\n    this.session.statusChanged.connect(this._onKernelStatusChanged, this);\n  }\n\n  /**\n   * A signal emitted when the console finished executing its prompt cell.\n   */\n  get executed(): ISignal<this, Date> {\n    return this._executed;\n  }\n\n  /**\n   * A signal emitted when a new prompt cell is created.\n   */\n  get promptCellCreated(): ISignal<this, CodeCell> {\n    return this._promptCellCreated;\n  }\n\n  /**\n   * The content factory used by the console.\n   */\n  readonly contentFactory: CodeConsole.IContentFactory;\n\n  /**\n   * The model factory for the console widget.\n   */\n  readonly modelFactory: CodeConsole.IModelFactory;\n\n  /**\n   * The rendermime instance used by the console.\n   */\n  readonly rendermime: RenderMimeRegistry;\n\n  /**\n   * The client session used by the console.\n   */\n  readonly session: IClientSession;\n\n  /**\n   * The list of content cells in the console.\n   *\n   * #### Notes\n   * This list does not include the current banner or the prompt for a console.\n   * It may include previous banners as raw cells.\n   */\n  get cells(): IObservableList<Cell> {\n    return this._cells;\n  }\n\n  /*\n   * The console input prompt cell.\n   */\n  get promptCell(): CodeCell | null {\n    let inputLayout = this._input.layout as PanelLayout;\n    return (inputLayout.widgets[0] as CodeCell) || null;\n  }\n\n  /**\n   * Add a new cell to the content panel.\n   *\n   * @param cell - The cell widget being added to the content panel.\n   *\n   * #### Notes\n   * This method is meant for use by outside classes that want to inject content\n   * into a console. It is distinct from the `inject` method in that it requires\n   * rendered code cell widgets and does not execute them.\n   */\n  addCell(cell: Cell) {\n    this._content.addWidget(cell);\n    this._cells.push(cell);\n    cell.disposed.connect(this._onCellDisposed, this);\n    this.update();\n  }\n\n  addBanner() {\n    if (this._banner) {\n      // An old banner just becomes a normal cell now.\n      let cell = this._banner;\n      this._cells.push(this._banner);\n      cell.disposed.connect(this._onCellDisposed, this);\n    }\n    // Create the banner.\n    let model = this.modelFactory.createRawCell({});\n    model.value.text = '...';\n    let banner = (this._banner = new RawCell({\n      model,\n      contentFactory: this.contentFactory\n    }));\n    banner.addClass(BANNER_CLASS);\n    banner.readOnly = true;\n    this._content.addWidget(banner);\n  }\n\n  /**\n   * Clear the code cells.\n   */\n  clear(): void {\n    // Dispose all the content cells\n    let cells = this._cells;\n    while (cells.length > 0) {\n      cells.get(0).dispose();\n    }\n  }\n\n  /**\n   * Dispose of the resources held by the widget.\n   */\n  dispose() {\n    // Do nothing if already disposed.\n    if (this.isDisposed) {\n      return;\n    }\n    this._cells.clear();\n    this._history.dispose();\n    this._foreignHandler.dispose();\n\n    super.dispose();\n  }\n\n  /**\n   * Set whether the foreignHandler is able to inject foreign cells into a\n   * console.\n   */\n  get showAllActivity(): boolean {\n    return this._foreignHandler.enabled;\n  }\n  set showAllActivity(value: boolean) {\n    this._foreignHandler.enabled = value;\n  }\n\n  /**\n   * Execute the current prompt.\n   *\n   * @param force - Whether to force execution without checking code\n   * completeness.\n   *\n   * @param timeout - The length of time, in milliseconds, that the execution\n   * should wait for the API to determine whether code being submitted is\n   * incomplete before attempting submission anyway. The default value is `250`.\n   */\n  execute(force = false, timeout = EXECUTION_TIMEOUT): Promise<void> {\n    if (this.session.status === 'dead') {\n      return Promise.resolve(void 0);\n    }\n\n    const promptCell = this.promptCell;\n    if (!promptCell) {\n      return Promise.reject('Cannot execute without a prompt cell');\n    }\n    promptCell.model.trusted = true;\n\n    if (force) {\n      // Create a new prompt cell before kernel execution to allow typeahead.\n      this.newPromptCell();\n      return this._execute(promptCell);\n    }\n\n    // Check whether we should execute.\n    return this._shouldExecute(timeout).then(should => {\n      if (this.isDisposed) {\n        return;\n      }\n      if (should) {\n        // Create a new prompt cell before kernel execution to allow typeahead.\n        this.newPromptCell();\n        this.promptCell!.editor.focus();\n        return this._execute(promptCell);\n      } else {\n        // add a newline if we shouldn't execute\n        promptCell.editor.newIndentedLine();\n      }\n    });\n  }\n\n  /**\n   * Inject arbitrary code for the console to execute immediately.\n   *\n   * @param code - The code contents of the cell being injected.\n   *\n   * @returns A promise that indicates when the injected cell's execution ends.\n   */\n  inject(code: string): Promise<void> {\n    let cell = this._createCodeCell();\n    cell.model.value.text = code;\n    this.addCell(cell);\n    return this._execute(cell);\n  }\n\n  /**\n   * Insert a line break in the prompt cell.\n   */\n  insertLinebreak(): void {\n    let promptCell = this.promptCell;\n    if (!promptCell) {\n      return;\n    }\n    promptCell.editor.newIndentedLine();\n  }\n\n  /**\n   * Serialize the output.\n   *\n   * #### Notes\n   * This only serializes the code cells and the prompt cell if it exists, and\n   * skips any old banner cells.\n   */\n  serialize(): nbformat.ICodeCell[] {\n    const cells: nbformat.ICodeCell[] = [];\n    each(this._cells, cell => {\n      let model = cell.model;\n      if (isCodeCellModel(model)) {\n        cells.push(model.toJSON());\n      }\n    });\n\n    if (this.promptCell) {\n      cells.push(this.promptCell.model.toJSON());\n    }\n    return cells;\n  }\n\n  /**\n   * Handle the DOM events for the widget.\n   *\n   * @param event - The DOM event sent to the widget.\n   *\n   * #### Notes\n   * This method implements the DOM `EventListener` interface and is\n   * called in response to events on the notebook panel's node. It should\n   * not be called directly by user code.\n   */\n  handleEvent(event: Event): void {\n    switch (event.type) {\n      case 'keydown':\n        this._evtKeyDown(event as KeyboardEvent);\n        break;\n      case 'click':\n        this._evtClick(event as MouseEvent);\n        break;\n      default:\n        break;\n    }\n  }\n\n  /**\n   * Handle `after_attach` messages for the widget.\n   */\n  protected onAfterAttach(msg: Message): void {\n    let node = this.node;\n    node.addEventListener('keydown', this, true);\n    node.addEventListener('click', this);\n    // Create a prompt if necessary.\n    if (!this.promptCell) {\n      this.newPromptCell();\n    } else {\n      this.promptCell.editor.focus();\n      this.update();\n    }\n  }\n\n  /**\n   * Handle `before-detach` messages for the widget.\n   */\n  protected onBeforeDetach(msg: Message): void {\n    let node = this.node;\n    node.removeEventListener('keydown', this, true);\n    node.removeEventListener('click', this);\n  }\n\n  /**\n   * Handle `'activate-request'` messages.\n   */\n  protected onActivateRequest(msg: Message): void {\n    let editor = this.promptCell && this.promptCell.editor;\n    if (editor) {\n      editor.focus();\n    }\n    this.update();\n  }\n\n  /**\n   * Make a new prompt cell.\n   */\n  protected newPromptCell(): void {\n    let promptCell = this.promptCell;\n    let input = this._input;\n\n    // Make the last prompt read-only, clear its signals, and move to content.\n    if (promptCell) {\n      promptCell.readOnly = true;\n      promptCell.removeClass(PROMPT_CLASS);\n      Signal.clearData(promptCell.editor);\n      let child = input.widgets[0];\n      child.parent = null;\n      this.addCell(promptCell);\n    }\n\n    // Create the new prompt cell.\n    let factory = this.contentFactory;\n    let options = this._createCodeCellOptions();\n    promptCell = factory.createCodeCell(options);\n    promptCell.model.mimeType = this._mimetype;\n    promptCell.addClass(PROMPT_CLASS);\n    this._input.addWidget(promptCell);\n\n    // Suppress the default \"Enter\" key handling.\n    let editor = promptCell.editor;\n    editor.addKeydownHandler(this._onEditorKeydown);\n\n    this._history.editor = editor;\n    this._promptCellCreated.emit(promptCell);\n  }\n\n  /**\n   * Handle `update-request` messages.\n   */\n  protected onUpdateRequest(msg: Message): void {\n    Private.scrollToBottom(this._content.node);\n  }\n\n  /**\n   * Handle the `'keydown'` event for the widget.\n   */\n  private _evtKeyDown(event: KeyboardEvent): void {\n    let editor = this.promptCell && this.promptCell.editor;\n    if (!editor) {\n      return;\n    }\n    if (event.keyCode === 13 && !editor.hasFocus()) {\n      event.preventDefault();\n      editor.focus();\n    }\n  }\n\n  /**\n   * Handle the `'click'` event for the widget.\n   */\n  private _evtClick(event: MouseEvent): void {\n    if (\n      this.promptCell &&\n      this.promptCell.node.contains(event.target as HTMLElement)\n    ) {\n      this.promptCell.editor.focus();\n    }\n  }\n\n  /**\n   * Execute the code in the current prompt cell.\n   */\n  private _execute(cell: CodeCell): Promise<void> {\n    let source = cell.model.value.text;\n    this._history.push(source);\n    // If the source of the console is just \"clear\", clear the console as we\n    // do in IPython or QtConsole.\n    if (source === 'clear' || source === '%clear') {\n      this.clear();\n      return Promise.resolve(void 0);\n    }\n    cell.model.contentChanged.connect(this.update, this);\n    let onSuccess = (value: KernelMessage.IExecuteReplyMsg) => {\n      if (this.isDisposed) {\n        return;\n      }\n      if (value && value.content.status === 'ok') {\n        let content = value.content as KernelMessage.IExecuteOkReply;\n        // Use deprecated payloads for backwards compatibility.\n        if (content.payload && content.payload.length) {\n          let setNextInput = content.payload.filter(i => {\n            return (i as any).source === 'set_next_input';\n          })[0];\n          if (setNextInput) {\n            let text = (setNextInput as any).text;\n            // Ignore the `replace` value and always set the next cell.\n            cell.model.value.text = text;\n          }\n        }\n      }\n      cell.model.contentChanged.disconnect(this.update, this);\n      this.update();\n      this._executed.emit(new Date());\n    };\n    let onFailure = () => {\n      if (this.isDisposed) {\n        return;\n      }\n      cell.model.contentChanged.disconnect(this.update, this);\n      this.update();\n    };\n    return CodeCell.execute(cell, this.session).then(onSuccess, onFailure);\n  }\n\n  /**\n   * Update the console based on the kernel info.\n   */\n  private _handleInfo(info: KernelMessage.IInfoReply): void {\n    this._banner.model.value.text = info.banner;\n    let lang = info.language_info as nbformat.ILanguageInfoMetadata;\n    this._mimetype = this._mimeTypeService.getMimeTypeByLanguage(lang);\n    if (this.promptCell) {\n      this.promptCell.model.mimeType = this._mimetype;\n    }\n  }\n\n  /**\n   * Create a new foreign cell.\n   */\n  private _createCodeCell(): CodeCell {\n    let factory = this.contentFactory;\n    let options = this._createCodeCellOptions();\n    let cell = factory.createCodeCell(options);\n    cell.readOnly = true;\n    cell.model.mimeType = this._mimetype;\n    cell.addClass(FOREIGN_CELL_CLASS);\n    return cell;\n  }\n\n  /**\n   * Create the options used to initialize a code cell widget.\n   */\n  private _createCodeCellOptions(): CodeCell.IOptions {\n    let contentFactory = this.contentFactory;\n    let modelFactory = this.modelFactory;\n    let model = modelFactory.createCodeCell({});\n    let rendermime = this.rendermime;\n    return { model, rendermime, contentFactory };\n  }\n\n  /**\n   * Handle cell disposed signals.\n   */\n  private _onCellDisposed(sender: Cell, args: void): void {\n    if (!this.isDisposed) {\n      this._cells.removeValue(sender);\n    }\n  }\n\n  /**\n   * Test whether we should execute the prompt cell.\n   */\n  private _shouldExecute(timeout: number): Promise<boolean> {\n    const promptCell = this.promptCell;\n    if (!promptCell) {\n      return Promise.resolve(false);\n    }\n    let model = promptCell.model;\n    let code = model.value.text;\n    return new Promise<boolean>((resolve, reject) => {\n      let timer = setTimeout(() => {\n        resolve(true);\n      }, timeout);\n      let kernel = this.session.kernel;\n      if (!kernel) {\n        resolve(false);\n        return;\n      }\n      kernel\n        .requestIsComplete({ code })\n        .then(isComplete => {\n          clearTimeout(timer);\n          if (this.isDisposed) {\n            resolve(false);\n          }\n          if (isComplete.content.status !== 'incomplete') {\n            resolve(true);\n            return;\n          }\n          resolve(false);\n        })\n        .catch(() => {\n          resolve(true);\n        });\n    });\n  }\n\n  /**\n   * Handle a keydown event on an editor.\n   */\n  private _onEditorKeydown(editor: CodeEditor.IEditor, event: KeyboardEvent) {\n    // Suppress \"Enter\" events.\n    return event.keyCode === 13;\n  }\n\n  /**\n   * Handle a change to the kernel.\n   */\n  private _onKernelChanged(): void {\n    this.clear();\n    if (this._banner) {\n      this._banner.dispose();\n      this._banner = null;\n    }\n    this.addBanner();\n  }\n\n  /**\n   * Handle a change to the kernel status.\n   */\n  private _onKernelStatusChanged(): void {\n    if (this.session.status === 'connected') {\n      // we just had a kernel restart or reconnect - reset banner\n      let kernel = this.session.kernel;\n      if (!kernel) {\n        return;\n      }\n      kernel\n        .requestKernelInfo()\n        .then(() => {\n          if (this.isDisposed || !kernel || !kernel.info) {\n            return;\n          }\n          this._handleInfo(this.session.kernel.info);\n        })\n        .catch(err => {\n          console.error('could not get kernel info');\n        });\n    } else if (this.session.status === 'restarting') {\n      this.addBanner();\n    }\n  }\n\n  private _banner: RawCell = null;\n  private _cells: IObservableList<Cell>;\n  private _content: Panel;\n  private _executed = new Signal<this, Date>(this);\n  private _foreignHandler: ForeignHandler;\n  private _history: IConsoleHistory;\n  private _input: Panel;\n  private _mimetype = 'text/x-ipython';\n  private _mimeTypeService: IEditorMimeTypeService;\n  private _promptCellCreated = new Signal<this, CodeCell>(this);\n}\n\n/**\n * A namespace for CodeConsole statics.\n */\nexport namespace CodeConsole {\n  /**\n   * The initialization options for a console widget.\n   */\n  export interface IOptions {\n    /**\n     * The content factory for the console widget.\n     */\n    contentFactory: IContentFactory;\n\n    /**\n     * The model factory for the console widget.\n     */\n    modelFactory?: IModelFactory;\n\n    /**\n     * The mime renderer for the console widget.\n     */\n    rendermime: RenderMimeRegistry;\n\n    /**\n     * The client session for the console widget.\n     */\n    session: IClientSession;\n\n    /**\n     * The service used to look up mime types.\n     */\n    mimeTypeService: IEditorMimeTypeService;\n  }\n\n  /**\n   * A content factory for console children.\n   */\n  export interface IContentFactory extends Cell.IContentFactory {\n    /**\n     * Create a new code cell widget.\n     */\n    createCodeCell(options: CodeCell.IOptions): CodeCell;\n\n    /**\n     * Create a new raw cell widget.\n     */\n    createRawCell(options: RawCell.IOptions): RawCell;\n  }\n\n  /**\n   * Default implementation of `IContentFactory`.\n   */\n  export class ContentFactory extends Cell.ContentFactory\n    implements IContentFactory {\n    /**\n     * Create a new code cell widget.\n     *\n     * #### Notes\n     * If no cell content factory is passed in with the options, the one on the\n     * notebook content factory is used.\n     */\n    createCodeCell(options: CodeCell.IOptions): CodeCell {\n      if (!options.contentFactory) {\n        options.contentFactory = this;\n      }\n      return new CodeCell(options);\n    }\n\n    /**\n     * Create a new raw cell widget.\n     *\n     * #### Notes\n     * If no cell content factory is passed in with the options, the one on the\n     * notebook content factory is used.\n     */\n    createRawCell(options: RawCell.IOptions): RawCell {\n      if (!options.contentFactory) {\n        options.contentFactory = this;\n      }\n      return new RawCell(options);\n    }\n  }\n\n  /**\n   * A namespace for the code console content factory.\n   */\n  export namespace ContentFactory {\n    /**\n     * An initialize options for `ContentFactory`.\n     */\n    export interface IOptions extends Cell.IContentFactory {}\n  }\n\n  /**\n   * A default content factory for the code console.\n   */\n  export const defaultContentFactory: IContentFactory = new ContentFactory();\n\n  /**\n   * A model factory for a console widget.\n   */\n  export interface IModelFactory {\n    /**\n     * The factory for code cell content.\n     */\n    readonly codeCellContentFactory: CodeCellModel.IContentFactory;\n\n    /**\n     * Create a new code cell.\n     *\n     * @param options - The options used to create the cell.\n     *\n     * @returns A new code cell. If a source cell is provided, the\n     *   new cell will be initialized with the data from the source.\n     */\n    createCodeCell(options: CodeCellModel.IOptions): ICodeCellModel;\n\n    /**\n     * Create a new raw cell.\n     *\n     * @param options - The options used to create the cell.\n     *\n     * @returns A new raw cell. If a source cell is provided, the\n     *   new cell will be initialized with the data from the source.\n     */\n    createRawCell(options: CellModel.IOptions): IRawCellModel;\n  }\n\n  /**\n   * The default implementation of an `IModelFactory`.\n   */\n  export class ModelFactory {\n    /**\n     * Create a new cell model factory.\n     */\n    constructor(options: IModelFactoryOptions = {}) {\n      this.codeCellContentFactory =\n        options.codeCellContentFactory || CodeCellModel.defaultContentFactory;\n    }\n\n    /**\n     * The factory for output area models.\n     */\n    readonly codeCellContentFactory: CodeCellModel.IContentFactory;\n\n    /**\n     * Create a new code cell.\n     *\n     * @param source - The data to use for the original source data.\n     *\n     * @returns A new code cell. If a source cell is provided, the\n     *   new cell will be initialized with the data from the source.\n     *   If the contentFactory is not provided, the instance\n     *   `codeCellContentFactory` will be used.\n     */\n    createCodeCell(options: CodeCellModel.IOptions): ICodeCellModel {\n      if (!options.contentFactory) {\n        options.contentFactory = this.codeCellContentFactory;\n      }\n      return new CodeCellModel(options);\n    }\n\n    /**\n     * Create a new raw cell.\n     *\n     * @param source - The data to use for the original source data.\n     *\n     * @returns A new raw cell. If a source cell is provided, the\n     *   new cell will be initialized with the data from the source.\n     */\n    createRawCell(options: CellModel.IOptions): IRawCellModel {\n      return new RawCellModel(options);\n    }\n  }\n\n  /**\n   * The options used to initialize a `ModelFactory`.\n   */\n  export interface IModelFactoryOptions {\n    /**\n     * The factory for output area models.\n     */\n    codeCellContentFactory?: CodeCellModel.IContentFactory;\n  }\n\n  /**\n   * The default `ModelFactory` instance.\n   */\n  export const defaultModelFactory = new ModelFactory({});\n}\n\n/**\n * A namespace for console widget private data.\n */\nnamespace Private {\n  /**\n   * Jump to the bottom of a node.\n   *\n   * @param node - The scrollable element.\n   */\n  export function scrollToBottom(node: HTMLElement): void {\n    node.scrollTop = node.scrollHeight - node.clientHeight;\n  }\n}\n"]}