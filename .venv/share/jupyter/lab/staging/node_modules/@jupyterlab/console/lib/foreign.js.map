{"version":3,"file":"foreign.js","sourceRoot":"","sources":["../../../../console/src/foreign.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { IClientSession } from '@jupyterlab/apputils';\n\nimport { Cell, CodeCell } from '@jupyterlab/cells';\n\nimport { nbformat } from '@jupyterlab/coreutils';\n\nimport { KernelMessage } from '@jupyterlab/services';\n\nimport { IDisposable } from '@phosphor/disposable';\n\nimport { Signal } from '@phosphor/signaling';\n\n/**\n * A handler for capturing API messages from other sessions that should be\n * rendered in a given parent.\n */\nexport class ForeignHandler implements IDisposable {\n  /**\n   * Construct a new foreign message handler.\n   */\n  constructor(options: ForeignHandler.IOptions) {\n    this.session = options.session;\n    this.session.iopubMessage.connect(this.onIOPubMessage, this);\n    this._factory = options.cellFactory;\n    this._parent = options.parent;\n  }\n\n  /**\n   * Set whether the handler is able to inject foreign cells into a console.\n   */\n  get enabled(): boolean {\n    return this._enabled;\n  }\n  set enabled(value: boolean) {\n    this._enabled = value;\n  }\n\n  /**\n   * The client session used by the foreign handler.\n   */\n  readonly session: IClientSession;\n\n  /**\n   * The foreign handler's parent receiver.\n   */\n  get parent(): ForeignHandler.IReceiver {\n    return this._parent;\n  }\n\n  /**\n   * Test whether the handler is disposed.\n   */\n  get isDisposed(): boolean {\n    return this._isDisposed;\n  }\n\n  /**\n   * Dispose the resources held by the handler.\n   */\n  dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n    this._isDisposed = true;\n    this._cells.clear();\n    Signal.clearData(this);\n  }\n\n  /**\n   * Handler IOPub messages.\n   *\n   * @returns `true` if the message resulted in a new cell injection or a\n   * previously injected cell being updated and `false` for all other messages.\n   */\n  protected onIOPubMessage(\n    sender: IClientSession,\n    msg: KernelMessage.IIOPubMessage\n  ): boolean {\n    // Only process messages if foreign cell injection is enabled.\n    if (!this._enabled) {\n      return false;\n    }\n    let kernel = this.session.kernel;\n    if (!kernel) {\n      return false;\n    }\n\n    // Check whether this message came from an external session.\n    let parent = this._parent;\n    let session = (msg.parent_header as KernelMessage.IHeader).session;\n    if (session === kernel.clientId) {\n      return false;\n    }\n    let msgType = msg.header.msg_type;\n    let parentHeader = msg.parent_header as KernelMessage.IHeader;\n    let parentMsgId = parentHeader.msg_id as string;\n    let cell: CodeCell | undefined;\n    switch (msgType) {\n      case 'execute_input':\n        let inputMsg = msg as KernelMessage.IExecuteInputMsg;\n        cell = this._newCell(parentMsgId);\n        let model = cell.model;\n        model.executionCount = inputMsg.content.execution_count;\n        model.value.text = inputMsg.content.code;\n        model.trusted = true;\n        parent.update();\n        return true;\n      case 'execute_result':\n      case 'display_data':\n      case 'stream':\n      case 'error':\n        if (!this._cells.has(parentMsgId)) {\n          // This is an output from an input that was broadcast before our\n          // session started listening. We will ignore it.\n          console.warn('Ignoring output with no associated input cell.');\n          return false;\n        }\n        let output = msg.content as nbformat.IOutput;\n        cell = this._cells.get(parentMsgId);\n        if (cell) {\n          output.output_type = msgType as nbformat.OutputType;\n          cell.model.outputs.add(output);\n        }\n        parent.update();\n        return true;\n      case 'clear_output':\n        let wait = (msg as KernelMessage.IClearOutputMsg).content.wait;\n        cell = this._cells.get(parentMsgId);\n        if (cell) {\n          cell.model.outputs.clear(wait);\n        }\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Create a new code cell for an input originated from a foreign session.\n   */\n  private _newCell(parentMsgId: string): CodeCell {\n    let cell = this._factory();\n    this._cells.set(parentMsgId, cell);\n    this._parent.addCell(cell);\n    return cell;\n  }\n\n  private _cells = new Map<string, CodeCell>();\n  private _enabled = false;\n  private _parent: ForeignHandler.IReceiver;\n  private _factory: () => CodeCell;\n  private _isDisposed = false;\n}\n\n/**\n * A namespace for `ForeignHandler` statics.\n */\nexport namespace ForeignHandler {\n  /**\n   * The instantiation options for a foreign handler.\n   */\n  export interface IOptions {\n    /**\n     * The client session used by the foreign handler.\n     */\n    session: IClientSession;\n\n    /**\n     * The parent into which the handler will inject code cells.\n     */\n    parent: IReceiver;\n\n    /**\n     * The cell factory for foreign handlers.\n     */\n    cellFactory: () => CodeCell;\n  }\n\n  /**\n   * A receiver of newly created foreign cells.\n   */\n  export interface IReceiver {\n    /**\n     * Add a newly created foreign cell.\n     */\n    addCell(cell: Cell): void;\n\n    /**\n     * Trigger a rendering update on the receiver.\n     */\n    update(): void;\n  }\n}\n"]}