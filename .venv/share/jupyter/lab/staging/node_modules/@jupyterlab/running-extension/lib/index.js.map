{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../running-extension/src/index.ts"],"names":[],"mappings":";AAAA,0CAA0C;AAC1C,2DAA2D;;AAE3D,yDAIiC;AAEjC,iDAAsD;AAEtD;;GAEG;AACH,MAAM,MAAM,GAA2B;IACrC,QAAQ;IACR,EAAE,EAAE,sCAAsC;IAC1C,QAAQ,EAAE,CAAC,6BAAe,CAAC;IAC3B,SAAS,EAAE,IAAI;CAChB,CAAC;AAEF;;GAEG;AACH,kBAAe,MAAM,CAAC;AAEtB;;GAEG;AACH,kBAAkB,GAAe,EAAE,QAAyB;IAC1D,IAAI,OAAO,GAAG,IAAI,yBAAe,CAAC,EAAE,OAAO,EAAE,GAAG,CAAC,cAAc,EAAE,CAAC,CAAC;IACnE,OAAO,CAAC,EAAE,GAAG,qBAAqB,CAAC;IACnC,OAAO,CAAC,KAAK,CAAC,KAAK,GAAG,SAAS,CAAC;IAEhC,0EAA0E;IAC1E,4EAA4E;IAC5E,WAAW;IACX,QAAQ,CAAC,GAAG,CAAC,OAAO,EAAE,kBAAkB,CAAC,CAAC;IAE1C,OAAO,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;QACrD,IAAI,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC;QACtB,IAAI,KAAK,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,SAAS,EAAE;YAC1C,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,cAAc,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;SAChD;aAAM;YACL,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,iBAAiB,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;SACnD;IACH,CAAC,CAAC,CAAC;IAEH,OAAO,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;QACtD,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,eAAe,EAAE,EAAE,IAAI,EAAE,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;IAC9D,CAAC,CAAC,CAAC;IAEH,4EAA4E;IAC5E,kCAAkC;IAClC,GAAG,CAAC,KAAK,CAAC,aAAa,CAAC,OAAO,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC;AAClD,CAAC","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport {\n  ILayoutRestorer,\n  JupyterLab,\n  JupyterLabPlugin\n} from '@jupyterlab/application';\n\nimport { RunningSessions } from '@jupyterlab/running';\n\n/**\n * The default running sessions extension.\n */\nconst plugin: JupyterLabPlugin<void> = {\n  activate,\n  id: '@jupyterlab/running-extension:plugin',\n  requires: [ILayoutRestorer],\n  autoStart: true\n};\n\n/**\n * Export the plugin as default.\n */\nexport default plugin;\n\n/**\n * Activate the running plugin.\n */\nfunction activate(app: JupyterLab, restorer: ILayoutRestorer): void {\n  let running = new RunningSessions({ manager: app.serviceManager });\n  running.id = 'jp-running-sessions';\n  running.title.label = 'Running';\n\n  // Let the application restorer track the running panel for restoration of\n  // application state (e.g. setting the running panel as the current side bar\n  // widget).\n  restorer.add(running, 'running-sessions');\n\n  running.sessionOpenRequested.connect((sender, model) => {\n    let path = model.path;\n    if (model.type.toLowerCase() === 'console') {\n      app.commands.execute('console:open', { path });\n    } else {\n      app.commands.execute('docmanager:open', { path });\n    }\n  });\n\n  running.terminalOpenRequested.connect((sender, model) => {\n    app.commands.execute('terminal:open', { name: model.name });\n  });\n\n  // Rank has been chosen somewhat arbitrarily to give priority to the running\n  // sessions widget in the sidebar.\n  app.shell.addToLeftArea(running, { rank: 200 });\n}\n"]}