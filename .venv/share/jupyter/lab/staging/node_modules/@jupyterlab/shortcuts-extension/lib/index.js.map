{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../shortcuts-extension/src/index.ts"],"names":[],"mappings":";AAAA,0CAA0C;AAC1C,2DAA2D;;AAI3D,qDAAyD;AAMzD,qDAAkE;AAElE;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4BG;AACH,MAAM,MAAM,GAA2B;IACrC,EAAE,EAAE,wCAAwC;IAC5C,QAAQ,EAAE,CAAC,4BAAgB,CAAC;IAC5B,QAAQ,EAAE,CAAC,GAAe,EAAE,eAAiC,EAAQ,EAAE;QACrE,MAAM,EAAE,QAAQ,EAAE,GAAG,GAAG,CAAC;QAEzB,eAAe;aACZ,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC;aACf,IAAI,CAAC,QAAQ,CAAC,EAAE;YACf,OAAO,CAAC,aAAa,CAAC,QAAQ,EAAE,QAAQ,CAAC,SAAS,CAAC,CAAC;YACpD,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE;gBAC5B,OAAO,CAAC,aAAa,CAAC,QAAQ,EAAE,QAAQ,CAAC,SAAS,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC,CAAC;aACD,KAAK,CAAC,CAAC,MAAa,EAAE,EAAE;YACvB,OAAO,CAAC,KAAK,CAAC,mCAAmC,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;QACrE,CAAC,CAAC,CAAC;IACP,CAAC;IACD,SAAS,EAAE,IAAI;CAChB,CAAC;AAEF;;GAEG;AACH,kBAAe,MAAM,CAAC;AAEtB;;GAEG;AACH,IAAU,OAAO,CA8ChB;AA9CD,WAAU,OAAO;IACf;;OAEG;IACH,IAAI,WAAwB,CAAC;IAE7B;;OAEG;IACH,uBACE,QAAyB,EACzB,SAAqB;QAErB,IAAI,WAAW,EAAE;YACf,WAAW,CAAC,OAAO,EAAE,CAAC;SACvB;QACD,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAiB,EAAE;YACtE,MAAM,OAAO,GAAG,gBAAgB,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;YAEjD,IAAI,OAAO,EAAE;gBACX,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC;aAC1C;YAED,OAAO,GAAG,CAAC;QACb,CAAC,EAAE,IAAI,0BAAa,EAAE,CAAC,CAAC;IAC1B,CAAC;IAhBe,qBAAa,gBAgB5B,CAAA;IAED;;OAEG;IACH,0BACE,KAA8D;QAE9D,IAAI,CAAC,KAAK,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YACvC,OAAO,SAAS,CAAC;SAClB;QAED,MAAM,EAAE,OAAO,EAAE,GAAG,KAAK,CAAC;QAC1B,MAAM,KAAK,GACT,SAAS,IAAI,KAAK;YAClB,MAAM,IAAI,KAAK;YACf,UAAU,IAAI,KAAK;YACnB,OAAO,CAAE,KAAqD,CAAC,IAAI,CAAC,CAAC;QAEvE,OAAO,KAAK,CAAC,CAAC,CAAE,KAA4C,CAAC,CAAC,CAAC,SAAS,CAAC;IAC3E,CAAC;AACH,CAAC,EA9CS,OAAO,KAAP,OAAO,QA8ChB","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { JupyterLab, JupyterLabPlugin } from '@jupyterlab/application';\n\nimport { ISettingRegistry } from '@jupyterlab/coreutils';\n\nimport { CommandRegistry } from '@phosphor/commands';\n\nimport { JSONObject, JSONValue } from '@phosphor/coreutils';\n\nimport { DisposableSet, IDisposable } from '@phosphor/disposable';\n\n/**\n * The default shortcuts extension.\n *\n * #### Notes\n * Shortcut values are stored in the setting system. The default values for each\n * shortcut are preset in the settings schema file of this extension.\n * Additionally, each shortcut can be individually set by the end user by\n * modifying its setting (either in the text editor or by modifying its\n * underlying JSON schema file).\n *\n * When setting shortcut selectors, there are two concepts to consider:\n * specificity and matchability. These two interact in sometimes\n * counterintuitive ways. Keyboard events are triggered from an element and\n * they propagate up the DOM until they reach the `documentElement` (`<body>`).\n *\n * When a registered shortcut sequence is fired, the shortcut manager checks\n * the node that fired the event and each of its ancestors until a node matches\n * one or more registered selectors. The *first* matching selector in the\n * chain of ancestors will invoke the shortcut handler and the traversal will\n * end at that point. If a node matches more than one selector, the handler for\n * whichever selector is more *specific* fires.\n * @see https://www.w3.org/TR/css3-selectors/#specificity\n *\n * The practical consequence of this is that a very broadly matching selector,\n * e.g. `'*'` or `'div'` may match and therefore invoke a handler *before* a\n * more specific selector. The most common pitfall is to use the universal\n * (`'*'`) selector. For almost any use case where a global keyboard shortcut is\n * required, using the `'body'` selector is more appropriate.\n */\nconst plugin: JupyterLabPlugin<void> = {\n  id: '@jupyterlab/shortcuts-extension:plugin',\n  requires: [ISettingRegistry],\n  activate: (app: JupyterLab, settingReqistry: ISettingRegistry): void => {\n    const { commands } = app;\n\n    settingReqistry\n      .load(plugin.id)\n      .then(settings => {\n        Private.loadShortcuts(commands, settings.composite);\n        settings.changed.connect(() => {\n          Private.loadShortcuts(commands, settings.composite);\n        });\n      })\n      .catch((reason: Error) => {\n        console.error('Loading shortcut settings failed.', reason.message);\n      });\n  },\n  autoStart: true\n};\n\n/**\n * Export the plugin as default.\n */\nexport default plugin;\n\n/**\n * A namespace for private module data.\n */\nnamespace Private {\n  /**\n   * The internal collection of currently loaded shortcuts.\n   */\n  let disposables: IDisposable;\n\n  /**\n   * Load the keyboard shortcuts from settings.\n   */\n  export function loadShortcuts(\n    commands: CommandRegistry,\n    composite: JSONObject\n  ): void {\n    if (disposables) {\n      disposables.dispose();\n    }\n    disposables = Object.keys(composite).reduce((acc, val): DisposableSet => {\n      const options = normalizeOptions(composite[val]);\n\n      if (options) {\n        acc.add(commands.addKeyBinding(options));\n      }\n\n      return acc;\n    }, new DisposableSet());\n  }\n\n  /**\n   * Normalize potential keyboard shortcut options.\n   */\n  function normalizeOptions(\n    value: JSONValue | Partial<CommandRegistry.IKeyBindingOptions>\n  ): CommandRegistry.IKeyBindingOptions | undefined {\n    if (!value || typeof value !== 'object') {\n      return undefined;\n    }\n\n    const { isArray } = Array;\n    const valid =\n      'command' in value &&\n      'keys' in value &&\n      'selector' in value &&\n      isArray((value as Partial<CommandRegistry.IKeyBindingOptions>).keys);\n\n    return valid ? (value as CommandRegistry.IKeyBindingOptions) : undefined;\n  }\n}\n"]}