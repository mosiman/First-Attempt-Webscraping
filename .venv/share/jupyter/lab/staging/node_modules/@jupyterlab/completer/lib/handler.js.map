{"version":3,"file":"handler.js","sourceRoot":"","sources":["../../../../completer/src/handler.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { CodeEditor } from '@jupyterlab/codeeditor';\n\nimport { IDataConnector, Text } from '@jupyterlab/coreutils';\n\nimport { ReadonlyJSONObject, JSONObject, JSONArray } from '@phosphor/coreutils';\n\nimport { IDisposable } from '@phosphor/disposable';\n\nimport { Message, MessageLoop } from '@phosphor/messaging';\n\nimport { Signal } from '@phosphor/signaling';\n\nimport { Completer } from './widget';\n\n/**\n * A class added to editors that can host a completer.\n */\nconst COMPLETER_ENABLED_CLASS: string = 'jp-mod-completer-enabled';\n\n/**\n * A class added to editors that have an active completer.\n */\nconst COMPLETER_ACTIVE_CLASS: string = 'jp-mod-completer-active';\n\n/**\n * A completion handler for editors.\n */\nexport class CompletionHandler implements IDisposable {\n  /**\n   * Construct a new completion handler for a widget.\n   */\n  constructor(options: CompletionHandler.IOptions) {\n    this.completer = options.completer;\n    this.completer.selected.connect(this.onCompletionSelected, this);\n    this.completer.visibilityChanged.connect(this.onVisibilityChanged, this);\n    this._connector = options.connector;\n  }\n\n  /**\n   * The completer widget managed by the handler.\n   */\n  readonly completer: Completer;\n\n  /**\n   * The data connector used to populate completion requests.\n   *\n   * #### Notes\n   * The only method of this connector that will ever be called is `fetch`, so\n   * it is acceptable for the other methods to be simple functions that return\n   * rejected promises.\n   */\n  get connector(): IDataConnector<\n    CompletionHandler.IReply,\n    void,\n    CompletionHandler.IRequest\n  > {\n    return this._connector;\n  }\n  set connector(\n    connector: IDataConnector<\n      CompletionHandler.IReply,\n      void,\n      CompletionHandler.IRequest\n    >\n  ) {\n    this._connector = connector;\n  }\n\n  /**\n   * The editor used by the completion handler.\n   */\n  get editor(): CodeEditor.IEditor | null {\n    return this._editor;\n  }\n  set editor(newValue: CodeEditor.IEditor | null) {\n    if (newValue === this._editor) {\n      return;\n    }\n\n    let editor = this._editor;\n\n    // Clean up and disconnect from old editor.\n    if (editor && !editor.isDisposed) {\n      const model = editor.model;\n\n      editor.host.classList.remove(COMPLETER_ENABLED_CLASS);\n      model.selections.changed.disconnect(this.onSelectionsChanged, this);\n      model.value.changed.disconnect(this.onTextChanged, this);\n    }\n\n    // Reset completer state.\n    this.completer.reset();\n    this.completer.editor = newValue;\n\n    // Update the editor and signal connections.\n    editor = this._editor = newValue;\n    if (editor) {\n      const model = editor.model;\n\n      this._enabled = false;\n      model.selections.changed.connect(this.onSelectionsChanged, this);\n      model.value.changed.connect(this.onTextChanged, this);\n      // On initial load, manually check the cursor position.\n      this.onSelectionsChanged();\n    }\n  }\n\n  /**\n   * Get whether the completion handler is disposed.\n   */\n  get isDisposed(): boolean {\n    return this._isDisposed;\n  }\n\n  /**\n   * Dispose of the resources used by the handler.\n   */\n  dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n    this._isDisposed = true;\n    Signal.clearData(this);\n  }\n\n  /**\n   * Invoke the handler and launch a completer.\n   */\n  invoke(): void {\n    MessageLoop.sendMessage(this, CompletionHandler.Msg.InvokeRequest);\n  }\n\n  /**\n   * Process a message sent to the completion handler.\n   */\n  processMessage(msg: Message): void {\n    switch (msg.type) {\n      case CompletionHandler.Msg.InvokeRequest.type:\n        this.onInvokeRequest(msg);\n        break;\n      default:\n        break;\n    }\n  }\n\n  /**\n   * Get the state of the text editor at the given position.\n   */\n  protected getState(\n    editor: CodeEditor.IEditor,\n    position: CodeEditor.IPosition\n  ): Completer.ITextState {\n    return {\n      text: editor.model.value.text,\n      lineHeight: editor.lineHeight,\n      charWidth: editor.charWidth,\n      line: position.line,\n      column: position.column\n    };\n  }\n\n  /**\n   * Handle a completion selected signal from the completion widget.\n   */\n  protected onCompletionSelected(completer: Completer, value: string): void {\n    const model = completer.model;\n    const editor = this._editor;\n    if (!editor || !model) {\n      return;\n    }\n\n    const patch = model.createPatch(value);\n\n    if (!patch) {\n      return;\n    }\n\n    const { offset, text } = patch;\n    editor.model.value.text = text;\n\n    const position = editor.getPositionAt(offset);\n    if (position) {\n      editor.setCursorPosition(position);\n    }\n  }\n\n  /**\n   * Handle `invoke-request` messages.\n   */\n  protected onInvokeRequest(msg: Message): void {\n    // If there is no completer model, bail.\n    if (!this.completer.model) {\n      return;\n    }\n\n    // If a completer session is already active, bail.\n    if (this.completer.model.original) {\n      return;\n    }\n\n    let editor = this._editor;\n    if (editor) {\n      this._makeRequest(editor.getCursorPosition()).catch(reason => {\n        console.log('Invoke request bailed', reason);\n      });\n    }\n  }\n\n  /**\n   * Handle selection changed signal from an editor.\n   *\n   * #### Notes\n   * If a sub-class reimplements this method, then that class must either call\n   * its super method or it must take responsibility for adding and removing\n   * the completer completable class to the editor host node.\n   *\n   * Despite the fact that the editor widget adds a class whenever there is a\n   * primary selection, this method checks independently for two reasons:\n   *\n   * 1. The editor widget connects to the same signal to add that class, so\n   *    there is no guarantee that the class will be added before this method\n   *    is invoked so simply checking for the CSS class's existence is not an\n   *    option. Secondarily, checking the editor state should be faster than\n   *    querying the DOM in either case.\n   * 2. Because this method adds a class that indicates whether completer\n   *    functionality ought to be enabled, relying on the behavior of the\n   *    `jp-mod-has-primary-selection` to filter out any editors that have\n   *    a selection means the semantic meaning of `jp-mod-completer-enabled`\n   *    is obscured because there may be cases where the enabled class is added\n   *    even though the completer is not available.\n   */\n  protected onSelectionsChanged(): void {\n    const model = this.completer.model;\n    const editor = this._editor;\n\n    if (!editor) {\n      return;\n    }\n\n    const host = editor.host;\n\n    // If there is no model, return.\n    if (!model) {\n      this._enabled = false;\n      host.classList.remove(COMPLETER_ENABLED_CLASS);\n      return;\n    }\n\n    const position = editor.getCursorPosition();\n    const line = editor.getLine(position.line);\n    if (!line) {\n      this._enabled = false;\n      model.reset(true);\n      host.classList.remove(COMPLETER_ENABLED_CLASS);\n      return;\n    }\n\n    const { start, end } = editor.getSelection();\n\n    // If there is a text selection, return.\n    if (start.column !== end.column || start.line !== end.line) {\n      this._enabled = false;\n      model.reset(true);\n      host.classList.remove(COMPLETER_ENABLED_CLASS);\n      return;\n    }\n\n    // If the part of the line before the cursor is white space, return.\n    if (line.slice(0, position.column).match(/^\\s*$/)) {\n      this._enabled = false;\n      model.reset(true);\n      host.classList.remove(COMPLETER_ENABLED_CLASS);\n      return;\n    }\n\n    // Enable completion.\n    if (!this._enabled) {\n      this._enabled = true;\n      host.classList.add(COMPLETER_ENABLED_CLASS);\n    }\n\n    // Dispatch the cursor change.\n    model.handleCursorChange(this.getState(editor, editor.getCursorPosition()));\n  }\n\n  /**\n   * Handle a text changed signal from an editor.\n   */\n  protected onTextChanged(): void {\n    const model = this.completer.model;\n    if (!model || !this._enabled) {\n      return;\n    }\n\n    // If there is a text selection, no completion is allowed.\n    const editor = this.editor;\n    if (!editor) {\n      return;\n    }\n    const { start, end } = editor.getSelection();\n    if (start.column !== end.column || start.line !== end.line) {\n      return;\n    }\n\n    // Dispatch the text change.\n    model.handleTextChange(this.getState(editor, editor.getCursorPosition()));\n  }\n\n  /**\n   * Handle a visibility change signal from a completer widget.\n   */\n  protected onVisibilityChanged(completer: Completer): void {\n    // Completer is not active.\n    if (completer.isDisposed || completer.isHidden) {\n      if (this._editor) {\n        this._editor.host.classList.remove(COMPLETER_ACTIVE_CLASS);\n        this._editor.focus();\n      }\n      return;\n    }\n\n    // Completer is active.\n    if (this._editor) {\n      this._editor.host.classList.add(COMPLETER_ACTIVE_CLASS);\n    }\n  }\n\n  /**\n   * Make a completion request.\n   */\n  private _makeRequest(position: CodeEditor.IPosition): Promise<void> {\n    const editor = this.editor;\n\n    if (!editor) {\n      return Promise.reject(new Error('No active editor'));\n    }\n\n    const text = editor.model.value.text;\n    const offset = Text.jsIndexToCharIndex(editor.getOffsetAt(position), text);\n    const pending = ++this._pending;\n    const state = this.getState(editor, position);\n    const request: CompletionHandler.IRequest = { text, offset };\n\n    return this._connector\n      .fetch(request)\n      .then(reply => {\n        if (this.isDisposed) {\n          throw new Error('Handler is disposed');\n        }\n\n        // If a newer completion request has created a pending request, bail.\n        if (pending !== this._pending) {\n          throw new Error('A newer completion request is pending');\n        }\n\n        this._onReply(state, reply);\n      })\n      .catch(reason => {\n        // Completion request failures or negative results fail silently.\n        const model = this.completer.model;\n\n        if (model) {\n          model.reset(true);\n        }\n      });\n  }\n\n  /**\n   * Receive a completion reply from the connector.\n   *\n   * @param state - The state of the editor when completion request was made.\n   *\n   * @param reply - The API response returned for a completion request.\n   */\n  private _onReply(\n    state: Completer.ITextState,\n    reply: CompletionHandler.IReply\n  ): void {\n    const model = this.completer.model;\n    const text = state.text;\n\n    if (!model) {\n      return;\n    }\n\n    // Update the original request.\n    model.original = state;\n\n    // Dedupe the matches.\n    const matches: string[] = [];\n    const matchSet = new Set(reply.matches || []);\n\n    if (reply.matches) {\n      matchSet.forEach(match => {\n        matches.push(match);\n      });\n    }\n\n    // Extract the optional type map. The current implementation uses\n    // _jupyter_types_experimental which provide string type names. We make no\n    // assumptions about the names of the types, so other kernels can provide\n    // their own types.\n    // Even though the `metadata` field is required, it has historically not\n    // been used. Defensively check if it exists.\n    const metadata = reply.metadata || {};\n    const types = metadata._jupyter_types_experimental as JSONArray;\n    const typeMap: Completer.TypeMap = {};\n\n    if (types) {\n      types.forEach((item: JSONObject) => {\n        // For some reason the _jupyter_types_experimental list has two entries\n        // for each match, with one having a type of \"<unknown>\". Discard those\n        // and use undefined to indicate an unknown type.\n        const text = item.text as string;\n        const type = item.type as string;\n\n        if (matchSet.has(text) && type !== '<unknown>') {\n          typeMap[text] = type;\n        }\n      });\n    }\n\n    // Update the options, including the type map.\n    model.setOptions(matches, typeMap);\n\n    // Update the cursor.\n    model.cursor = {\n      start: Text.charIndexToJsIndex(reply.start, text),\n      end: Text.charIndexToJsIndex(reply.end, text)\n    };\n  }\n\n  private _connector: IDataConnector<\n    CompletionHandler.IReply,\n    void,\n    CompletionHandler.IRequest\n  >;\n  private _editor: CodeEditor.IEditor | null = null;\n  private _enabled = false;\n  private _pending = 0;\n  private _isDisposed = false;\n}\n\n/**\n * A namespace for cell completion handler statics.\n */\nexport namespace CompletionHandler {\n  /**\n   * The instantiation options for cell completion handlers.\n   */\n  export interface IOptions {\n    /**\n     * The completion widget the handler will connect to.\n     */\n    completer: Completer;\n\n    /**\n     * The data connector used to populate completion requests.\n     *\n     * #### Notes\n     * The only method of this connector that will ever be called is `fetch`, so\n     * it is acceptable for the other methods to be simple functions that return\n     * rejected promises.\n     */\n    connector: IDataConnector<IReply, void, IRequest>;\n  }\n\n  /**\n   * A reply to a completion request.\n   */\n  export interface IReply {\n    /**\n     * The starting index for the substring being replaced by completion.\n     */\n    start: number;\n\n    /**\n     * The end index for the substring being replaced by completion.\n     */\n    end: number;\n\n    /**\n     * A list of matching completion strings.\n     */\n    matches: string[];\n\n    /**\n     * Any metadata that accompanies the completion reply.\n     */\n    metadata: ReadonlyJSONObject;\n  }\n\n  /**\n   * The details of a completion request.\n   */\n  export interface IRequest {\n    /**\n     * The cursor offset position within the text being completed.\n     */\n    offset: number;\n\n    /**\n     * The text being completed.\n     */\n    text: string;\n  }\n\n  /**\n   * A namespace for completion handler messages.\n   */\n  export namespace Msg {\n    /* tslint:disable */\n    /**\n     * A singleton `'invoke-request'` message.\n     */\n    export const InvokeRequest = new Message('invoke-request');\n    /* tslint:enable */\n  }\n}\n"]}