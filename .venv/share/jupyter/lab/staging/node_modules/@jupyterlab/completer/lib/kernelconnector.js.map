{"version":3,"file":"kernelconnector.js","sourceRoot":"","sources":["../../../../completer/src/kernelconnector.ts"],"names":[],"mappings":";AAAA,0CAA0C;AAC1C,2DAA2D;;AAI3D,qDAAsD;AAMtD;;GAEG;AACH,qBAA6B,SAAQ,yBAIpC;IACC;;;;OAIG;IACH,YAAY,OAAiC;QAC3C,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,OAAO,CAAC;IAClC,CAAC;IAED;;;;OAIG;IACH,KAAK,CACH,OAAmC;QAEnC,MAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;QAEpC,IAAI,CAAC,MAAM,EAAE;YACX,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC,CAAC;SACvE;QAED,MAAM,QAAQ,GAAmC;YAC/C,IAAI,EAAE,OAAO,CAAC,IAAI;YAClB,UAAU,EAAE,OAAO,CAAC,MAAM;SAC3B,CAAC;QAEF,OAAO,MAAM,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;YACjD,MAAM,QAAQ,GAAG,GAAG,CAAC,OAAO,CAAC;YAE7B,IAAI,QAAQ,CAAC,MAAM,KAAK,IAAI,EAAE;gBAC5B,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAC;aACpE;YAED,OAAO;gBACL,KAAK,EAAE,QAAQ,CAAC,YAAY;gBAC5B,GAAG,EAAE,QAAQ,CAAC,UAAU;gBACxB,OAAO,EAAE,QAAQ,CAAC,OAAO;gBACzB,QAAQ,EAAE,QAAQ,CAAC,QAAQ;aAC5B,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;CAGF;AAnDD,0CAmDC","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { IClientSession } from '@jupyterlab/apputils';\n\nimport { DataConnector } from '@jupyterlab/coreutils';\n\nimport { KernelMessage } from '@jupyterlab/services';\n\nimport { CompletionHandler } from './handler';\n\n/**\n * A kernel connector for completion handlers.\n */\nexport class KernelConnector extends DataConnector<\n  CompletionHandler.IReply,\n  void,\n  CompletionHandler.IRequest\n> {\n  /**\n   * Create a new kernel connector for completion requests.\n   *\n   * @param options - The instatiation options for the kernel connector.\n   */\n  constructor(options: KernelConnector.IOptions) {\n    super();\n    this._session = options.session;\n  }\n\n  /**\n   * Fetch completion requests.\n   *\n   * @param request - The completion request text and details.\n   */\n  fetch(\n    request: CompletionHandler.IRequest\n  ): Promise<CompletionHandler.IReply> {\n    const kernel = this._session.kernel;\n\n    if (!kernel) {\n      return Promise.reject(new Error('No kernel for completion request.'));\n    }\n\n    const contents: KernelMessage.ICompleteRequest = {\n      code: request.text,\n      cursor_pos: request.offset\n    };\n\n    return kernel.requestComplete(contents).then(msg => {\n      const response = msg.content;\n\n      if (response.status !== 'ok') {\n        throw new Error('Completion fetch failed to return successfully.');\n      }\n\n      return {\n        start: response.cursor_start,\n        end: response.cursor_end,\n        matches: response.matches,\n        metadata: response.metadata\n      };\n    });\n  }\n\n  private _session: IClientSession;\n}\n\n/**\n * A namespace for kernel connector statics.\n */\nexport namespace KernelConnector {\n  /**\n   * The instantiation options for cell completion handlers.\n   */\n  export interface IOptions {\n    /**\n     * The session used by the kernel connector.\n     */\n    session: IClientSession;\n  }\n}\n"]}