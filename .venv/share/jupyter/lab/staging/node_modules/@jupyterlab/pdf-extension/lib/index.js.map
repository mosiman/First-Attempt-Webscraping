{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../pdf-extension/src/index.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { Widget } from '@phosphor/widgets';\n\nimport { IRenderMime } from '@jupyterlab/rendermime-interfaces';\n\nimport '../style/index.css';\n\n/**\n * The MIME type for PDF.\n */\nexport const MIME_TYPE = 'application/pdf';\n\nexport const PDF_CLASS = 'jp-PDFViewer';\n\nexport const PDF_CONTAINER_CLASS = 'jp-PDFContainer';\n\n/**\n * A class for rendering a PDF document.\n */\nexport class RenderedPDF extends Widget implements IRenderMime.IRenderer {\n  constructor() {\n    super({ node: Private.createNode() });\n  }\n\n  /**\n   * Render PDF into this widget's node.\n   */\n  renderModel(model: IRenderMime.IMimeModel): Promise<void> {\n    let data = model.data[MIME_TYPE] as string;\n    // If there is no data, do nothing.\n    if (!data) {\n      return Promise.resolve(void 0);\n    }\n    const blob = Private.b64toBlob(data, MIME_TYPE);\n\n    let oldUrl = this._objectUrl;\n    this._objectUrl = URL.createObjectURL(blob);\n    this.node.querySelector('embed').setAttribute('src', this._objectUrl);\n\n    // Release reference to any previous object url.\n    if (oldUrl) {\n      try {\n        URL.revokeObjectURL(oldUrl);\n      } catch (error) {\n        /* no-op */\n      }\n    }\n    return Promise.resolve(void 0);\n  }\n\n  /**\n   * Dispose of the resources held by the pdf widget.\n   */\n  dispose() {\n    try {\n      URL.revokeObjectURL(this._objectUrl);\n    } catch (error) {\n      /* no-op */\n    }\n    super.dispose();\n  }\n\n  private _objectUrl = '';\n}\n\n/**\n * A mime renderer factory for PDF data.\n */\nexport const rendererFactory: IRenderMime.IRendererFactory = {\n  safe: false,\n  mimeTypes: [MIME_TYPE],\n  defaultRank: 75,\n  createRenderer: options => new RenderedPDF()\n};\n\nconst extensions: IRenderMime.IExtension | IRenderMime.IExtension[] = [\n  {\n    id: '@jupyterlab/pdf-extension:factory',\n    rendererFactory,\n    dataType: 'string',\n    fileTypes: [\n      {\n        name: 'PDF',\n        displayName: 'PDF',\n        fileFormat: 'base64',\n        mimeTypes: [MIME_TYPE],\n        extensions: ['.pdf']\n      }\n    ],\n    documentWidgetFactoryOptions: {\n      name: 'PDF',\n      modelName: 'base64',\n      primaryFileType: 'PDF',\n      fileTypes: ['PDF'],\n      defaultFor: ['PDF']\n    }\n  }\n];\n\nexport default extensions;\n\n/**\n * A namespace for PDF widget private data.\n */\nnamespace Private {\n  /**\n   * Create the node for the PDF widget.\n   */\n  export function createNode(): HTMLElement {\n    let node = document.createElement('div');\n    node.className = PDF_CONTAINER_CLASS;\n    let pdf = document.createElement('embed');\n    pdf.className = PDF_CLASS;\n    pdf.setAttribute('type', MIME_TYPE);\n    node.appendChild(pdf);\n    return node;\n  }\n\n  /**\n   * Convert a base64 encoded string to a Blob object.\n   * Modified from a snippet found here:\n   * https://stackoverflow.com/questions/16245767/creating-a-blob-from-a-base64-string-in-javascript\n   *\n   * @param b64Data - The base64 encoded data.\n   *\n   * @param contentType - The mime type of the data.\n   *\n   * @param sliceSize - The size to chunk the data into for processing.\n   *\n   * @returns a Blob for the data.\n   */\n  export function b64toBlob(\n    b64Data: string,\n    contentType: string = '',\n    sliceSize: number = 512\n  ): Blob {\n    const byteCharacters = atob(b64Data);\n    let byteArrays: Uint8Array[] = [];\n\n    for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n      let slice = byteCharacters.slice(offset, offset + sliceSize);\n\n      let byteNumbers = new Array(slice.length);\n      for (let i = 0; i < slice.length; i++) {\n        byteNumbers[i] = slice.charCodeAt(i);\n      }\n      let byteArray = new Uint8Array(byteNumbers);\n      byteArrays.push(byteArray);\n    }\n\n    return new Blob(byteArrays, { type: contentType });\n  }\n}\n"]}