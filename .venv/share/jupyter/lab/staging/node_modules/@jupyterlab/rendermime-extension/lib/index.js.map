{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../rendermime-extension/src/index.ts"],"names":[],"mappings":";AAAA;;;+EAG+E;;AAI/E,uDAA0D;AAE1D,uDAKgC;AAEhC,IAAU,UAAU,CAEnB;AAFD,WAAU,UAAU;IACL,qBAAU,GAAG,8BAA8B,CAAC;AAC3D,CAAC,EAFS,UAAU,KAAV,UAAU,QAEnB;AAED;;GAEG;AACH,MAAM,MAAM,GAAyC;IACnD,EAAE,EAAE,yCAAyC;IAC7C,QAAQ,EAAE,CAAC,6BAAgB,CAAC;IAC5B,QAAQ,EAAE,CAAC,6BAAgB,CAAC;IAC5B,QAAQ,EAAE,gCAAmB;IAC7B,QAAQ,EAAE,QAAQ;IAClB,SAAS,EAAE,IAAI;CAChB,CAAC;AAEF;;GAEG;AACH,kBAAe,MAAM,CAAC;AAEtB;;GAEG;AACH,kBACE,GAAe,EACf,UAA4B,EAC5B,eAAwC;IAExC,GAAG,CAAC,QAAQ,CAAC,UAAU,CAAC,UAAU,CAAC,UAAU,EAAE;QAC7C,KAAK,EAAE,mBAAmB;QAC1B,OAAO,EAAE,IAAI,CAAC,EAAE;YACd,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAA8B,CAAC;YACvD,MAAM,EAAE,GAAG,IAAI,CAAC,IAAI,CAA8B,CAAC;YACnD,IAAI,CAAC,IAAI,EAAE;gBACT,OAAO;aACR;YACD,gDAAgD;YAChD,OAAO,UAAU,CAAC,QAAQ,CAAC,QAAQ;iBAChC,GAAG,CAAC,IAAI,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC;iBAC7B,IAAI,CAAC,GAAG,EAAE;gBACT,0DAA0D;gBAC1D,iBAAiB;gBACjB,MAAM,OAAO,GAAG,UAAU,CAAC,QAAQ,CAAC,4BAA4B,CAC9D,IAAI,CACL,CAAC;gBACF,MAAM,MAAM,GAAG,UAAU,CAAC,YAAY,CAAC,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;gBAC3D,IAAI,CAAC,MAAM,EAAE;oBACX,OAAO;iBACR;gBACD,OAAO,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,EAAE;oBAC/B,iEAAiE;oBACjE,4BAA4B;oBAC5B,IAAI,CAAC,EAAE,EAAE;wBACP,OAAO;qBACR;oBACD,4DAA4D;oBAC5D,qDAAqD;oBACrD,sBAAsB;oBACtB,MAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;oBAC9C,IAAI,OAAO,EAAE;wBACX,OAAO,CAAC,cAAc,EAAE,CAAC;qBAC1B;oBACD,OAAO;gBACT,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACP,CAAC;KACF,CAAC,CAAC;IACH,OAAO,IAAI,+BAAkB,CAAC;QAC5B,gBAAgB,EAAE,sCAAyB;QAC3C,WAAW,EAAE;YACX,UAAU,EAAE,CAAC,IAAiB,EAAE,IAAY,EAAE,EAAW,EAAE,EAAE;gBAC3D,GAAG,CAAC,aAAa,CAAC,WAAW,CAAC,IAAI,EAAE,UAAU,CAAC,UAAU,EAAE;oBACzD,IAAI;oBACJ,EAAE;iBACH,CAAC,CAAC;YACL,CAAC;SACF;QACD,eAAe;KAChB,CAAC,CAAC;AACL,CAAC","sourcesContent":["/*-----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\n\nimport { JupyterLab, JupyterLabPlugin } from '@jupyterlab/application';\n\nimport { IDocumentManager } from '@jupyterlab/docmanager';\n\nimport {\n  ILatexTypesetter,\n  IRenderMimeRegistry,\n  RenderMimeRegistry,\n  standardRendererFactories\n} from '@jupyterlab/rendermime';\n\nnamespace CommandIDs {\n  export const handleLink = 'rendermime:handle-local-link';\n}\n\n/**\n * A plugin providing a rendermime registry.\n */\nconst plugin: JupyterLabPlugin<RenderMimeRegistry> = {\n  id: '@jupyterlab/rendermime-extension:plugin',\n  requires: [IDocumentManager],\n  optional: [ILatexTypesetter],\n  provides: IRenderMimeRegistry,\n  activate: activate,\n  autoStart: true\n};\n\n/**\n * Export the plugin as default.\n */\nexport default plugin;\n\n/**\n * Activate the rendermine plugin.\n */\nfunction activate(\n  app: JupyterLab,\n  docManager: IDocumentManager,\n  latexTypesetter: ILatexTypesetter | null\n) {\n  app.commands.addCommand(CommandIDs.handleLink, {\n    label: 'Handle Local Link',\n    execute: args => {\n      const path = args['path'] as string | undefined | null;\n      const id = args['id'] as string | undefined | null;\n      if (!path) {\n        return;\n      }\n      // First check if the path exists on the server.\n      return docManager.services.contents\n        .get(path, { content: false })\n        .then(() => {\n          // Open the link with the default rendered widget factory,\n          // if applicable.\n          const factory = docManager.registry.defaultRenderedWidgetFactory(\n            path\n          );\n          const widget = docManager.openOrReveal(path, factory.name);\n          if (!widget) {\n            return;\n          }\n          return widget.revealed.then(() => {\n            // Once the widget is ready, attempt to scroll the hash into view\n            // if one has been provided.\n            if (!id) {\n              return;\n            }\n            // Look for the an element with the hash id in the document.\n            // This id is set automatically for headers tags when\n            // we render markdown.\n            const element = widget.node.querySelector(id);\n            if (element) {\n              element.scrollIntoView();\n            }\n            return;\n          });\n        });\n    }\n  });\n  return new RenderMimeRegistry({\n    initialFactories: standardRendererFactories,\n    linkHandler: {\n      handleLink: (node: HTMLElement, path: string, id?: string) => {\n        app.commandLinker.connectNode(node, CommandIDs.handleLink, {\n          path,\n          id\n        });\n      }\n    },\n    latexTypesetter\n  });\n}\n"]}