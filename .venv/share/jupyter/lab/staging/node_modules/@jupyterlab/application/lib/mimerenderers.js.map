{"version":3,"file":"mimerenderers.js","sourceRoot":"","sources":["../../../../application/src/mimerenderers.ts"],"names":[],"mappings":";AAAA,0CAA0C;AAC1C,2DAA2D;;AAE3D,mDAAyE;AAEzE,yDAIiC;AAEjC,uDAA6D;AAI7D,mDAA4C;AAE5C,qDAAwD;AAIxD,qDAAmD;AAOnD,oBAAoB;AACpB;;GAEG;AACU,QAAA,oBAAoB,GAAG,IAAI,iBAAK,CAC3C,8CAA8C,CAC/C,CAAC;AACF,mBAAmB;AAEnB;;GAEG;AACH,iCACE,UAA0C;IAE1C,MAAM,OAAO,GAAoD,EAAE,CAAC;IAEpE,MAAM,SAAS,GAAG,2BAA2B,CAAC;IAC9C,MAAM,OAAO,GAAG,IAAI,0BAAe,CAAe,EAAE,SAAS,EAAE,CAAC,CAAC;IAEjE,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;QACvB,IAAI,IAAI,GAAG,GAAG,CAAC,OAAO,CAAC;QAEvB,2BAA2B;QAC3B,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,YAAY,CAAC,EAAE;YACrC,IAAI,GAAG,GAAU,CAAC;SACnB;QACD,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACxB,IAAI,GAAG,CAAC,IAAI,CAA0C,CAAC;SACxD;QACA,IAA8C,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YAC7D,OAAO,CAAC,IAAI,CAAC,sBAAsB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,oDAAoD;IACpD,mDAAmD;IACnD,OAAO,CAAC,IAAI,CAAC;QACX,EAAE,EAAE,sCAAsC;QAC1C,QAAQ,EAAE,CAAC,gCAAe,CAAC;QAC3B,QAAQ,EAAE,4BAAoB;QAC9B,SAAS,EAAE,IAAI;QACf,QAAQ,EAAE,CAAC,GAAe,EAAE,QAAyB,EAAE,EAAE;YACvD,QAAQ,CAAC,OAAO,CAAC,OAAO,EAAE;gBACxB,OAAO,EAAE,iBAAiB;gBAC1B,IAAI,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC;oBACf,IAAI,EAAE,MAAM,CAAC,OAAO,CAAC,IAAI;oBACzB,OAAO,EAAE,OAAO,CAAC,mBAAmB,CAAC,GAAG,CAAC,MAAM,CAAC;iBACjD,CAAC;gBACF,IAAI,EAAE,MAAM,CAAC,EAAE,CACb,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,mBAAmB,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;aACtE,CAAC,CAAC;YACH,OAAO,OAAO,CAAC;QACjB,CAAC;KACF,CAAC,CAAC;IAEH,OAAO,OAAO,CAAC;AACjB,CAAC;AA7CD,0DA6CC;AAED;;GAEG;AACH,gCACE,OAAsC,EACtC,IAA4B;IAE5B,OAAO;QACL,EAAE,EAAE,IAAI,CAAC,EAAE;QACX,QAAQ,EAAE,CAAC,gCAAe,EAAE,gCAAmB,CAAC;QAChD,SAAS,EAAE,IAAI;QACf,QAAQ,EAAE,CACR,GAAe,EACf,QAAyB,EACzB,UAA+B,EAC/B,EAAE;YACF,yBAAyB;YACzB,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS,EAAE;gBAC3B,UAAU,CAAC,UAAU,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;aACxD;iBAAM;gBACL,UAAU,CAAC,UAAU,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;aAC7C;YAED,6BAA6B;YAC7B,IAAI,CAAC,IAAI,CAAC,4BAA4B,EAAE;gBACtC,OAAO;aACR;YAED,IAAI,QAAQ,GAAG,GAAG,CAAC,WAAW,CAAC;YAC/B,IAAI,OAAO,GAAgD,EAAE,CAAC;YAC9D,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,4BAA4B,CAAC,EAAE;gBACpD,OAAO,GAAG,IAAI,CAAC,4BAA4B,CAAC;aAC7C;iBAAM;gBACL,OAAO,GAAG;oBACR,IAAI,CAAC,4BAAyE;iBAC/E,CAAC;aACH;YAED,IAAI,IAAI,CAAC,SAAS,EAAE;gBAClB,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE;oBAC1B,GAAG,CAAC,WAAW,CAAC,WAAW,CAAC,EAAgC,CAAC,CAAC;gBAChE,CAAC,CAAC,CAAC;aACJ;YAED,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;gBACvB,IAAI,OAAO,GAAG,IAAI,iCAAmB,CAAC;oBACpC,aAAa,EAAE,IAAI,CAAC,aAAa;oBACjC,QAAQ,EAAE,IAAI,CAAC,QAAQ;oBACvB,UAAU;oBACV,SAAS,EAAE,MAAM,CAAC,SAAS;oBAC3B,IAAI,EAAE,MAAM,CAAC,IAAI;oBACjB,eAAe,EAAE,QAAQ,CAAC,WAAW,CAAC,MAAM,CAAC,eAAe,CAAC;oBAC7D,SAAS,EAAE,MAAM,CAAC,SAAS;oBAC3B,UAAU,EAAE,MAAM,CAAC,UAAU;oBAC7B,eAAe,EAAE,MAAM,CAAC,eAAe;iBACxC,CAAC,CAAC;gBACH,QAAQ,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;gBAEnC,OAAO,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,MAAM,EAAE,EAAE;oBAC/C,OAAO,CAAC,mBAAmB,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;oBACtD,+DAA+D;oBAC/D,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,OAAO,CAAC,GAAG,EAAE;wBACtC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBACvB,CAAC,CAAC,CAAC;oBACH,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;gBACtB,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC;KACF,CAAC;AACJ,CAAC;AAlED,wDAkEC;AAED;;GAEG;AACH,IAAU,OAAO,CAWhB;AAXD,WAAU,OAAO;IACf;;;OAGG;IACU,2BAAmB,GAAG,IAAI,6BAAgB,CACrD;QACE,IAAI,EAAE,aAAa;QACnB,MAAM,EAAE,GAAG,EAAE,CAAC,SAAS;KACxB,CACF,CAAC;AACJ,CAAC,EAXS,OAAO,KAAP,OAAO,QAWhB","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { IInstanceTracker, InstanceTracker } from '@jupyterlab/apputils';\n\nimport {\n  MimeDocumentFactory,\n  DocumentRegistry,\n  MimeDocument\n} from '@jupyterlab/docregistry';\n\nimport { IRenderMimeRegistry } from '@jupyterlab/rendermime';\n\nimport { IRenderMime } from '@jupyterlab/rendermime-interfaces';\n\nimport { Token } from '@phosphor/coreutils';\n\nimport { AttachedProperty } from '@phosphor/properties';\n\nimport { JupyterLab, JupyterLabPlugin } from './index';\n\nimport { ILayoutRestorer } from './layoutrestorer';\n\n/**\n * A class that tracks mime documents.\n */\nexport interface IMimeDocumentTracker extends IInstanceTracker<MimeDocument> {}\n\n/* tslint:disable */\n/**\n * The mime document tracker token.\n */\nexport const IMimeDocumentTracker = new Token<IMimeDocumentTracker>(\n  '@jupyterlab/application:IMimeDocumentTracker'\n);\n/* tslint:enable */\n\n/**\n * Create rendermime plugins for rendermime extension modules.\n */\nexport function createRendermimePlugins(\n  extensions: IRenderMime.IExtensionModule[]\n): JupyterLabPlugin<void | IMimeDocumentTracker>[] {\n  const plugins: JupyterLabPlugin<void | IMimeDocumentTracker>[] = [];\n\n  const namespace = 'application-mimedocuments';\n  const tracker = new InstanceTracker<MimeDocument>({ namespace });\n\n  extensions.forEach(mod => {\n    let data = mod.default;\n\n    // Handle CommonJS exports.\n    if (!mod.hasOwnProperty('__esModule')) {\n      data = mod as any;\n    }\n    if (!Array.isArray(data)) {\n      data = [data] as ReadonlyArray<IRenderMime.IExtension>;\n    }\n    (data as ReadonlyArray<IRenderMime.IExtension>).forEach(item => {\n      plugins.push(createRendermimePlugin(tracker, item));\n    });\n  });\n\n  // Also add a meta-plugin handling state restoration\n  // and exposing the mime document instance tracker.\n  plugins.push({\n    id: '@jupyterlab/application:mimedocument',\n    requires: [ILayoutRestorer],\n    provides: IMimeDocumentTracker,\n    autoStart: true,\n    activate: (app: JupyterLab, restorer: ILayoutRestorer) => {\n      restorer.restore(tracker, {\n        command: 'docmanager:open',\n        args: widget => ({\n          path: widget.context.path,\n          factory: Private.factoryNameProperty.get(widget)\n        }),\n        name: widget =>\n          `${widget.context.path}:${Private.factoryNameProperty.get(widget)}`\n      });\n      return tracker;\n    }\n  });\n\n  return plugins;\n}\n\n/**\n * Create rendermime plugins for rendermime extension modules.\n */\nexport function createRendermimePlugin(\n  tracker: InstanceTracker<MimeDocument>,\n  item: IRenderMime.IExtension\n): JupyterLabPlugin<void> {\n  return {\n    id: item.id,\n    requires: [ILayoutRestorer, IRenderMimeRegistry],\n    autoStart: true,\n    activate: (\n      app: JupyterLab,\n      restorer: ILayoutRestorer,\n      rendermime: IRenderMimeRegistry\n    ) => {\n      // Add the mime renderer.\n      if (item.rank !== undefined) {\n        rendermime.addFactory(item.rendererFactory, item.rank);\n      } else {\n        rendermime.addFactory(item.rendererFactory);\n      }\n\n      // Handle the widget factory.\n      if (!item.documentWidgetFactoryOptions) {\n        return;\n      }\n\n      let registry = app.docRegistry;\n      let options: IRenderMime.IDocumentWidgetFactoryOptions[] = [];\n      if (Array.isArray(item.documentWidgetFactoryOptions)) {\n        options = item.documentWidgetFactoryOptions;\n      } else {\n        options = [\n          item.documentWidgetFactoryOptions as IRenderMime.IDocumentWidgetFactoryOptions\n        ];\n      }\n\n      if (item.fileTypes) {\n        item.fileTypes.forEach(ft => {\n          app.docRegistry.addFileType(ft as DocumentRegistry.IFileType);\n        });\n      }\n\n      options.forEach(option => {\n        let factory = new MimeDocumentFactory({\n          renderTimeout: item.renderTimeout,\n          dataType: item.dataType,\n          rendermime,\n          modelName: option.modelName,\n          name: option.name,\n          primaryFileType: registry.getFileType(option.primaryFileType),\n          fileTypes: option.fileTypes,\n          defaultFor: option.defaultFor,\n          defaultRendered: option.defaultRendered\n        });\n        registry.addWidgetFactory(factory);\n\n        factory.widgetCreated.connect((sender, widget) => {\n          Private.factoryNameProperty.set(widget, factory.name);\n          // Notify the instance tracker if restore data needs to update.\n          widget.context.pathChanged.connect(() => {\n            tracker.save(widget);\n          });\n          tracker.add(widget);\n        });\n      });\n    }\n  };\n}\n\n/**\n * Private namespace for the module.\n */\nnamespace Private {\n  /**\n   * An attached property for keeping the factory name\n   * that was used to create a mimedocument.\n   */\n  export const factoryNameProperty = new AttachedProperty<MimeDocument, string>(\n    {\n      name: 'factoryName',\n      create: () => undefined\n    }\n  );\n}\n"]}