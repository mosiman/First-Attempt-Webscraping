{"version":3,"file":"layoutrestorer.js","sourceRoot":"","sources":["../../../../application/src/layoutrestorer.ts"],"names":[],"mappings":"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","sourcesContent":["/*-----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\n\nimport { InstanceTracker } from '@jupyterlab/apputils';\n\nimport { IStateDB } from '@jupyterlab/coreutils';\n\nimport { CommandRegistry } from '@phosphor/commands';\n\nimport {\n  JSONObject,\n  PromiseDelegate,\n  ReadonlyJSONObject,\n  Token\n} from '@phosphor/coreutils';\n\nimport { AttachedProperty } from '@phosphor/properties';\n\nimport { DockPanel, Widget } from '@phosphor/widgets';\n\nimport { ApplicationShell } from './shell';\n\n/* tslint:disable */\n/**\n * The layout restorer token.\n */\nexport const ILayoutRestorer = new Token<ILayoutRestorer>(\n  '@jupyterlab/application:ILayoutRestorer'\n);\n/* tslint:enable */\n\n/**\n * A static class that restores the widgets of the application when it reloads.\n */\nexport interface ILayoutRestorer {\n  /**\n   * A promise resolved when the layout restorer is ready to receive signals.\n   */\n  restored: Promise<void>;\n\n  /**\n   * Add a widget to be tracked by the layout restorer.\n   */\n  add(widget: Widget, name: string): void;\n\n  /**\n   * Restore the widgets of a particular instance tracker.\n   *\n   * @param tracker - The instance tracker whose widgets will be restored.\n   *\n   * @param options - The restoration options.\n   */\n  restore(\n    tracker: InstanceTracker<any>,\n    options: ILayoutRestorer.IRestoreOptions<any>\n  ): void;\n}\n\n/**\n * A namespace for the layout restorer.\n */\nexport namespace ILayoutRestorer {\n  /**\n   * The state restoration configuration options.\n   */\n  export interface IRestoreOptions<T extends Widget> {\n    /**\n     * The command to execute when restoring instances.\n     */\n    command: string;\n\n    /**\n     * A function that returns the args needed to restore an instance.\n     */\n    args: (widget: T) => ReadonlyJSONObject;\n\n    /**\n     * A function that returns a unique persistent name for this instance.\n     */\n    name: (widget: T) => string;\n\n    /**\n     * The point after which it is safe to restore state.\n     *\n     * #### Notes\n     * By definition, this promise or promises will happen after the application\n     * has `started`.\n     */\n    when?: Promise<any> | Array<Promise<any>>;\n  }\n}\n\n/**\n * The state database key for restorer data.\n */\nconst KEY = 'layout-restorer:data';\n\n/**\n * The default implementation of a layout restorer.\n *\n * #### Notes\n * The lifecycle for state restoration is subtle. The sequence of events is:\n *\n * 1. The layout restorer plugin is instantiated and makes a `fetch` call to\n *    the database that stores the layout restoration data. The `fetch` call\n *    returns a promise that resolves in step 6, below.\n *\n * 2. Other plugins that care about state restoration require the layout\n *    restorer as a dependency.\n *\n * 3. As each load-time plugin initializes (which happens before the lab\n *    application has `started`), it instructs the layout restorer whether\n *    the restorer ought to `restore` its state by passing in its tracker.\n *    Alternatively, a plugin that does not require its own instance tracker\n *    (because perhaps it only creates a single widget, like a command palette),\n *    can simply `add` its widget along with a persistent unique name to the\n *    layout restorer so that its layout state can be restored when the lab\n *    application restores.\n *\n * 4. After all the load-time plugins have finished initializing, the lab\n *    application `started` promise will resolve. This is the `first`\n *    promise that the layout restorer waits for. By this point, all of the\n *    plugins that care about restoration will have instructed the layout\n *    restorer to `restore` their state.\n *\n * 5. The layout restorer will then instruct each plugin's instance tracker\n *    to restore its state and reinstantiate whichever widgets it wants. The\n *    tracker returns a promise to the layout restorer that resolves when it\n *    has completed restoring the tracked widgets it cares about.\n *\n * 6. As each instance tracker finishes restoring the widget instances it cares\n *    about, it resolves the promise that was made to the layout restorer\n *    (in step 5). After all of the promises that the restorer is awaiting have\n *    resolved, the restorer then resolves the outstanding `fetch` promise\n *    (from step 1) and hands off a layout state object to the application\n *    shell's `restoreLayout` method for restoration.\n *\n * 7. Once the application shell has finished restoring the layout, the\n *    JupyterLab application's `restored` promise is resolved.\n *\n * Of particular note are steps 5 and 6: since state restoration of plugins\n * is accomplished by executing commands, the command that is used to restore\n * the state of each plugin must return a promise that only resolves when the\n * widget has been created and added to the plugin's instance tracker.\n */\nexport class LayoutRestorer implements ILayoutRestorer {\n  /**\n   * Create a layout restorer.\n   */\n  constructor(options: LayoutRestorer.IOptions) {\n    this._registry = options.registry;\n    this._state = options.state;\n    this._first = options.first;\n\n    this._first\n      .then(() => {\n        this._firstDone = true;\n      })\n      .then(() => Promise.all(this._promises))\n      .then(() => {\n        this._promisesDone = true;\n\n        // Release the tracker set.\n        this._trackers.clear();\n      })\n      .then(() => {\n        this._restored.resolve(void 0);\n      });\n  }\n\n  /**\n   * A promise resolved when the layout restorer is ready to receive signals.\n   */\n  get restored(): Promise<void> {\n    return this._restored.promise;\n  }\n\n  /**\n   * Add a widget to be tracked by the layout restorer.\n   */\n  add(widget: Widget, name: string): void {\n    Private.nameProperty.set(widget, name);\n    this._widgets.set(name, widget);\n    widget.disposed.connect(this._onWidgetDisposed, this);\n  }\n\n  /**\n   * Fetch the layout state for the application.\n   *\n   * #### Notes\n   * Fetching the layout relies on all widget restoration to be complete, so\n   * calls to `fetch` are guaranteed to return after restoration is complete.\n   */\n  fetch(): Promise<ApplicationShell.ILayout> {\n    const blank: ApplicationShell.ILayout = {\n      fresh: true,\n      mainArea: null,\n      leftArea: null,\n      rightArea: null\n    };\n    let layout = this._state.fetch(KEY);\n\n    return Promise.all([layout, this.restored])\n      .then(([data]) => {\n        if (!data) {\n          return blank;\n        }\n\n        const { main, left, right } = data as Private.ILayout;\n\n        // If any data exists, then this is not a fresh session.\n        const fresh = false;\n\n        // Rehydrate main area.\n        const mainArea = this._rehydrateMainArea(main);\n\n        // Rehydrate left area.\n        const leftArea = this._rehydrateSideArea(left);\n\n        // Rehydrate right area.\n        const rightArea = this._rehydrateSideArea(right);\n\n        return { fresh, mainArea, leftArea, rightArea };\n      })\n      .catch(() => blank); // Let fetch fail gracefully; return blank slate.\n  }\n\n  /**\n   * Restore the widgets of a particular instance tracker.\n   *\n   * @param tracker - The instance tracker whose widgets will be restored.\n   *\n   * @param options - The restoration options.\n   */\n  restore(\n    tracker: InstanceTracker<Widget>,\n    options: ILayoutRestorer.IRestoreOptions<Widget>\n  ): Promise<any> {\n    const warning = 'restore() can only be called before `first` has resolved.';\n\n    if (this._firstDone) {\n      console.warn(warning);\n      return Promise.reject(warning);\n    }\n\n    const { namespace } = tracker;\n    if (this._trackers.has(namespace)) {\n      let warning = `A tracker namespaced ${namespace} was already restored.`;\n      console.warn(warning);\n      return Promise.reject(warning);\n    }\n\n    const { args, command, name, when } = options;\n\n    // Add the tracker to the private trackers collection.\n    this._trackers.add(namespace);\n\n    // Whenever a new widget is added to the tracker, record its name.\n    tracker.widgetAdded.connect((sender: any, widget: Widget) => {\n      const widgetName = name(widget);\n      if (widgetName) {\n        this.add(widget, `${namespace}:${widgetName}`);\n      }\n    }, this);\n\n    // Whenever a widget is updated, get its new name.\n    tracker.widgetUpdated.connect((sender, widget) => {\n      const widgetName = name(widget);\n      if (widgetName) {\n        let name = `${namespace}:${widgetName}`;\n        Private.nameProperty.set(widget, name);\n        this._widgets.set(name, widget);\n      }\n    });\n\n    const first = this._first;\n    const promise = tracker\n      .restore({\n        args,\n        command,\n        name,\n        registry: this._registry,\n        state: this._state,\n        when: when ? [first].concat(when) : first\n      })\n      .catch(error => {\n        console.error(error);\n      });\n\n    this._promises.push(promise);\n    return promise;\n  }\n\n  /**\n   * Save the layout state for the application.\n   */\n  save(data: ApplicationShell.ILayout): Promise<void> {\n    // If there are promises that are unresolved, bail.\n    if (!this._promisesDone) {\n      let warning = 'save() was called prematurely.';\n      console.warn(warning);\n      return Promise.reject(warning);\n    }\n\n    let dehydrated: Private.ILayout = {};\n\n    // Dehydrate main area.\n    dehydrated.main = this._dehydrateMainArea(data.mainArea);\n\n    // Dehydrate left area.\n    dehydrated.left = this._dehydrateSideArea(data.leftArea);\n\n    // Dehydrate right area.\n    dehydrated.right = this._dehydrateSideArea(data.rightArea);\n\n    return this._state.save(KEY, dehydrated);\n  }\n\n  /**\n   * Dehydrate a main area description into a serializable object.\n   */\n  private _dehydrateMainArea(\n    area: ApplicationShell.IMainArea | null\n  ): Private.IMainArea | null {\n    if (!area) {\n      return null;\n    }\n    return Private.serializeMain(area);\n  }\n\n  /**\n   * Reydrate a serialized main area description object.\n   *\n   * #### Notes\n   * This function consumes data that can become corrupted, so it uses type\n   * coercion to guarantee the dehydrated object is safely processed.\n   */\n  private _rehydrateMainArea(\n    area?: Private.IMainArea | null\n  ): ApplicationShell.IMainArea | null {\n    if (!area) {\n      return null;\n    }\n    return Private.deserializeMain(area, this._widgets);\n  }\n\n  /**\n   * Dehydrate a side area description into a serializable object.\n   */\n  private _dehydrateSideArea(\n    area?: ApplicationShell.ISideArea | null\n  ): Private.ISideArea | null {\n    if (!area) {\n      return null;\n    }\n    let dehydrated: Private.ISideArea = { collapsed: area.collapsed };\n    if (area.currentWidget) {\n      let current = Private.nameProperty.get(area.currentWidget);\n      if (current) {\n        dehydrated.current = current;\n      }\n    }\n    if (area.widgets) {\n      dehydrated.widgets = area.widgets\n        .map(widget => Private.nameProperty.get(widget))\n        .filter(name => !!name);\n    }\n    return dehydrated;\n  }\n\n  /**\n   * Reydrate a serialized side area description object.\n   *\n   * #### Notes\n   * This function consumes data that can become corrupted, so it uses type\n   * coercion to guarantee the dehydrated object is safely processed.\n   */\n  private _rehydrateSideArea(\n    area?: Private.ISideArea | null\n  ): ApplicationShell.ISideArea {\n    if (!area) {\n      return { collapsed: true, currentWidget: null, widgets: null };\n    }\n    let internal = this._widgets;\n    const collapsed = area.hasOwnProperty('collapsed')\n      ? !!area.collapsed\n      : false;\n    const currentWidget =\n      area.current && internal.has(`${area.current}`)\n        ? internal.get(`${area.current}`)\n        : null;\n    const widgets = !Array.isArray(area.widgets)\n      ? null\n      : area.widgets\n          .map(\n            name => (internal.has(`${name}`) ? internal.get(`${name}`) : null)\n          )\n          .filter(widget => !!widget);\n    return {\n      collapsed,\n      currentWidget: currentWidget!,\n      widgets: widgets as Widget[] | null\n    };\n  }\n\n  /**\n   * Handle a widget disposal.\n   */\n  private _onWidgetDisposed(widget: Widget): void {\n    let name = Private.nameProperty.get(widget);\n    this._widgets.delete(name);\n  }\n\n  private _first: Promise<any>;\n  private _firstDone = false;\n  private _promisesDone = false;\n  private _promises: Promise<any>[] = [];\n  private _restored = new PromiseDelegate<void>();\n  private _registry: CommandRegistry;\n  private _state: IStateDB;\n  private _trackers = new Set<string>();\n  private _widgets = new Map<string, Widget>();\n}\n\n/**\n * A namespace for `LayoutRestorer` statics.\n */\nexport namespace LayoutRestorer {\n  /**\n   * The configuration options for layout restorer instantiation.\n   */\n  export interface IOptions {\n    /**\n     * The initial promise that has to be resolved before restoration.\n     *\n     * #### Notes\n     * This promise should equal the JupyterLab application `started` notifier.\n     */\n    first: Promise<any>;\n\n    /**\n     * The application command registry.\n     */\n    registry: CommandRegistry;\n\n    /**\n     * The state database instance.\n     */\n    state: IStateDB;\n  }\n}\n\n/*\n * A namespace for private data.\n */\nnamespace Private {\n  /**\n   * The dehydrated state of the application layout.\n   *\n   * #### Notes\n   * This format is JSON serializable and saved in the state database.\n   * It is meant to be a data structure can translate into an\n   * `ApplicationShell.ILayout` data structure for consumption by\n   * the application shell.\n   */\n  export interface ILayout extends JSONObject {\n    /**\n     * The main area of the user interface.\n     */\n    main?: IMainArea | null;\n\n    /**\n     * The left area of the user interface.\n     */\n    left?: ISideArea | null;\n\n    /**\n     * The right area of the user interface.\n     */\n    right?: ISideArea | null;\n  }\n\n  /**\n   * The restorable description of the main application area.\n   */\n  export interface IMainArea extends JSONObject {\n    /**\n     * The current widget that has application focus.\n     */\n    current?: string | null;\n\n    /**\n     * The main application dock panel.\n     */\n    dock?: ISplitArea | ITabArea | null;\n\n    /**\n     * The document mode (i.e., multiple/single) of the main dock panel.\n     */\n    mode?: DockPanel.Mode | null;\n  }\n\n  /**\n   * The restorable description of a sidebar in the user interface.\n   */\n  export interface ISideArea extends JSONObject {\n    /**\n     * A flag denoting whether the sidebar has been collapsed.\n     */\n    collapsed?: boolean | null;\n\n    /**\n     * The current widget that has side area focus.\n     */\n    current?: string | null;\n\n    /**\n     * The collection of widgets held by the sidebar.\n     */\n    widgets?: Array<string> | null;\n  }\n\n  /**\n   * The restorable description of a tab area in the user interface.\n   */\n  export interface ITabArea extends JSONObject {\n    /**\n     * The type indicator of the serialized tab area.\n     */\n    type: 'tab-area';\n\n    /**\n     * The widgets in the tab area.\n     */\n    widgets: Array<string> | null;\n\n    /**\n     * The index of the selected tab.\n     */\n    currentIndex: number;\n  }\n\n  /**\n   * The restorable description of a split area in the user interface.\n   */\n  export interface ISplitArea extends JSONObject {\n    /**\n     * The type indicator of the serialized split area.\n     */\n    type: 'split-area';\n\n    /**\n     * The orientation of the split area.\n     */\n    orientation: 'horizontal' | 'vertical';\n\n    /**\n     * The children in the split area.\n     */\n    children: Array<ITabArea | ISplitArea> | null;\n\n    /**\n     * The sizes of the children.\n     */\n    sizes: Array<number>;\n  }\n\n  /**\n   * An attached property for a widget's ID in the state database.\n   */\n  export const nameProperty = new AttachedProperty<Widget, string>({\n    name: 'name',\n    create: owner => ''\n  });\n\n  /**\n   * Serialize individual areas within the main area.\n   */\n  function serializeArea(\n    area: ApplicationShell.AreaConfig | null\n  ): ITabArea | ISplitArea | null {\n    if (!area || !area.type) {\n      return null;\n    }\n\n    if (area.type === 'tab-area') {\n      return {\n        type: 'tab-area',\n        currentIndex: area.currentIndex,\n        widgets: area.widgets\n          .map(widget => nameProperty.get(widget))\n          .filter(name => !!name)\n      };\n    }\n\n    return {\n      type: 'split-area',\n      orientation: area.orientation,\n      sizes: area.sizes,\n      children: area.children.map(serializeArea).filter(area => !!area) as (\n        | ITabArea\n        | ISplitArea)[]\n    };\n  }\n\n  /**\n   * Return a dehydrated, serializable version of the main dock panel.\n   */\n  export function serializeMain(area: ApplicationShell.IMainArea): IMainArea {\n    let dehydrated: IMainArea = {\n      dock: (area && area.dock && serializeArea(area.dock.main)) || null\n    };\n    if (area) {\n      dehydrated.mode = area.mode;\n      if (area.currentWidget) {\n        let current = Private.nameProperty.get(area.currentWidget);\n        if (current) {\n          dehydrated.current = current;\n        }\n      }\n    }\n    return dehydrated;\n  }\n\n  /**\n   * Deserialize individual areas within the main area.\n   *\n   * #### Notes\n   * Because this data comes from a potentially unreliable foreign source, it is\n   * typed as a `JSONObject`; but the actual expected type is:\n   * `ITabArea | ISplitArea`.\n   *\n   * For fault tolerance, types are manually checked in deserialization.\n   */\n  function deserializeArea(\n    area: JSONObject,\n    names: Map<string, Widget>\n  ): ApplicationShell.AreaConfig | null {\n    if (!area) {\n      return null;\n    }\n\n    // Because this data is saved to a foreign data source, its type safety is\n    // not guaranteed when it is retrieved, so exhaustive checks are necessary.\n    const type = ((area as any).type as string) || 'unknown';\n    if (type === 'unknown' || (type !== 'tab-area' && type !== 'split-area')) {\n      console.warn(`Attempted to deserialize unknown type: ${type}`);\n      return null;\n    }\n\n    if (type === 'tab-area') {\n      const { currentIndex, widgets } = area as ITabArea;\n      let hydrated: ApplicationShell.AreaConfig = {\n        type: 'tab-area',\n        currentIndex: currentIndex || 0,\n        widgets:\n          (widgets &&\n            (widgets\n              .map(widget => names.get(widget))\n              .filter(widget => !!widget) as Widget[])) ||\n          []\n      };\n\n      // Make sure the current index is within bounds.\n      if (hydrated.currentIndex > hydrated.widgets.length - 1) {\n        hydrated.currentIndex = 0;\n      }\n\n      return hydrated;\n    }\n\n    const { orientation, sizes, children } = area as ISplitArea;\n    let hydrated: ApplicationShell.AreaConfig = {\n      type: 'split-area',\n      orientation: orientation,\n      sizes: sizes || [],\n      children:\n        (children &&\n          (children\n            .map(child => deserializeArea(child, names))\n            .filter(widget => !!widget) as ApplicationShell.AreaConfig[])) ||\n        []\n    };\n\n    return hydrated;\n  }\n\n  /**\n   * Return the hydrated version of the main dock panel, ready to restore.\n   *\n   * #### Notes\n   * Because this data comes from a potentially unreliable foreign source, it is\n   * typed as a `JSONObject`; but the actual expected type is: `IMainArea`.\n   *\n   * For fault tolerance, types are manually checked in deserialization.\n   */\n  export function deserializeMain(\n    area: JSONObject,\n    names: Map<string, Widget>\n  ): ApplicationShell.IMainArea | null {\n    if (!area) {\n      return null;\n    }\n\n    const name = (area as any).current || null;\n    const dock = (area as any).dock || null;\n    const mode = (area as any).mode || null;\n\n    return {\n      currentWidget: (name && names.has(name) && names.get(name)) || null,\n      dock: dock ? { main: deserializeArea(dock, names) } : null,\n      mode:\n        mode === 'multiple-document' || mode === 'single-document' ? mode : null\n    };\n  }\n}\n"]}