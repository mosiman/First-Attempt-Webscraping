{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../csvviewer-extension/src/index.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport {\n  ILayoutRestorer,\n  JupyterLab,\n  JupyterLabPlugin\n} from '@jupyterlab/application';\n\nimport { InstanceTracker } from '@jupyterlab/apputils';\n\nimport {\n  CSVViewer,\n  CSVViewerFactory,\n  TSVViewerFactory\n} from '@jupyterlab/csvviewer';\n\nimport { IDocumentWidget } from '@jupyterlab/docregistry';\n\n/**\n * The name of the factories that creates widgets.\n */\nconst FACTORY_CSV = 'CSVTable';\nconst FACTORY_TSV = 'TSVTable';\n\n/**\n * The CSV file handler extension.\n */\n\nconst csv: JupyterLabPlugin<void> = {\n  activate: activateCsv,\n  id: '@jupyterlab/csvviewer-extension:csv',\n  requires: [ILayoutRestorer],\n  autoStart: true\n};\n\n/**\n * The TSV file handler extension.\n */\nconst tsv: JupyterLabPlugin<void> = {\n  activate: activateTsv,\n  id: '@jupyterlab/csvviewer-extension:tsv',\n  requires: [ILayoutRestorer],\n  autoStart: true\n};\n\n/**\n * Activate cssviewer extension for CSV files\n */\nfunction activateCsv(app: JupyterLab, restorer: ILayoutRestorer): void {\n  const factory = new CSVViewerFactory({\n    name: FACTORY_CSV,\n    fileTypes: ['csv'],\n    defaultFor: ['csv'],\n    readOnly: true\n  });\n  const tracker = new InstanceTracker<IDocumentWidget<CSVViewer>>({\n    namespace: 'csvviewer'\n  });\n\n  // Handle state restoration.\n  restorer.restore(tracker, {\n    command: 'docmanager:open',\n    args: widget => ({ path: widget.context.path, factory: FACTORY_CSV }),\n    name: widget => widget.context.path\n  });\n\n  app.docRegistry.addWidgetFactory(factory);\n  let ft = app.docRegistry.getFileType('csv');\n  factory.widgetCreated.connect((sender, widget) => {\n    // Track the widget.\n    tracker.add(widget);\n    // Notify the instance tracker if restore data needs to update.\n    widget.context.pathChanged.connect(() => {\n      tracker.save(widget);\n    });\n\n    if (ft) {\n      widget.title.iconClass = ft.iconClass;\n      widget.title.iconLabel = ft.iconLabel;\n    }\n  });\n}\n\n/**\n * Activate cssviewer extension for TSV files\n */\nfunction activateTsv(app: JupyterLab, restorer: ILayoutRestorer): void {\n  const factory = new TSVViewerFactory({\n    name: FACTORY_TSV,\n    fileTypes: ['tsv'],\n    defaultFor: ['tsv'],\n    readOnly: true\n  });\n  const tracker = new InstanceTracker<IDocumentWidget<CSVViewer>>({\n    namespace: 'tsvviewer'\n  });\n\n  // Handle state restoration.\n  restorer.restore(tracker, {\n    command: 'docmanager:open',\n    args: widget => ({ path: widget.context.path, factory: FACTORY_TSV }),\n    name: widget => widget.context.path\n  });\n\n  app.docRegistry.addWidgetFactory(factory);\n  let ft = app.docRegistry.getFileType('tsv');\n  factory.widgetCreated.connect((sender, widget) => {\n    // Track the widget.\n    tracker.add(widget);\n    // Notify the instance tracker if restore data needs to update.\n    widget.context.pathChanged.connect(() => {\n      tracker.save(widget);\n    });\n\n    if (ft) {\n      widget.title.iconClass = ft.iconClass;\n      widget.title.iconLabel = ft.iconLabel;\n    }\n  });\n}\n\n/**\n * Export the plugins as default.\n */\nconst plugins: JupyterLabPlugin<any>[] = [csv, tsv];\nexport default plugins;\n"]}