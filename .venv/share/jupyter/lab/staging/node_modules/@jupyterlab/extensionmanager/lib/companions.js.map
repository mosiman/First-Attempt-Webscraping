{"version":3,"file":"companions.js","sourceRoot":"","sources":["../../../../extensionmanager/src/companions.tsx"],"names":[],"mappings":";AAAA,0CAA0C;AAC1C,2DAA2D;;;;;;;;;AAE3D,mDAA0D;AAI1D,6CAA+B;AA2F/B;;;;GAIG;AACH,2BACE,gBAAmC,EACnC,eAAyC;IAEzC,IAAI,OAAO,GAAG,EAAE,CAAC;IACjB,IAAI,eAAe,EAAE;QACnB,OAAO,CAAC,IAAI,CACV;;YAGE;;gBAAQ,eAAe,CAAC,IAAI,CAAC,IAAK,CAAQ,CACxC,CACL,CAAC;KACH;IACD,IAAI,gBAAgB,CAAC,MAAM,GAAG,CAAC,EAAE;QAC/B,OAAO,CAAC,IAAI,CACV,kHAGI,CACL,CAAC;QACF,KAAK,IAAI,KAAK,IAAI,gBAAgB,EAAE;YAClC,OAAO,CAAC,IAAI,CACV;;gBAEE,kCAAO,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,IAAK,CAAQ;0DAExC,CACL,CAAC;YACF,IAAI,aAAa,GAAG,EAAE,CAAC;YACvB,KAAK,IAAI,MAAM,IAAI,KAAK,CAAC,OAAO,EAAE;gBAChC,aAAa,CAAC,IAAI,CAChB;oBACE,kCAAO,MAAM,CAAC,YAAY,CAAQ,CAC/B,CACN,CAAC;aACH;YACD,OAAO,CAAC,IAAI,CAAC,gCAAK,aAAa,CAAM,CAAC,CAAC;SACxC;KACF;IACD,IAAI,IAAI,GAAG,CACT;QACG,OAAO;QACR,6LAII,CACA,CACP,CAAC;IACF,OAAO,qBAAU,CAAC;QAChB,KAAK,EAAE,mBAAmB;QAC1B,IAAI;QACJ,OAAO,EAAE;YACP,iBAAM,CAAC,YAAY,EAAE;YACrB,iBAAM,CAAC,QAAQ,CAAC;gBACd,KAAK,EAAE,IAAI;gBACX,OAAO,EAAE,mCAAmC;aAC7C,CAAC;SACH;KACF,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;QACf,OAAO,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC;IAC9B,CAAC,CAAC,CAAC;AACL,CAAC;AA/DD,8CA+DC","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { Dialog, showDialog } from '@jupyterlab/apputils';\n\nimport { Kernel } from '@jupyterlab/services';\n\nimport * as React from 'react';\n\n/**\n * An object representing a companion installation info.\n */\nexport interface IInstallInfoEntry {\n  /**\n   * The name of the companion package/module.\n   */\n  name?: string;\n\n  /**\n   * Whether the package also includes the lab extension.\n   */\n  bundles_extension?: boolean;\n}\n\n/**\n * An object representing a server extension install info.\n */\nexport interface IInstallInfo {\n  /**\n   * The base/default install info.\n   */\n  base: IInstallInfoEntry;\n\n  /**\n   * Which package managers that have the package/module.\n   */\n  managers: string[];\n\n  /**\n   * Overrides of the base install info on a per-manager basis.\n   */\n  overrides?: { [key: string]: IInstallInfoEntry | undefined };\n}\n\n/**\n * An object representing a kernel companion install info.\n */\nexport interface IKernelInstallInfo extends IInstallInfo {\n  /**\n   * A specification of which kernels the current install info applies to.\n   */\n  kernel_spec: {\n    /**\n     * A regular expression for matching kernel language.\n     */\n    language: string;\n\n    /**\n     * A regular expression for matching kernel display name.\n     */\n    display_name?: string;\n  };\n}\n\n/**\n * An object combining a kernel companion install info with matching specs.\n */\nexport type KernelCompanion = {\n  /**\n   * The kernel companion install info.\n   */\n  kernelInfo: IKernelInstallInfo;\n\n  /**\n   * The kernels that match the install info.\n   */\n  kernels: Kernel.ISpecModel[];\n};\n\n/**\n * An object representing the companion discovery metadata in package.json.\n */\nexport interface IJupyterLabPackageData {\n  jupyterlab?: {\n    discovery?: {\n      /**\n       * Information about any server extension companions.\n       */\n      server?: IInstallInfo;\n\n      /**\n       * Information about any kernel companions.\n       */\n      kernel?: IKernelInstallInfo[];\n    };\n  };\n}\n\n/**\n * Prompt the user what do about companion packages, if present.\n *\n * @param builder the build manager\n */\nexport function presentCompanions(\n  kernelCompanions: KernelCompanion[],\n  serverCompanion: IInstallInfo | undefined\n): Promise<boolean> {\n  let entries = [];\n  if (serverCompanion) {\n    entries.push(\n      <p>\n        This package has indicated that it needs a corresponding server\n        extension:\n        <code> {serverCompanion.base.name!}</code>\n      </p>\n    );\n  }\n  if (kernelCompanions.length > 0) {\n    entries.push(\n      <p>\n        This package has indicated that it needs a corresponding package for the\n        kernel.\n      </p>\n    );\n    for (let entry of kernelCompanions) {\n      entries.push(\n        <p>\n          The package\n          <code>{entry.kernelInfo.base.name!}</code>, is required by the\n          following kernels:\n        </p>\n      );\n      let kernelEntries = [];\n      for (let kernel of entry.kernels) {\n        kernelEntries.push(\n          <li>\n            <code>{kernel.display_name}</code>\n          </li>\n        );\n      }\n      entries.push(<ul>{kernelEntries}</ul>);\n    }\n  }\n  let body = (\n    <div>\n      {entries}\n      <p>\n        You should make sure that the indicated packages are installed before\n        trying to use the extension. Do you want to continue with the extension\n        installation?\n      </p>\n    </div>\n  );\n  return showDialog({\n    title: 'Kernel companions',\n    body,\n    buttons: [\n      Dialog.cancelButton(),\n      Dialog.okButton({\n        label: 'OK',\n        caption: 'Install the Jupyterlab extension.'\n      })\n    ]\n  }).then(result => {\n    return result.button.accept;\n  });\n}\n"]}