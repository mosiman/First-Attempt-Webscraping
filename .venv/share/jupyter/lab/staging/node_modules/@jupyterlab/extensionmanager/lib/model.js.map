{"version":3,"file":"model.js","sourceRoot":"","sources":["../../../../extensionmanager/src/model.ts"],"names":[],"mappings":";AAAA,0CAA0C;AAC1C,2DAA2D;;;;;;;;;;;;;;;;;AAE3D,mDAAiD;AAEjD,mDAAgF;AAEhF,+CAAiC;AAEjC,iDAAyC;AAEzC,6CAIsB;AAEtB,qCAA8C;AAE9C,mCAAgE;AAiGhE;;GAEG;AACH,MAAM,kBAAkB,GAAG,oBAAoB,CAAC;AAOhD;;GAEG;AACH,eAAuB,SAAQ,oBAAS;IACtC,YAAY,cAA8B;QACxC,KAAK,EAAE,CAAC;QAucV;;WAEG;QACH,gBAAW,GAAkB,IAAI,CAAC;QAElC;;WAEG;QACH,0BAAqB,GAAkB,IAAI,CAAC;QAE5C;;WAEG;QACH,gBAAW,GAAY,KAAK,CAAC;QAE7B;;WAEG;QACH,gBAAW,GAAY,KAAK,CAAC;QAO7B;;WAEG;QACO,aAAQ,GAAG,IAAI,gBAAQ,EAAE,CAAC;QAO5B,WAAM,GAAW,EAAE,CAAC;QACpB,UAAK,GAAW,CAAC,CAAC;QAClB,gBAAW,GAAW,GAAG,CAAC;QAC1B,kBAAa,GAAW,CAAC,CAAC;QAI1B,oBAAe,GAAmB,EAAE,CAAC;QAhf3C,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;QACrB,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;QACxB,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,wBAAwB,GAAG,2BAAgB,CAAC,YAAY,EAAE,CAAC;IAClE,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,cAAc,CAAC,KAAa;QACjC,IAAI,CAAC,KAAK,CAAC,SAAS,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE;YAC7C,OAAO,KAAK,CAAC;SACd;QACD,OAAO,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC,iBAAiB,EAAE,KAAK,CAAC,cAAc,CAAC,CAAC;IAClE,CAAC;IAED;;OAEG;IACH,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IAED;;OAEG;IACH,IAAI,YAAY;QACd,OAAO,IAAI,CAAC,aAAa,CAAC;IAC5B,CAAC;IAED;;;;OAIG;IACa,qBAAqB,CACnC,GAA2B;;YAE3B,IAAI,OAAO,GAA8B,EAAE,CAAC;YAC5C,KAAK,IAAI,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,OAAO,EAAE;gBACnC,IAAI,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC;gBACtB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG;oBAClB,IAAI,EAAE,GAAG,CAAC,IAAI;oBACd,WAAW,EAAE,GAAG,CAAC,WAAW;oBAC5B,SAAS,EAAE,KAAK;oBAChB,OAAO,EAAE,KAAK;oBACd,MAAM,EAAE,IAAI;oBACZ,cAAc,EAAE,GAAG,CAAC,OAAO;oBAC3B,iBAAiB,EAAE,EAAE;iBACtB,CAAC;aACH;YACD,OAAO,OAAO,CAAC;QACjB,CAAC;KAAA;IAED;;;;OAIG;IACa,kBAAkB,CAChC,GAA+B;;YAE/B,MAAM,QAAQ,GAAG,EAAE,CAAC;YACpB,MAAM,OAAO,GAA8B,EAAE,CAAC;YAC9C,KAAK,IAAI,GAAG,IAAI,MAAM,GAAG,EAAE;gBACzB,QAAQ,CAAC,IAAI,CACX,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;oBACd,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG;wBAClB,IAAI,EAAE,GAAG,CAAC,IAAI;wBACd,WAAW,EAAE,GAAG,CAAC,WAAW;wBAC5B,SAAS,EAAE,GAAG,CAAC,SAAS,KAAK,KAAK;wBAClC,OAAO,EAAE,GAAG,CAAC,OAAO;wBACpB,MAAM,EAAE,GAAG,CAAC,MAAM;wBAClB,cAAc,EAAE,GAAG,CAAC,cAAc;wBAClC,iBAAiB,EAAE,GAAG,CAAC,iBAAiB;qBACzC,CAAC;gBACJ,CAAC,CAAC,CACH,CAAC;aACH;YACD,OAAO,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;gBACrC,OAAO,OAAO,CAAC;YACjB,CAAC,CAAC,CAAC;QACL,CAAC;KAAA;IAED;;;;OAIG;IACH,IAAI,KAAK;QACP,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IACD,IAAI,KAAK,CAAC,KAAa;QACrB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,MAAM,EAAE,CAAC;IAChB,CAAC;IAED;;;;;;;OAOG;IACH,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IACD,IAAI,IAAI,CAAC,KAAa;QACpB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,MAAM,EAAE,CAAC;IAChB,CAAC;IAED;;;;;;;OAOG;IACH,IAAI,UAAU;QACZ,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IACD,IAAI,UAAU,CAAC,KAAa;QAC1B,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QACzB,IAAI,CAAC,MAAM,EAAE,CAAC;IAChB,CAAC;IAED;;OAEG;IACH,IAAI,YAAY;QACd,OAAO,IAAI,CAAC,aAAa,CAAC;IAC5B,CAAC;IAED;;OAEG;IACO,cAAc,CACtB,gBAAgB,GAAG,KAAK;QAExB,MAAM,GAAG,GAAG,IAAI,GAAG,CACjB,kBAAkB,EAClB,IAAI,CAAC,wBAAwB,CAAC,OAAO,CACtC,CAAC;QACF,IAAI,gBAAgB,EAAE;YACpB,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;SACzC;QACD,MAAM,OAAO,GAAG,2BAAgB,CAAC,WAAW,CAC1C,GAAG,CAAC,QAAQ,EAAE,EACd,EAAE,EACF,IAAI,CAAC,wBAAwB,CAC9B,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;YAChB,WAAW,CAAC,QAAQ,CAAC,CAAC;YACtB,OAAO,QAAQ,CAAC,IAAI,EAAgC,CAAC;QACvD,CAAC,CAAC,CAAC;QACH,OAAO,CAAC,IAAI,CACV,GAAG,EAAE;YACH,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC;QACpC,CAAC,EACD,MAAM,CAAC,EAAE;YACP,IAAI,CAAC,qBAAqB,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;QACjD,CAAC,CACF,CAAC;QACF,OAAO,OAAO,CAAC;IACjB,CAAC;IAED;;OAEG;IACH,UAAU;QACR,IAAI,CAAC,MAAM,EAAE;aACV,IAAI,CAAC,GAAG,EAAE;YACT,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;YACxB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACpC,CAAC,CAAC;aACD,KAAK,CAAC,GAAG,EAAE;YACV,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;YACxB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;;;OAMG;IACa,MAAM,CAAC,gBAAgB,GAAG,KAAK;;YAC7C,IAAI,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CACzC,IAAI,CAAC,KAAK,EACV,IAAI,CAAC,IAAI,EACT,IAAI,CAAC,UAAU,CAChB,CAAC;YACF,IAAI,gBAAgB,GAAG,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC;YAC1D,IAAI,YAAY,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAC9C,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,CACtC,CAAC;YACF,IAAI,SAAS,CAAC;YACd,IAAI;gBACF,SAAS,GAAG,MAAM,gBAAgB,CAAC;gBACnC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;aACzB;YAAC,OAAO,MAAM,EAAE;gBACf,SAAS,GAAG,EAAE,CAAC;gBACf,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;aACtC;YACD,IAAI,SAAS,GAAa,EAAE,CAAC;YAC7B,KAAK,IAAI,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE;gBACzC,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC;aACnC;YACD,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;YAErD,IAAI,YAAY,GAAa,EAAE,CAAC;YAChC,KAAK,IAAI,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;gBACtC,IAAI,YAAY,CAAC,GAAG,CAAC,KAAK,SAAS,EAAE;oBACnC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;iBACnC;qBAAM;oBACL,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC;iBACtC;aACF;YACD,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;YAC3D,IAAI;gBACF,IAAI,CAAC,aAAa,GAAG,CAAC,MAAM,MAAM,CAAC,CAAC,KAAK,CAAC;aAC3C;YAAC,OAAO,KAAK,EAAE;gBACd,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;aACxB;YACD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACpC,CAAC;KAAA;IAED;;;;;OAKG;IACO,cAAc,CACtB,MAAc,EACd,KAAa;QAEb,MAAM,GAAG,GAAG,IAAI,GAAG,CACjB,kBAAkB,EAClB,IAAI,CAAC,wBAAwB,CAAC,OAAO,CACtC,CAAC;QACF,IAAI,OAAO,GAAgB;YACzB,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;gBACnB,GAAG,EAAE,MAAM;gBACX,cAAc,EAAE,KAAK,CAAC,IAAI;aAC3B,CAAC;SACH,CAAC;QACF,MAAM,SAAS,GAAG,2BAAgB,CAAC,WAAW,CAC5C,GAAG,CAAC,QAAQ,EAAE,EACd,OAAO,EACP,IAAI,CAAC,wBAAwB,CAC9B,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;YAChB,WAAW,CAAC,QAAQ,CAAC,CAAC;YACtB,IAAI,CAAC,iBAAiB,EAAE,CAAC;YACzB,OAAO,QAAQ,CAAC,IAAI,EAA2B,CAAC;QAClD,CAAC,CAAC,CAAC;QACH,SAAS,CAAC,IAAI,CACZ,GAAG,EAAE;YACH,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC;QACpC,CAAC,EACD,MAAM,CAAC,EAAE;YACP,IAAI,CAAC,qBAAqB,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;QACjD,CAAC,CACF,CAAC;QACF,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;QAClC,OAAO,SAAS,CAAC;IACnB,CAAC;IAED;;;;OAIG;IACO,iBAAiB,CAAC,OAAqB;QAC/C,oCAAoC;QACpC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAEnC,yCAAyC;QACzC,MAAM,MAAM,GAAG,GAAG,EAAE;YAClB,MAAM,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YAChD,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAClC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACpC,CAAC,CAAC;QACF,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAE7B,uBAAuB;QACvB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACpC,CAAC;IAED;;OAEG;IACH,iBAAiB;QACf,OAAO,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC;IACzC,CAAC;IAED;;;;OAIG;IACH,OAAO,CAAC,KAAa;QACnB,IAAI,KAAK,CAAC,SAAS,EAAE;YACnB,WAAW;YACX,OAAO,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;gBACvD,IAAI,IAAI,CAAC,MAAM,KAAK,IAAI,EAAE;oBACxB,2BAAkB,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;iBAC9C;gBACD,IAAI,CAAC,MAAM,EAAE,CAAC;YAChB,CAAC,CAAC,CAAC;SACJ;QACD,IAAI,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE;YACtD,IAAI,aAAa,EAAE;gBACjB,OAAO,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;oBACvD,IAAI,IAAI,CAAC,MAAM,KAAK,IAAI,EAAE;wBACxB,2BAAkB,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;qBAC9C;oBACD,IAAI,CAAC,MAAM,EAAE,CAAC;gBAChB,CAAC,CAAC,CAAC;aACJ;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;OAIG;IACH,SAAS,CAAC,KAAa;QACrB,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE;YACpB,MAAM,IAAI,KAAK,CAAC,oCAAoC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;SACnE;QACD,IAAI,CAAC,cAAc,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;YAClD,IAAI,CAAC,MAAM,EAAE,CAAC;QAChB,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,KAAa;QAClB,IAAI,KAAK,CAAC,OAAO,EAAE;YACjB,MAAM,IAAI,KAAK,CAAC,oBAAoB,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;SACnD;QACD,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;YAC/C,IAAI,CAAC,MAAM,EAAE,CAAC;QAChB,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;OAIG;IACH,OAAO,CAAC,KAAa;QACnB,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE;YAClB,MAAM,IAAI,KAAK,CAAC,qBAAqB,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;SACpD;QACD,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;YAChD,IAAI,CAAC,MAAM,EAAE,CAAC;QAChB,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;OAIG;IACH,sBAAsB,CAAC,KAAa;QAClC,OAAO,IAAI,CAAC,QAAQ;aACjB,gBAAgB,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,cAAc,CAAC;aAClD,IAAI,CAAC,IAAI,CAAC,EAAE;YACX,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE;gBAC3D,OAAO,IAAI,CAAC;aACb;YACD,IAAI,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC;YAC1C,IAAI,gBAAgB,GAAsB,EAAE,CAAC;YAC7C,IAAI,SAAS,CAAC,MAAM,EAAE;gBACpB,cAAc;gBACd,KAAK,IAAI,UAAU,IAAI,SAAS,CAAC,MAAM,EAAE;oBACvC,IAAI,OAAO,GAAG,UAAU,CAAC,UAAU,EAAE,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;oBAChE,gBAAgB,CAAC,IAAI,CAAC,EAAE,UAAU,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;iBACzD;aACF;YACD,IAAI,gBAAgB,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE;gBACpD,OAAO,IAAI,CAAC;aACb;YACD,OAAO,8BAAiB,CAAC,gBAAgB,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACH,iBAAiB;QACf,IAAI,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC;QAC1C,IAAI,OAAO,CAAC,WAAW,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;YAC5C,MAAM,SAAS,GAAG,OAAO,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;gBACpD,IAAI,QAAQ,CAAC,MAAM,KAAK,UAAU,EAAE;oBAClC,iCAAiC;oBACjC,6DAA6D;oBAC7D,OAAO,sBAAO,CAAC,OAAO,CAAC,CAAC;iBACzB;gBACD,IAAI,QAAQ,CAAC,MAAM,KAAK,QAAQ,EAAE;oBAChC,OAAO;iBACR;gBACD,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;oBACrB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;oBACxB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;iBACnC;YACH,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;SACnC;IACH,CAAC;IAED;;OAEG;IACH,YAAY;QACV,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;YACzB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;SACnC;QACD,MAAM,SAAS,GAAG,sBAAO,CAAC,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QACvD,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;IACpC,CAAC;IAED;;OAEG;IACH,yBAAyB;QACvB,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;YACzB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;SACnC;IACH,CAAC;IAED;;OAEG;IACH,gBAAgB;QACd,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAClC,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;IAClC,CAAC;CA6CF;AApfD,8BAofC;AAED;;;;;GAKG;AACH,oBACE,UAA8B,EAC9B,KAAgC;IAEhC,IAAI,CAAC,KAAK,EAAE;QACV,OAAO,EAAE,CAAC;KACX;IACD,IAAI,OAAO,GAAwB,EAAE,CAAC;IACtC,IAAI,MAAM,GAAkB,IAAI,CAAC;IACjC,IAAI,MAAM,GAAkB,IAAI,CAAC;IACjC,IAAI,UAAU,CAAC,WAAW,CAAC,QAAQ,EAAE;QACnC,MAAM,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;KACtD;IACD,IAAI,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE;QACvC,MAAM,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;KAC1D;IACD,KAAK,IAAI,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,EAAE;QAC9C,IAAI,IAAI,GAAG,KAAK,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;QAClC,IAAI,KAAK,GAAG,KAAK,CAAC;QAClB,IAAI,MAAM,EAAE;YACV,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SACpC;QACD,IAAI,CAAC,KAAK,IAAI,MAAM,EAAE;YACpB,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;SACxC;QACD,IAAI,KAAK,EAAE;YACT,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACnB,SAAS;SACV;KACF;IACD,OAAO,OAAO,CAAC;AACjB,CAAC;AAED;;;;GAIG;AACH,qBAAqB,QAAkB;IACrC,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;QAChB,MAAM,IAAI,KAAK,CAAC,GAAG,QAAQ,CAAC,MAAM,KAAK,QAAQ,CAAC,UAAU,GAAG,CAAC,CAAC;KAChE;IACD,OAAO,QAAQ,CAAC;AAClB,CAAC;AAED;;GAEG;AACH,IAAU,OAAO,CAoBhB;AApBD,WAAU,OAAO;IACf;;OAEG;IACH,oBAA2B,CAAS,EAAE,CAAS;QAC7C,IAAI,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,IAAI,EAAE;YACrB,OAAO,CAAC,CAAC;SACV;QAED,IAAI,KAAK,GAAG,oBAAY,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QACjC,IAAI,KAAK,GAAG,oBAAY,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QAEjC,IAAI,KAAK,KAAK,KAAK,EAAE;YACnB,OAAO,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;SACrC;aAAM,IAAI,KAAK,IAAI,CAAC,KAAK,EAAE;YAC1B,OAAO,CAAC,CAAC,CAAC;SACX;aAAM;YACL,OAAO,CAAC,CAAC;SACV;IACH,CAAC;IAfe,kBAAU,aAezB,CAAA;AACH,CAAC,EApBS,OAAO,KAAP,OAAO,QAoBhB","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { VDomModel } from '@jupyterlab/apputils';\n\nimport { ServerConnection, ServiceManager, Kernel } from '@jupyterlab/services';\n\nimport * as semver from 'semver';\n\nimport { doBuild } from './build-helper';\n\nimport {\n  presentCompanions,\n  IKernelInstallInfo,\n  KernelCompanion\n} from './companions';\n\nimport { reportInstallError } from './dialog';\n\nimport { Searcher, ISearchResult, isJupyterOrg } from './query';\n\n/**\n * Information about an extension.\n */\nexport interface IEntry {\n  /**\n   * The name of the extension.\n   */\n  name: string;\n\n  /**\n   * A short description of the extension.\n   */\n  description: string;\n\n  /**\n   * Whether the extension is currently installed.\n   */\n  installed: boolean;\n\n  /**\n   * Whether the extension is currently enabled.\n   */\n  enabled: boolean;\n\n  /**\n   * A flag indicating the status of an installed extension.\n   */\n  status: 'ok' | 'warning' | 'error' | 'deprecated' | null;\n\n  /**\n   * The latest version of the extension.\n   */\n  latest_version: string;\n\n  /**\n   * The installed version of the extension.\n   */\n  installed_version: string;\n}\n\n/**\n * Wire format for installed extensions.\n */\nexport interface IInstalledEntry {\n  /**\n   * The name of the extension.\n   */\n  name: string;\n\n  /**\n   * A short description of the extension.\n   */\n  description: string;\n\n  /**\n   * Whether the extension is currently installed.\n   */\n  installed?: boolean;\n\n  /**\n   * Whether the extension is currently enabled.\n   */\n  enabled: boolean;\n\n  /**\n   * The latest version of the extension.\n   */\n  latest_version: string;\n\n  /**\n   * The installed version of the extension.\n   */\n  installed_version: string;\n\n  /**\n   * A flag indicating the status of an installed extension.\n   */\n  status: 'ok' | 'warning' | 'error' | 'deprecated' | null;\n}\n\n/**\n * An object representing a server reply to performing an action.\n */\nexport interface IActionReply {\n  /**\n   * The status category of the reply.\n   */\n  status: 'ok' | 'warning' | 'error' | null;\n\n  /**\n   * An optional message when the status is not 'ok'.\n   */\n  message?: string;\n}\n\n/**\n * The server API path for querying/modifying installed extensions.\n */\nconst EXTENSION_API_PATH = 'lab/api/extensions';\n\n/**\n * Extension actions that the server API accepts\n */\nexport type Action = 'install' | 'uninstall' | 'enable' | 'disable';\n\n/**\n * Model for an extension list.\n */\nexport class ListModel extends VDomModel {\n  constructor(serviceManager: ServiceManager) {\n    super();\n    this._installed = [];\n    this._searchResult = [];\n    this.serviceManager = serviceManager;\n    this.serverConnectionSettings = ServerConnection.makeSettings();\n  }\n\n  /**\n   * Utility function to check whether an entry can be updated.\n   *\n   * @param entry The entry to check.\n   */\n  static entryHasUpdate(entry: IEntry): boolean {\n    if (!entry.installed || !entry.latest_version) {\n      return false;\n    }\n    return semver.lt(entry.installed_version, entry.latest_version);\n  }\n\n  /**\n   * A readonly array of the installed extensions.\n   */\n  get installed(): ReadonlyArray<IEntry> {\n    return this._installed;\n  }\n\n  /**\n   * A readonly array containing the latest search result\n   */\n  get searchResult(): ReadonlyArray<IEntry> {\n    return this._searchResult;\n  }\n\n  /**\n   * Translate search results from an npm repository query into entries.\n   *\n   * @param res Promise to an npm query result.\n   */\n  protected async translateSearchResult(\n    res: Promise<ISearchResult>\n  ): Promise<{ [key: string]: IEntry }> {\n    let entries: { [key: string]: IEntry } = {};\n    for (let obj of (await res).objects) {\n      let pkg = obj.package;\n      entries[pkg.name] = {\n        name: pkg.name,\n        description: pkg.description,\n        installed: false,\n        enabled: false,\n        status: null,\n        latest_version: pkg.version,\n        installed_version: ''\n      };\n    }\n    return entries;\n  }\n\n  /**\n   * Translate installed extensions information from the server into entries.\n   *\n   * @param res Promise to the server reply data.\n   */\n  protected async translateInstalled(\n    res: Promise<IInstalledEntry[]>\n  ): Promise<{ [key: string]: IEntry }> {\n    const promises = [];\n    const entries: { [key: string]: IEntry } = {};\n    for (let pkg of await res) {\n      promises.push(\n        res.then(info => {\n          entries[pkg.name] = {\n            name: pkg.name,\n            description: pkg.description,\n            installed: pkg.installed !== false,\n            enabled: pkg.enabled,\n            status: pkg.status,\n            latest_version: pkg.latest_version,\n            installed_version: pkg.installed_version\n          };\n        })\n      );\n    }\n    return Promise.all(promises).then(() => {\n      return entries;\n    });\n  }\n\n  /**\n   * The current NPM repository search query.\n   *\n   * Setting its value triggers a new search.\n   */\n  get query(): string {\n    return this._query;\n  }\n  set query(value: string) {\n    this._query = value;\n    this.update();\n  }\n\n  /**\n   * The current NPM repository search page.\n   *\n   * The npm repository search is paginated by the `pagination` attribute.\n   * The `page` value selects which page is used.\n   *\n   * Setting its value triggers a new search.\n   */\n  get page(): number {\n    return this._page;\n  }\n  set page(value: number) {\n    this._page = value;\n    this.update();\n  }\n\n  /**\n   * The NPM repository search pagination.\n   *\n   * The npm repository search is paginated by the `pagination` attribute.\n   * The `page` value selects which page is used.\n   *\n   * Setting its value triggers a new search.\n   */\n  get pagination(): number {\n    return this._pagination;\n  }\n  set pagination(value: number) {\n    this._pagination = value;\n    this.update();\n  }\n\n  /**\n   * The total number of results in the current search.\n   */\n  get totalEntries(): number {\n    return this._totalEntries;\n  }\n\n  /**\n   * Make a request to the server for info about its installed extensions.\n   */\n  protected fetchInstalled(\n    refreshInstalled = false\n  ): Promise<IInstalledEntry[]> {\n    const url = new URL(\n      EXTENSION_API_PATH,\n      this.serverConnectionSettings.baseUrl\n    );\n    if (refreshInstalled) {\n      url.searchParams.append('refresh', '1');\n    }\n    const request = ServerConnection.makeRequest(\n      url.toString(),\n      {},\n      this.serverConnectionSettings\n    ).then(response => {\n      handleError(response);\n      return response.json() as Promise<IInstalledEntry[]>;\n    });\n    request.then(\n      () => {\n        this.serverConnectionError = null;\n      },\n      reason => {\n        this.serverConnectionError = reason.toString();\n      }\n    );\n    return request;\n  }\n\n  /**\n   * Initialize the model.\n   */\n  initialize() {\n    this.update()\n      .then(() => {\n        this.initialized = true;\n        this.stateChanged.emit(undefined);\n      })\n      .catch(() => {\n        this.initialized = true;\n        this.stateChanged.emit(undefined);\n      });\n  }\n\n  /**\n   * Update the current model.\n   *\n   * This will query the NPM repository, and the notebook server.\n   *\n   * Emits the `stateChanged` signal on successful completion.\n   */\n  protected async update(refreshInstalled = false) {\n    let search = this.searcher.searchExtensions(\n      this.query,\n      this.page,\n      this.pagination\n    );\n    let searchMapPromise = this.translateSearchResult(search);\n    let installedMap = await this.translateInstalled(\n      this.fetchInstalled(refreshInstalled)\n    );\n    let searchMap;\n    try {\n      searchMap = await searchMapPromise;\n      this.searchError = null;\n    } catch (reason) {\n      searchMap = {};\n      this.searchError = reason.toString();\n    }\n    let installed: IEntry[] = [];\n    for (let key of Object.keys(installedMap)) {\n      installed.push(installedMap[key]);\n    }\n    this._installed = installed.sort(Private.comparator);\n\n    let searchResult: IEntry[] = [];\n    for (let key of Object.keys(searchMap)) {\n      if (installedMap[key] === undefined) {\n        searchResult.push(searchMap[key]);\n      } else {\n        searchResult.push(installedMap[key]);\n      }\n    }\n    this._searchResult = searchResult.sort(Private.comparator);\n    try {\n      this._totalEntries = (await search).total;\n    } catch (error) {\n      this._totalEntries = 0;\n    }\n    this.stateChanged.emit(undefined);\n  }\n\n  /**\n   * Send a request to the server to perform an action on an extension.\n   *\n   * @param action A valid action to perform.\n   * @param entry The extension to perform the action on.\n   */\n  protected _performAction(\n    action: string,\n    entry: IEntry\n  ): Promise<IActionReply> {\n    const url = new URL(\n      EXTENSION_API_PATH,\n      this.serverConnectionSettings.baseUrl\n    );\n    let request: RequestInit = {\n      method: 'POST',\n      body: JSON.stringify({\n        cmd: action,\n        extension_name: entry.name\n      })\n    };\n    const completed = ServerConnection.makeRequest(\n      url.toString(),\n      request,\n      this.serverConnectionSettings\n    ).then(response => {\n      handleError(response);\n      this.triggerBuildCheck();\n      return response.json() as Promise<IActionReply>;\n    });\n    completed.then(\n      () => {\n        this.serverConnectionError = null;\n      },\n      reason => {\n        this.serverConnectionError = reason.toString();\n      }\n    );\n    this._addPendingAction(completed);\n    return completed;\n  }\n\n  /**\n   * Add a pending action.\n   *\n   * @param pending A promise that resolves when the action is completed.\n   */\n  protected _addPendingAction(pending: Promise<any>): void {\n    // Add to pending actions collection\n    this._pendingActions.push(pending);\n\n    // Ensure action is removed when resolved\n    const remove = () => {\n      const i = this._pendingActions.indexOf(pending);\n      this._pendingActions.splice(i, 1);\n      this.stateChanged.emit(undefined);\n    };\n    pending.then(remove, remove);\n\n    // Signal changed state\n    this.stateChanged.emit(undefined);\n  }\n\n  /**\n   * Whether there are currently any actions pending.\n   */\n  hasPendingActions(): boolean {\n    return this._pendingActions.length > 0;\n  }\n\n  /**\n   * Install an extension.\n   *\n   * @param entry An entry indicating which extension to install.\n   */\n  install(entry: IEntry) {\n    if (entry.installed) {\n      // Updating\n      return this._performAction('install', entry).then(data => {\n        if (data.status !== 'ok') {\n          reportInstallError(entry.name, data.message);\n        }\n        this.update();\n      });\n    }\n    this.checkCompanionPackages(entry).then(shouldInstall => {\n      if (shouldInstall) {\n        return this._performAction('install', entry).then(data => {\n          if (data.status !== 'ok') {\n            reportInstallError(entry.name, data.message);\n          }\n          this.update();\n        });\n      }\n    });\n  }\n\n  /**\n   * Uninstall an extension.\n   *\n   * @param entry An entry indicating which extension to uninstall.\n   */\n  uninstall(entry: IEntry) {\n    if (!entry.installed) {\n      throw new Error(`Not installed, cannot uninstall: ${entry.name}`);\n    }\n    this._performAction('uninstall', entry).then(data => {\n      this.update();\n    });\n  }\n\n  /**\n   * Enable an extension.\n   *\n   * @param entry An entry indicating which extension to enable.\n   */\n  enable(entry: IEntry) {\n    if (entry.enabled) {\n      throw new Error(`Already enabled: ${entry.name}`);\n    }\n    this._performAction('enable', entry).then(data => {\n      this.update();\n    });\n  }\n\n  /**\n   * Disable an extension.\n   *\n   * @param entry An entry indicating which extension to disable.\n   */\n  disable(entry: IEntry) {\n    if (!entry.enabled) {\n      throw new Error(`Already disabled: ${entry.name}`);\n    }\n    this._performAction('disable', entry).then(data => {\n      this.update();\n    });\n  }\n\n  /**\n   * Check for companion packages in kernels or server.\n   *\n   * @param entry An entry indicating which extension to check.\n   */\n  checkCompanionPackages(entry: IEntry): Promise<boolean> {\n    return this.searcher\n      .fetchPackageData(entry.name, entry.latest_version)\n      .then(data => {\n        if (!data || !data.jupyterlab || !data.jupyterlab.discovery) {\n          return true;\n        }\n        let discovery = data.jupyterlab.discovery;\n        let kernelCompanions: KernelCompanion[] = [];\n        if (discovery.kernel) {\n          // match specs\n          for (let kernelInfo of discovery.kernel) {\n            let matches = matchSpecs(kernelInfo, this.serviceManager.specs);\n            kernelCompanions.push({ kernelInfo, kernels: matches });\n          }\n        }\n        if (kernelCompanions.length < 1 && !discovery.server) {\n          return true;\n        }\n        return presentCompanions(kernelCompanions, discovery.server);\n      });\n  }\n\n  /**\n   * Trigger a build check to incorporate actions taken.\n   */\n  triggerBuildCheck(): void {\n    let builder = this.serviceManager.builder;\n    if (builder.isAvailable && !this.promptBuild) {\n      const completed = builder.getStatus().then(response => {\n        if (response.status === 'building') {\n          // Piggy-back onto existing build\n          // TODO: Can this cause dialog collision on build completion?\n          return doBuild(builder);\n        }\n        if (response.status !== 'needed') {\n          return;\n        }\n        if (!this.promptBuild) {\n          this.promptBuild = true;\n          this.stateChanged.emit(undefined);\n        }\n      });\n      this._addPendingAction(completed);\n    }\n  }\n\n  /**\n   * Perform a build on the server\n   */\n  performBuild(): void {\n    if (this.promptBuild) {\n      this.promptBuild = false;\n      this.stateChanged.emit(undefined);\n    }\n    const completed = doBuild(this.serviceManager.builder);\n    this._addPendingAction(completed);\n  }\n\n  /**\n   * Ignore a build recommendation\n   */\n  ignoreBuildRecommendation(): void {\n    if (this.promptBuild) {\n      this.promptBuild = false;\n      this.stateChanged.emit(undefined);\n    }\n  }\n\n  /**\n   * Ignore a build recommendation\n   */\n  refreshInstalled(): void {\n    const refresh = this.update(true);\n    this._addPendingAction(refresh);\n  }\n\n  /**\n   * Contains an error message if an error occurred when updating the model.\n   */\n  searchError: string | null = null;\n\n  /**\n   * Contains an error message if an error occurred when querying the server extension.\n   */\n  serverConnectionError: string | null = null;\n\n  /**\n   * Whether the model has finished async initialization.\n   */\n  initialized: boolean = false;\n\n  /**\n   * Whether a fresh build should be considered due to actions taken.\n   */\n  promptBuild: boolean = false;\n\n  /**\n   * Settings for connecting to the notebook server.\n   */\n  protected serverConnectionSettings: ServerConnection.ISettings;\n\n  /**\n   * A helper for performing searches of jupyterlab extensions on the NPM repository.\n   */\n  protected searcher = new Searcher();\n\n  /**\n   * The service manager to use for building.\n   */\n  protected serviceManager: ServiceManager;\n\n  private _query: string = '';\n  private _page: number = 0;\n  private _pagination: number = 250;\n  private _totalEntries: number = 0;\n\n  private _installed: IEntry[];\n  private _searchResult: IEntry[];\n  private _pendingActions: Promise<any>[] = [];\n}\n\n/**\n * Match kernel specs against kernel spec regexps\n *\n * @param kernelInfo The info containing the regexp patterns\n * @param specs The available kernel specs.\n */\nfunction matchSpecs(\n  kernelInfo: IKernelInstallInfo,\n  specs: Kernel.ISpecModels | null\n): Kernel.ISpecModel[] {\n  if (!specs) {\n    return [];\n  }\n  let matches: Kernel.ISpecModel[] = [];\n  let reLang: RegExp | null = null;\n  let reName: RegExp | null = null;\n  if (kernelInfo.kernel_spec.language) {\n    reLang = new RegExp(kernelInfo.kernel_spec.language);\n  }\n  if (kernelInfo.kernel_spec.display_name) {\n    reName = new RegExp(kernelInfo.kernel_spec.display_name);\n  }\n  for (let key of Object.keys(specs.kernelspecs)) {\n    let spec = specs.kernelspecs[key];\n    let match = false;\n    if (reLang) {\n      match = reLang.test(spec.language);\n    }\n    if (!match && reName) {\n      match = reName.test(spec.display_name);\n    }\n    if (match) {\n      matches.push(spec);\n      continue;\n    }\n  }\n  return matches;\n}\n\n/**\n * Convert a response to an exception on error.\n *\n * @param response The response to inspect.\n */\nfunction handleError(response: Response): Response {\n  if (!response.ok) {\n    throw new Error(`${response.status} (${response.statusText})`);\n  }\n  return response;\n}\n\n/**\n * A namespace for private functionality.\n */\nnamespace Private {\n  /**\n   * A comparator function that sorts whitelisted orgs to the top.\n   */\n  export function comparator(a: IEntry, b: IEntry): number {\n    if (a.name === b.name) {\n      return 0;\n    }\n\n    let testA = isJupyterOrg(a.name);\n    let testB = isJupyterOrg(b.name);\n\n    if (testA === testB) {\n      return a.name.localeCompare(b.name);\n    } else if (testA && !testB) {\n      return -1;\n    } else {\n      return 1;\n    }\n  }\n}\n"]}