{"version":3,"file":"widget.js","sourceRoot":"","sources":["../../../../extensionmanager/src/widget.tsx"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { VDomRenderer } from '@jupyterlab/apputils';\n\nimport { ServiceManager } from '@jupyterlab/services';\n\nimport { Message } from '@phosphor/messaging';\n\nimport * as React from 'react';\n\nimport ReactPaginate from 'react-paginate';\n\nimport { ListModel, IEntry, Action } from './model';\n\nimport { isJupyterOrg } from './query';\n\n// TODO: Replace pagination with lazy loading of lower search results\n\n/**\n * Search bar VDOM component.\n */\nexport class SearchBar extends React.Component<\n  SearchBar.IProperties,\n  SearchBar.IState\n> {\n  constructor(props: SearchBar.IProperties) {\n    super(props);\n    this.state = {\n      value: ''\n    };\n  }\n\n  /**\n   * Render the list view using the virtual DOM.\n   */\n  render(): React.ReactElement<any> {\n    return (\n      <div className=\"jp-extensionmanager-search-bar\">\n        <div className=\"jp-extensionmanager-search-wrapper\">\n          <input\n            type=\"text\"\n            className=\"jp-extensionmanager-input\"\n            placeholder={this.props.placeholder}\n            onChange={this.handleChange.bind(this)}\n            value={this.state.value}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  /**\n   * Handler for search input changes.\n   */\n  handleChange(e: KeyboardEvent) {\n    let target = e.target as HTMLInputElement;\n    this.setState({\n      value: target.value\n    });\n  }\n}\n\n/**\n * The namespace for search bar statics.\n */\nexport namespace SearchBar {\n  /**\n   * React properties for search bar component.\n   */\n  export interface IProperties {\n    /**\n     * The placeholder string to use in the search bar input field when empty.\n     */\n    placeholder: string;\n  }\n\n  /**\n   * React state for search bar component.\n   */\n  export interface IState {\n    /**\n     * The value of the search bar input field.\n     */\n    value: string;\n  }\n}\n\n/**\n * Create a build prompt as a react element.\n *\n * @param props Configuration of the build prompt.\n */\nfunction BuildPrompt(props: BuildPrompt.IProperties): React.ReactElement<any> {\n  return (\n    <div className=\"jp-extensionmanager-buildprompt\">\n      <div className=\"jp-extensionmanager-buildmessage\">\n        A build is needed to include the latest changes\n      </div>\n      <button\n        className=\"jp-extensionmanager-rebuild\"\n        onClick={props.performBuild}\n      >\n        Rebuild\n      </button>\n      <button\n        className=\"jp-extensionmanager-ignorebuild\"\n        onClick={props.ignoreBuild}\n      >\n        Ignore\n      </button>\n    </div>\n  );\n}\n\n/**\n * The namespace for build prompt statics.\n */\nnamespace BuildPrompt {\n  /**\n   * Properties for build prompt react component.\n   */\n  export interface IProperties {\n    /**\n     * Callback for when a build is requested.\n     */\n    performBuild: () => void;\n\n    /**\n     * Callback for when a build notice is dismissed.\n     */\n    ignoreBuild: () => void;\n  }\n}\n\n/**\n * VDOM for visualizing an extension entry.\n */\nfunction ListEntry(props: ListEntry.IProperties): React.ReactElement<any> {\n  const { entry } = props;\n  const flagClasses = [];\n  if (entry.installed) {\n    flagClasses.push('jp-extensionmanager-entry-installed');\n  }\n  if (entry.enabled) {\n    flagClasses.push('jp-extensionmanager-entry-enabled');\n  }\n  if (ListModel.entryHasUpdate(entry)) {\n    flagClasses.push('jp-extensionmanager-entry-update');\n  }\n  if (entry.status && ['ok', 'warning', 'error'].indexOf(entry.status) !== -1) {\n    flagClasses.push(`jp-extensionmanager-entry-${entry.status}`);\n  }\n  let title = entry.name;\n  if (isJupyterOrg(entry.name)) {\n    flagClasses.push(`jp-extensionmanager-entry-mod-whitelisted`);\n    title = `${entry.name} (Developed by Project Jupyter)`;\n  }\n  return (\n    <li\n      className={`jp-extensionmanager-entry ${flagClasses.join(' ')}`}\n      title={title}\n    >\n      <div className=\"jp-extensionmanager-entry-title\">\n        <div className=\"jp-extensionmanager-entry-name\">{entry.name}</div>\n        <div className=\"jp-extensionmanager-entry-jupyter-org\" />\n      </div>\n      <div className=\"jp-extensionmanager-entry-content\">\n        <div className=\"jp-extensionmanager-entry-description\">\n          {entry.description}\n        </div>\n        <div className=\"jp-extensionmanager-entry-buttons\">\n          <button\n            className=\"jp-extensionmanager-install\"\n            onClick={() => props.performAction('install', entry)}\n          >\n            Install\n          </button>\n          <button\n            className=\"jp-extensionmanager-update\"\n            // An install action will update the extension:\n            onClick={() => props.performAction('install', entry)}\n          >\n            Update\n          </button>\n          <button\n            className=\"jp-extensionmanager-uninstall\"\n            onClick={() => props.performAction('uninstall', entry)}\n          >\n            Uninstall\n          </button>\n          <button\n            className=\"jp-extensionmanager-enable\"\n            onClick={() => props.performAction('enable', entry)}\n          >\n            Enable\n          </button>\n          <button\n            className=\"jp-extensionmanager-disable\"\n            onClick={() => props.performAction('disable', entry)}\n          >\n            Disable\n          </button>\n        </div>\n      </div>\n    </li>\n  );\n}\n\n/**\n * The namespace for extension entry statics.\n */\nexport namespace ListEntry {\n  export interface IProperties {\n    /**\n     * The entry to visualize.\n     */\n    entry: IEntry;\n\n    /**\n     * Callback to use for performing an action on the entry.\n     */\n    performAction: (action: Action, entry: IEntry) => void;\n  }\n}\n\n/**\n * List view widget for extensions\n */\nexport function ListView(props: ListView.IProperties): React.ReactElement<any> {\n  const entryViews = [];\n  for (let entry of props.entries) {\n    entryViews.push(\n      <ListEntry\n        entry={entry}\n        key={entry.name}\n        performAction={props.performAction}\n      />\n    );\n  }\n  let pagination;\n  if (props.numPages > 1) {\n    pagination = (\n      <div className=\"jp-extensionmanager-pagination\">\n        <ReactPaginate\n          previousLabel={'<'}\n          nextLabel={'>'}\n          breakLabel={<a href=\"\">...</a>}\n          breakClassName={'break-me'}\n          pageCount={props.numPages}\n          marginPagesDisplayed={2}\n          pageRangeDisplayed={5}\n          onPageChange={(data: { selected: number }) =>\n            props.onPage(data.selected)\n          }\n          containerClassName={'pagination'}\n          activeClassName={'active'}\n        />\n      </div>\n    );\n  }\n  const listview = (\n    <ul className=\"jp-extensionmanager-listview\">{entryViews}</ul>\n  );\n  return (\n    <div className=\"jp-extensionmanager-listview-wrapper\">\n      {entryViews.length > 0 ? (\n        listview\n      ) : (\n        <div key=\"message\" className=\"jp-extensionmanager-listview-message\">\n          No entries\n        </div>\n      )}\n      {pagination}\n    </div>\n  );\n}\n\n/**\n * The namespace for list view widget statics.\n */\nexport namespace ListView {\n  export interface IProperties {\n    /**\n     * The extension entries to display.\n     */\n    entries: ReadonlyArray<IEntry>;\n\n    /**\n     * The number of pages that can be viewed via pagination.\n     */\n    numPages: number;\n\n    /**\n     * The callback to use for changing the page\n     */\n    onPage: (page: number) => void;\n\n    /**\n     * Callback to use for performing an action on an entry.\n     */\n    performAction: (action: Action, entry: IEntry) => void;\n  }\n}\n\n/**\n * The main view for the discovery extension.\n */\nexport class ExtensionView extends VDomRenderer<ListModel> {\n  constructor(serviceManager: ServiceManager) {\n    super();\n    this.model = new ListModel(serviceManager);\n    this.addClass('jp-extensionmanager-view');\n  }\n\n  /**\n   * The search input node.\n   */\n  get inputNode(): HTMLInputElement {\n    return this.node.getElementsByClassName(\n      'jp-extensionmanager-input'\n    )[0] as HTMLInputElement;\n  }\n\n  /**\n   * Render the extension view using the virtual DOM.\n   */\n  protected render(): React.ReactElement<any>[] {\n    const model = this.model!;\n    let pages = Math.ceil(model.totalEntries / model.pagination);\n    let elements = [<SearchBar key=\"searchbar\" placeholder=\"SEARCH\" />];\n    if (model.promptBuild) {\n      elements.push(\n        <BuildPrompt\n          key=\"buildpromt\"\n          performBuild={() => {\n            model.performBuild();\n          }}\n          ignoreBuild={() => {\n            model.ignoreBuildRecommendation();\n          }}\n        />\n      );\n    }\n    // Indicator element for pending actions:\n    elements.push(\n      <div\n        key=\"pending\"\n        className={`jp-extensionmanager-pending ${\n          model.hasPendingActions() ? 'jp-mod-hasPending' : ''\n        }`}\n      />\n    );\n    const content = [];\n    if (!model.initialized) {\n      model.initialize();\n      content.push(\n        <div key=\"loading-placeholder\" className=\"jp-extensionmanager-loader\">\n          Updating extensions list\n        </div>\n      );\n    } else if (!model.query && model.serverConnectionError !== null) {\n      content.push(\n        <div key=\"error-msg\" className=\"jp-extensionmanager-error\">\n          <p>\n            Error communicating with server extension. Consult the documentation\n            for how to ensure that it is enabled.\n          </p>\n\n          <p>Reason given:</p>\n          <pre>{model.serverConnectionError}</pre>\n        </div>\n      );\n    } else if (!model.query && model.installed.length) {\n      elements.push(\n        <header key=\"installed-header\">\n          Installed<button\n            className=\"jp-extensionmanager-refresh\"\n            onClick={() => {\n              model.refreshInstalled();\n            }}\n          >\n            &#8635;\n          </button>\n        </header>\n      );\n      content.push(\n        <ListView\n          key=\"installed\"\n          entries={model.installed}\n          numPages={1}\n          onPage={value => {\n            /* no-op */\n          }}\n          performAction={this.onAction.bind(this)}\n        />\n      );\n    } else if (model.searchError === null) {\n      elements.push(<header key=\"installable-header\">Search results</header>);\n      content.push(\n        <ListView\n          key=\"installable\"\n          entries={model.searchResult}\n          numPages={pages}\n          onPage={value => {\n            this.onPage(value);\n          }}\n          performAction={this.onAction.bind(this)}\n        />\n      );\n    } else {\n      content.push(\n        <div key=\"error-msg\" className=\"jp-extensionmanager-error\">\n          Error searching for extensions{model.searchError\n            ? `: ${model.searchError}`\n            : '.'}\n        </div>\n      );\n    }\n    elements.push(\n      <div key=\"content\" className=\"jp-extensionmanager-content\">\n        {content}\n      </div>\n    );\n    return elements;\n  }\n\n  /**\n   * Callback handler for the user specifies a new search query.\n   *\n   * @param value The new query.\n   */\n  onSearch(value: string) {\n    this.model!.query = value;\n  }\n\n  /**\n   * Callback handler for the user changes the page of the search result pagination.\n   *\n   * @param value The pagination page number.\n   */\n  onPage(value: number) {\n    this.model!.page = value;\n  }\n\n  /**\n   * Callback handler for when the user wants to perform an action on an extension.\n   *\n   * @param action The action to perform.\n   * @param entry The entry to perform the action on.\n   */\n  onAction(action: Action, entry: IEntry) {\n    switch (action) {\n      case 'install':\n        return this.model!.install(entry);\n      case 'uninstall':\n        return this.model!.uninstall(entry);\n      case 'enable':\n        return this.model!.enable(entry);\n      case 'disable':\n        return this.model!.disable(entry);\n      default:\n        throw new Error(`Invalid action: ${action}`);\n    }\n  }\n\n  /**\n   * Handle the DOM events for the command palette.\n   *\n   * @param event - The DOM event sent to the command palette.\n   *\n   * #### Notes\n   * This method implements the DOM `EventListener` interface and is\n   * called in response to events on the command palette's DOM node.\n   * It should not be called directly by user code.\n   */\n  handleEvent(event: Event): void {\n    switch (event.type) {\n      case 'input':\n        this.onSearch(this.inputNode.value);\n        break;\n      case 'focus':\n      case 'blur':\n        this._toggleFocused();\n        break;\n      default:\n        break;\n    }\n  }\n\n  /**\n   * A message handler invoked on a `'before-attach'` message.\n   */\n  protected onBeforeAttach(msg: Message): void {\n    this.node.addEventListener('input', this);\n    this.node.addEventListener('focus', this, true);\n    this.node.addEventListener('blur', this, true);\n  }\n\n  /**\n   * A message handler invoked on an `'after-detach'` message.\n   */\n  protected onAfterDetach(msg: Message): void {\n    this.node.removeEventListener('input', this);\n    this.node.removeEventListener('focus', this, true);\n    this.node.removeEventListener('blur', this, true);\n  }\n\n  /**\n   * A message handler invoked on an `'activate-request'` message.\n   */\n  protected onActivateRequest(msg: Message): void {\n    if (this.isAttached) {\n      let input = this.inputNode;\n      input.focus();\n      input.select();\n    }\n  }\n\n  /**\n   * Toggle the focused modifier based on the input node focus state.\n   */\n  private _toggleFocused(): void {\n    let focused = document.activeElement === this.inputNode;\n    this.toggleClass('p-mod-focused', focused);\n  }\n}\n"]}