{"version":3,"file":"query.js","sourceRoot":"","sources":["../../../../extensionmanager/src/query.ts"],"names":[],"mappings":";AAAA,0CAA0C;AAC1C,2DAA2D;;AA+M3D;;;;;GAKG;AACH;IACE;;;;;OAKG;IACH,YACE,OAAO,GAAG,6BAA6B,EACvC,MAAM,GAAG,mBAAmB;QAE5B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAED;;;;;;OAMG;IACH,gBAAgB,CACd,KAAa,EACb,IAAI,GAAG,CAAC,EACR,WAAW,GAAG,GAAG;QAEjB,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,cAAc,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAClD,yCAAyC;QACzC,IAAI,IAAI,GAAG,GAAG,KAAK,kCAAkC,CAAC;QACtD,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QACtC,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,MAAM,EAAE,WAAW,CAAC,QAAQ,EAAE,CAAC,CAAC;QACxD,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,WAAW,GAAG,IAAI,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;QACjE,OAAO,KAAK,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,QAAkB,EAAE,EAAE;YACvD,IAAI,QAAQ,CAAC,EAAE,EAAE;gBACf,OAAO,QAAQ,CAAC,IAAI,EAAE,CAAC;aACxB;YACD,OAAO,EAAE,CAAC;QACZ,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;;OAKG;IACH,gBAAgB,CACd,IAAY,EACZ,OAAe;QAEf,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,IAAI,IAAI,IAAI,OAAO,eAAe,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QACrE,OAAO,KAAK,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,QAAkB,EAAE,EAAE;YACvD,IAAI,QAAQ,CAAC,EAAE,EAAE;gBACf,OAAO,QAAQ,CAAC,IAAI,EAAE,CAAC;aACxB;YACD,OAAO,IAAI,CAAC;QACd,CAAC,CAAC,CAAC;IACL,CAAC;CAWF;AArED,4BAqEC;AAED;;GAEG;AACH,sBAA6B,IAAY;IACvC;;OAEG;IACH,MAAM,SAAS,GAAG,CAAC,YAAY,EAAE,iBAAiB,CAAC,CAAC;IACpD,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAC9B,MAAM,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;IACvB,OAAO,CACL,KAAK,CAAC,MAAM,GAAG,CAAC,IAAI,mBAAmB;QACvC,KAAK,IAAI,uBAAuB;QAChC,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,+BAA+B;QACnD,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,wBAAwB;KAClE,CAAC;AACJ,CAAC;AAbD,oCAaC","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { IJupyterLabPackageData } from './companions';\n\n/**\n * Information about a person in search results.\n */\nexport interface IPerson {\n  /**\n   * The username of the person.\n   */\n  username: string;\n\n  /**\n   * The email of the person.\n   */\n  email: string;\n}\n\n/**\n * NPM registry search result structure (subset).\n *\n * See https://github.com/npm/registry/blob/master/docs/REGISTRY-API.md\n * for full specification.\n */\nexport interface ISearchResult {\n  /**\n   * A collection of search results.\n   */\n  objects: {\n    /**\n     * Metadata about the found package.\n     */\n    package: {\n      /**\n       * The package name.\n       */\n      name: string;\n\n      /**\n       * The scope of the package (e.g. jupyterlab for @jupyterlab/services).\n       */\n      scope: string;\n\n      /**\n       * Version number.\n       */\n      version: string;\n\n      /**\n       * Description as listed in package.json.\n       */\n      description: string;\n\n      /**\n       * Package keywords.\n       */\n      keywords: string[];\n\n      /**\n       * Timestamp of release(?).\n       */\n      date: string;\n\n      /**\n       * Various metadata links for the package.\n       */\n      links: { [key: string]: string };\n\n      /**\n       * Metadata about user who published the release.\n       */\n      publisher: IPerson;\n\n      /**\n       * Maintainer list per package.json.\n       */\n      maintainers: IPerson[];\n    };\n\n    /**\n     * Flags about the package.\n     */\n    flags: {\n      /**\n       * Package is insecure or have vulnerable dependencies (based on the nsp registry).\n       */\n      insecure: number;\n\n      /**\n       * Package has a version < 1.0.0.\n       */\n      unstable: boolean;\n    };\n\n    /**\n     * Object detailing the normalized search score.\n     */\n    score: {\n      /**\n       * The final normalized search score.\n       */\n      final: number;\n\n      /**\n       * Break down of the search score.\n       */\n      detail: {\n        /**\n         * The normalized quality score.\n         */\n        quality: number;\n\n        /**\n         * The normalized popularity score.\n         */\n        popularity: number;\n\n        /**\n         * The normalized maintenance score.\n         */\n        maintenance: number;\n      };\n    };\n\n    /**\n     * The search score.\n     */\n    searchScore: number;\n  }[];\n\n  /**\n   * The total number of objects found by the search.\n   *\n   * This can be greater than the number of objects due\n   * to pagination of the search results.\n   */\n  total: number;\n\n  /**\n   * Timestamp of the search result creation.\n   */\n  time: string;\n}\n\n/**\n * An interface for a subset of the keys known to be included for package metadata.\n *\n * See https://github.com/npm/registry/blob/master/docs/responses/package-metadata.md\n * for full specification.\n */\nexport interface IPackageMetadata {\n  /**\n   * The package name.\n   */\n  name: string;\n\n  /**\n   * ISO string of the last time this package was modified.\n   */\n  modified: string;\n\n  /**\n   * A mapping of dist tags to the versions they point to.\n   */\n  'dist-tags': {\n    /**\n     * The version tagged as 'latest'.\n     */\n    latest: string;\n\n    [key: string]: string;\n  };\n\n  /**\n   * A short description of the package.\n   */\n  description: string;\n\n  /**\n   * A mapping of semver-compliant version numbers to version data.\n   */\n  versions: {\n    [key: string]: {\n      /**\n       * The package name.\n       */\n      name: string;\n\n      /**\n       * The version string for this version.\n       */\n      version: string;\n\n      /**\n       * The deprecation warnings message of this version.\n       */\n      deprecated?: string;\n\n      /**\n       * A short description of the package.\n       */\n      description: string;\n    };\n  };\n}\n\n/**\n * An object for searching an NPM registry.\n *\n * Searches the NPM registry via web API:\n * https://github.com/npm/registry/blob/master/docs/REGISTRY-API.md\n */\nexport class Searcher {\n  /**\n   * Create a Searcher object.\n   *\n   * @param repoUri The URI of the NPM registry to use.\n   * @param cdnUri The URI of the CDN to use for fetching full package data.\n   */\n  constructor(\n    repoUri = 'https://registry.npmjs.org/',\n    cdnUri = 'https://unpkg.com'\n  ) {\n    this.repoUri = repoUri;\n    this.cdnUri = cdnUri;\n  }\n\n  /**\n   * Search for a jupyterlab extension.\n   *\n   * @param query The query to send. `keywords:\"jupyterlab-extension\"` will be appended to the query.\n   * @param page The page of results to fetch.\n   * @param pageination The pagination size to use. See registry API documentation for acceptable values.\n   */\n  searchExtensions(\n    query: string,\n    page = 0,\n    pageination = 250\n  ): Promise<ISearchResult> {\n    const uri = new URL('/-/v1/search', this.repoUri);\n    // Note: Spaces are encoded to '+' signs!\n    let text = `${query} keywords:\"jupyterlab-extension\"`;\n    uri.searchParams.append('text', text);\n    uri.searchParams.append('size', pageination.toString());\n    uri.searchParams.append('from', (pageination * page).toString());\n    return fetch(uri.toString()).then((response: Response) => {\n      if (response.ok) {\n        return response.json();\n      }\n      return [];\n    });\n  }\n\n  /**\n   * Fetch package.json of a package\n   *\n   * @param name The package name.\n   * @param version The version of the package to fetch.\n   */\n  fetchPackageData(\n    name: string,\n    version: string\n  ): Promise<IJupyterLabPackageData | null> {\n    const uri = new URL(`/${name}@${version}/package.json`, this.cdnUri);\n    return fetch(uri.toString()).then((response: Response) => {\n      if (response.ok) {\n        return response.json();\n      }\n      return null;\n    });\n  }\n\n  /**\n   * The URI of the NPM registry to use.\n   */\n  repoUri: string;\n\n  /**\n   * The URI of the CDN to use for fetching full package data.\n   */\n  cdnUri: string;\n}\n\n/**\n * Check whether the NPM org is a Jupyter one.\n */\nexport function isJupyterOrg(name: string): boolean {\n  /**\n   * A list of whitelisted NPM orgs.\n   */\n  const whitelist = ['jupyterlab', 'jupyter-widgets'];\n  const parts = name.split('/');\n  const first = parts[0];\n  return (\n    parts.length > 1 && // Has a first part\n    first && // with a finite length\n    first[0] === '@' && // corresponding to an org name\n    whitelist.indexOf(first.slice(1)) !== -1 // in the org whitelist.\n  );\n}\n"]}