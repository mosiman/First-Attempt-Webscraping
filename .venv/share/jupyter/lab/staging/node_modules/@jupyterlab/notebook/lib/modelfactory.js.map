{"version":3,"file":"modelfactory.js","sourceRoot":"","sources":["../../../../notebook/src/modelfactory.ts"],"names":[],"mappings":";AAAA,0CAA0C;AAC1C,2DAA2D;;AAU3D,mCAAwD;AAExD;;GAEG;AACH;IAEE;;OAEG;IACH,YAAY,OAAsC;QAkE1C,cAAS,GAAG,KAAK,CAAC;QAjExB,IAAI,sBAAsB,GAAG,OAAO,CAAC,sBAAsB,CAAC;QAC5D,IAAI,CAAC,cAAc;YACjB,OAAO,CAAC,cAAc;gBACtB,IAAI,qBAAa,CAAC,cAAc,CAAC,EAAE,sBAAsB,EAAE,CAAC,CAAC;IACjE,CAAC;IAOD;;OAEG;IACH,IAAI,IAAI;QACN,OAAO,UAAU,CAAC;IACpB,CAAC;IAED;;OAEG;IACH,IAAI,WAAW;QACb,OAAO,UAAU,CAAC;IACpB,CAAC;IAED;;OAEG;IACH,IAAI,UAAU;QACZ,OAAO,MAAM,CAAC;IAChB,CAAC;IAED;;OAEG;IACH,IAAI,UAAU;QACZ,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAED;;OAEG;IACH,OAAO;QACL,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;IACxB,CAAC;IAED;;;;;;OAMG;IACH,SAAS,CAAC,kBAA2B,EAAE,OAAkB;QACvD,IAAI,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;QACzC,OAAO,IAAI,qBAAa,CAAC,EAAE,kBAAkB,EAAE,cAAc,EAAE,OAAO,EAAE,CAAC,CAAC;IAC5E,CAAC;IAED;;OAEG;IACH,iBAAiB,CAAC,IAAY;QAC5B,OAAO,EAAE,CAAC;IACZ,CAAC;CAGF;AAxED,oDAwEC","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { CodeCellModel } from '@jupyterlab/cells';\n\nimport { DocumentRegistry } from '@jupyterlab/docregistry';\n\nimport { IModelDB } from '@jupyterlab/observables';\n\nimport { Contents } from '@jupyterlab/services';\n\nimport { INotebookModel, NotebookModel } from './model';\n\n/**\n * A model factory for notebooks.\n */\nexport class NotebookModelFactory\n  implements DocumentRegistry.IModelFactory<INotebookModel> {\n  /**\n   * Construct a new notebook model factory.\n   */\n  constructor(options: NotebookModelFactory.IOptions) {\n    let codeCellContentFactory = options.codeCellContentFactory;\n    this.contentFactory =\n      options.contentFactory ||\n      new NotebookModel.ContentFactory({ codeCellContentFactory });\n  }\n\n  /**\n   * The content model factory used by the NotebookModelFactory.\n   */\n  readonly contentFactory: NotebookModel.IContentFactory;\n\n  /**\n   * The name of the model.\n   */\n  get name(): string {\n    return 'notebook';\n  }\n\n  /**\n   * The content type of the file.\n   */\n  get contentType(): Contents.ContentType {\n    return 'notebook';\n  }\n\n  /**\n   * The format of the file.\n   */\n  get fileFormat(): Contents.FileFormat {\n    return 'json';\n  }\n\n  /**\n   * Get whether the model factory has been disposed.\n   */\n  get isDisposed(): boolean {\n    return this._disposed;\n  }\n\n  /**\n   * Dispose of the model factory.\n   */\n  dispose(): void {\n    this._disposed = true;\n  }\n\n  /**\n   * Create a new model for a given path.\n   *\n   * @param languagePreference - An optional kernel language preference.\n   *\n   * @returns A new document model.\n   */\n  createNew(languagePreference?: string, modelDB?: IModelDB): INotebookModel {\n    let contentFactory = this.contentFactory;\n    return new NotebookModel({ languagePreference, contentFactory, modelDB });\n  }\n\n  /**\n   * Get the preferred kernel language given a path.\n   */\n  preferredLanguage(path: string): string {\n    return '';\n  }\n\n  private _disposed = false;\n}\n\n/**\n * The namespace for notebook model factory statics.\n */\nexport namespace NotebookModelFactory {\n  /**\n   * The options used to initialize a NotebookModelFactory.\n   */\n  export interface IOptions {\n    /**\n     * The factory for code cell content.\n     */\n    codeCellContentFactory?: CodeCellModel.IContentFactory;\n\n    /**\n     * The content factory used by the NotebookModelFactory.  If\n     * given, it will supersede the `codeCellContentFactory`.\n     */\n    contentFactory?: NotebookModel.IContentFactory;\n  }\n}\n"]}