{"version":3,"file":"widgetfactory.js","sourceRoot":"","sources":["../../../../notebook/src/widgetfactory.ts"],"names":[],"mappings":";AAAA,0CAA0C;AAC1C,2DAA2D;;AAI3D,yDAA6E;AAI7E,uDAAiD;AAIjD,mCAAwC;AAExC,qCAA0C;AAE1C;;GAEG;AACH,2BAAmC,SAAQ,8BAG1C;IACC;;;;OAIG;IACH,YAAY,OAAuC;QACjD,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;QACrC,IAAI,CAAC,cAAc;YACjB,OAAO,CAAC,cAAc,IAAI,qBAAa,CAAC,qBAAqB,CAAC;QAChE,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC,eAAe,CAAC;QAC/C,IAAI,CAAC,aAAa;YAChB,OAAO,CAAC,YAAY,IAAI,uBAAc,CAAC,mBAAmB,CAAC;IAC/D,CAAC;IAiBD;;OAEG;IACH,IAAI,YAAY;QACd,OAAO,IAAI,CAAC,aAAa,CAAC;IAC5B,CAAC;IACD,IAAI,YAAY,CAAC,KAAmC;QAClD,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;IAC7B,CAAC;IAED;;;;;;OAMG;IACO,eAAe,CACvB,OAAkD;QAElD,IAAI,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE,QAAQ,EAAE,OAAO,CAAC,WAAW,EAAE,CAAC,CAAC;QAE1E,IAAI,SAAS,GAAG;YACd,UAAU;YACV,cAAc,EAAE,IAAI,CAAC,cAAc;YACnC,eAAe,EAAE,IAAI,CAAC,eAAe;YACrC,YAAY,EAAE,IAAI,CAAC,aAAa;SACjC,CAAC;QACF,IAAI,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;QAE5D,IAAI,MAAM,GAAG,IAAI,qBAAa,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;QACrD,8BAAY,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;QACtC,OAAO,MAAM,CAAC;IAChB,CAAC;CAGF;AAtED,sDAsEC","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { IEditorMimeTypeService } from '@jupyterlab/codeeditor';\n\nimport { ABCWidgetFactory, DocumentRegistry } from '@jupyterlab/docregistry';\n\nimport { RenderMimeRegistry } from '@jupyterlab/rendermime';\n\nimport { ToolbarItems } from './default-toolbar';\n\nimport { INotebookModel } from './model';\n\nimport { NotebookPanel } from './panel';\n\nimport { StaticNotebook } from './widget';\n\n/**\n * A widget factory for notebook panels.\n */\nexport class NotebookWidgetFactory extends ABCWidgetFactory<\n  NotebookPanel,\n  INotebookModel\n> {\n  /**\n   * Construct a new notebook widget factory.\n   *\n   * @param options - The options used to construct the factory.\n   */\n  constructor(options: NotebookWidgetFactory.IOptions) {\n    super(options);\n    this.rendermime = options.rendermime;\n    this.contentFactory =\n      options.contentFactory || NotebookPanel.defaultContentFactory;\n    this.mimeTypeService = options.mimeTypeService;\n    this._editorConfig =\n      options.editorConfig || StaticNotebook.defaultEditorConfig;\n  }\n\n  /*\n   * The rendermime instance.\n   */\n  readonly rendermime: RenderMimeRegistry;\n\n  /**\n   * The content factory used by the widget factory.\n   */\n  readonly contentFactory: NotebookPanel.IContentFactory;\n\n  /**\n   * The service used to look up mime types.\n   */\n  readonly mimeTypeService: IEditorMimeTypeService;\n\n  /**\n   * A configuration object for cell editor settings.\n   */\n  get editorConfig(): StaticNotebook.IEditorConfig {\n    return this._editorConfig;\n  }\n  set editorConfig(value: StaticNotebook.IEditorConfig) {\n    this._editorConfig = value;\n  }\n\n  /**\n   * Create a new widget.\n   *\n   * #### Notes\n   * The factory will start the appropriate kernel and populate\n   * the default toolbar items using `ToolbarItems.populateDefaults`.\n   */\n  protected createNewWidget(\n    context: DocumentRegistry.IContext<INotebookModel>\n  ): NotebookPanel {\n    let rendermime = this.rendermime.clone({ resolver: context.urlResolver });\n\n    let nbOptions = {\n      rendermime,\n      contentFactory: this.contentFactory,\n      mimeTypeService: this.mimeTypeService,\n      editorConfig: this._editorConfig\n    };\n    let content = this.contentFactory.createNotebook(nbOptions);\n\n    let widget = new NotebookPanel({ context, content });\n    ToolbarItems.populateDefaults(widget);\n    return widget;\n  }\n\n  private _editorConfig: StaticNotebook.IEditorConfig;\n}\n\n/**\n * The namespace for `NotebookWidgetFactory` statics.\n */\nexport namespace NotebookWidgetFactory {\n  /**\n   * The options used to construct a `NotebookWidgetFactory`.\n   */\n  export interface IOptions extends DocumentRegistry.IWidgetFactoryOptions {\n    /*\n      * A rendermime instance.\n      */\n    rendermime: RenderMimeRegistry;\n\n    /**\n     * A notebook panel content factory.\n     */\n    contentFactory: NotebookPanel.IContentFactory;\n\n    /**\n     * The service used to look up mime types.\n     */\n    mimeTypeService: IEditorMimeTypeService;\n\n    /**\n     * The notebook cell editor configuration.\n     */\n    editorConfig?: StaticNotebook.IEditorConfig;\n  }\n}\n"]}