{"version":3,"file":"model.js","sourceRoot":"","sources":["../../../../notebook/src/model.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { DocumentModel, DocumentRegistry } from '@jupyterlab/docregistry';\n\nimport {\n  ICellModel,\n  ICodeCellModel,\n  IRawCellModel,\n  IMarkdownCellModel,\n  CodeCellModel,\n  RawCellModel,\n  MarkdownCellModel,\n  CellModel\n} from '@jupyterlab/cells';\n\nimport { nbformat } from '@jupyterlab/coreutils';\n\nimport { UUID } from '@phosphor/coreutils';\n\nimport {\n  IObservableJSON,\n  IObservableUndoableList,\n  IObservableList,\n  IModelDB\n} from '@jupyterlab/observables';\n\nimport { CellList } from './celllist';\n\n/**\n * The definition of a model object for a notebook widget.\n */\nexport interface INotebookModel extends DocumentRegistry.IModel {\n  /**\n   * The list of cells in the notebook.\n   */\n  readonly cells: IObservableUndoableList<ICellModel>;\n\n  /**\n   * The cell model factory for the notebook.\n   */\n  readonly contentFactory: NotebookModel.IContentFactory;\n\n  /**\n   * The major version number of the nbformat.\n   */\n  readonly nbformat: number;\n\n  /**\n   * The minor version number of the nbformat.\n   */\n  readonly nbformatMinor: number;\n\n  /**\n   * The metadata associated with the notebook.\n   */\n  readonly metadata: IObservableJSON;\n}\n\n/**\n * An implementation of a notebook Model.\n */\nexport class NotebookModel extends DocumentModel implements INotebookModel {\n  /**\n   * Construct a new notebook model.\n   */\n  constructor(options: NotebookModel.IOptions = {}) {\n    super(options.languagePreference, options.modelDB);\n    let factory = options.contentFactory || NotebookModel.defaultContentFactory;\n    this.contentFactory = factory.clone(this.modelDB.view('cells'));\n    this._cells = new CellList(this.modelDB, this.contentFactory);\n    // Add an initial code cell by default.\n    if (!this._cells.length) {\n      this._cells.push(factory.createCodeCell({}));\n    }\n    this._cells.changed.connect(this._onCellsChanged, this);\n\n    // Handle initial metadata.\n    let metadata = this.modelDB.createMap('metadata');\n    if (!metadata.has('language_info')) {\n      let name = options.languagePreference || '';\n      metadata.set('language_info', { name });\n    }\n    this._ensureMetadata();\n    metadata.changed.connect(this.triggerContentChange, this);\n  }\n\n  /**\n   * The cell model factory for the notebook.\n   */\n  readonly contentFactory: NotebookModel.IContentFactory;\n\n  /**\n   * The metadata associated with the notebook.\n   */\n  get metadata(): IObservableJSON {\n    return this.modelDB.get('metadata') as IObservableJSON;\n  }\n\n  /**\n   * Get the observable list of notebook cells.\n   */\n  get cells(): IObservableUndoableList<ICellModel> {\n    return this._cells;\n  }\n\n  /**\n   * The major version number of the nbformat.\n   */\n  get nbformat(): number {\n    return this._nbformat;\n  }\n\n  /**\n   * The minor version number of the nbformat.\n   */\n  get nbformatMinor(): number {\n    return this._nbformatMinor;\n  }\n\n  /**\n   * The default kernel name of the document.\n   */\n  get defaultKernelName(): string {\n    let spec = this.metadata.get('kernelspec') as nbformat.IKernelspecMetadata;\n    return spec ? spec.name : '';\n  }\n\n  /**\n   * The default kernel language of the document.\n   */\n  get defaultKernelLanguage(): string {\n    let info = this.metadata.get(\n      'language_info'\n    ) as nbformat.ILanguageInfoMetadata;\n    return info ? info.name : '';\n  }\n\n  /**\n   * Dispose of the resources held by the model.\n   */\n  dispose(): void {\n    // Do nothing if already disposed.\n    if (this.cells === null) {\n      return;\n    }\n    let cells = this.cells;\n    this._cells = null;\n    cells.dispose();\n    super.dispose();\n  }\n\n  /**\n   * Serialize the model to a string.\n   */\n  toString(): string {\n    return JSON.stringify(this.toJSON());\n  }\n\n  /**\n   * Deserialize the model from a string.\n   *\n   * #### Notes\n   * Should emit a [contentChanged] signal.\n   */\n  fromString(value: string): void {\n    this.fromJSON(JSON.parse(value));\n  }\n\n  /**\n   * Serialize the model to JSON.\n   */\n  toJSON(): nbformat.INotebookContent {\n    let cells: nbformat.ICell[] = [];\n    for (let i = 0; i < this.cells.length; i++) {\n      let cell = this.cells.get(i);\n      cells.push(cell.toJSON());\n    }\n    this._ensureMetadata();\n    let metadata = Object.create(null) as nbformat.INotebookMetadata;\n    for (let key of this.metadata.keys()) {\n      metadata[key] = JSON.parse(JSON.stringify(this.metadata.get(key)));\n    }\n    return {\n      metadata,\n      nbformat_minor: this._nbformatMinor,\n      nbformat: this._nbformat,\n      cells\n    };\n  }\n\n  /**\n   * Deserialize the model from JSON.\n   *\n   * #### Notes\n   * Should emit a [contentChanged] signal.\n   */\n  fromJSON(value: nbformat.INotebookContent): void {\n    let cells: ICellModel[] = [];\n    let factory = this.contentFactory;\n    for (let cell of value.cells) {\n      switch (cell.cell_type) {\n        case 'code':\n          cells.push(factory.createCodeCell({ cell }));\n          break;\n        case 'markdown':\n          cells.push(factory.createMarkdownCell({ cell }));\n          break;\n        case 'raw':\n          cells.push(factory.createRawCell({ cell }));\n          break;\n        default:\n          continue;\n      }\n    }\n    this.cells.beginCompoundOperation();\n    this.cells.clear();\n    this.cells.pushAll(cells);\n    this.cells.endCompoundOperation();\n\n    let oldValue = 0;\n    let newValue = 0;\n    this._nbformatMinor = nbformat.MINOR_VERSION;\n    this._nbformat = nbformat.MAJOR_VERSION;\n\n    if (value.nbformat !== this._nbformat) {\n      oldValue = this._nbformat;\n      this._nbformat = newValue = value.nbformat;\n      this.triggerStateChange({ name: 'nbformat', oldValue, newValue });\n    }\n    if (value.nbformat_minor > this._nbformatMinor) {\n      oldValue = this._nbformatMinor;\n      this._nbformatMinor = newValue = value.nbformat_minor;\n      this.triggerStateChange({ name: 'nbformatMinor', oldValue, newValue });\n    }\n    // Update the metadata.\n    this.metadata.clear();\n    let metadata = value.metadata;\n    for (let key in metadata) {\n      // orig_nbformat is not intended to be stored per spec.\n      if (key === 'orig_nbformat') {\n        continue;\n      }\n      this.metadata.set(key, metadata[key]);\n    }\n    this._ensureMetadata();\n    this.dirty = true;\n  }\n\n  /**\n   * Initialize the model with its current state.\n   */\n  initialize(): void {\n    super.initialize();\n    this.cells.clearUndo();\n  }\n\n  /**\n   * Handle a change in the cells list.\n   */\n  private _onCellsChanged(\n    list: IObservableList<ICellModel>,\n    change: IObservableList.IChangedArgs<ICellModel>\n  ): void {\n    switch (change.type) {\n      case 'add':\n        change.newValues.forEach(cell => {\n          cell.contentChanged.connect(this.triggerContentChange, this);\n        });\n        break;\n      case 'remove':\n        break;\n      case 'set':\n        change.newValues.forEach(cell => {\n          cell.contentChanged.connect(this.triggerContentChange, this);\n        });\n        break;\n      default:\n        break;\n    }\n    let factory = this.contentFactory;\n    // Add code cell if there are no cells remaining.\n    if (!this.cells.length) {\n      // Add the cell in a new context to avoid triggering another\n      // cell changed event during the handling of this signal.\n      requestAnimationFrame(() => {\n        if (!this.isDisposed && !this.cells.length) {\n          this.cells.push(factory.createCodeCell({}));\n        }\n      });\n    }\n    this.triggerContentChange();\n  }\n\n  /**\n   * Make sure we have the required metadata fields.\n   */\n  private _ensureMetadata(): void {\n    let metadata = this.metadata;\n    if (!metadata.has('language_info')) {\n      metadata.set('language_info', { name: '' });\n    }\n    if (!metadata.has('kernelspec')) {\n      metadata.set('kernelspec', { name: '', display_name: '' });\n    }\n  }\n\n  private _cells: CellList;\n  private _nbformat = nbformat.MAJOR_VERSION;\n  private _nbformatMinor = nbformat.MINOR_VERSION;\n}\n\n/**\n * The namespace for the `NotebookModel` class statics.\n */\nexport namespace NotebookModel {\n  /**\n   * An options object for initializing a notebook model.\n   */\n  export interface IOptions {\n    /**\n     * The language preference for the model.\n     */\n    languagePreference?: string;\n\n    /**\n     * A factory for creating cell models.\n     *\n     * The default is a shared factory instance.\n     */\n    contentFactory?: IContentFactory;\n\n    /**\n     * A modelDB for storing notebook data.\n     */\n    modelDB?: IModelDB;\n  }\n\n  /**\n   * A factory for creating notebook model content.\n   */\n  export interface IContentFactory {\n    /**\n     * The factory for output area models.\n     */\n    readonly codeCellContentFactory: CodeCellModel.IContentFactory;\n\n    /**\n     * The IModelDB in which to put data for the notebook model.\n     */\n    modelDB: IModelDB;\n\n    /**\n     * Create a new code cell.\n     *\n     * @param options - The options used to create the cell.\n     *\n     * @returns A new code cell. If a source cell is provided, the\n     *   new cell will be initialized with the data from the source.\n     */\n    createCodeCell(options: CodeCellModel.IOptions): ICodeCellModel;\n\n    /**\n     * Create a new markdown cell.\n     *\n     * @param options - The options used to create the cell.\n     *\n     * @returns A new markdown cell. If a source cell is provided, the\n     *   new cell will be initialized with the data from the source.\n     */\n    createMarkdownCell(options: CellModel.IOptions): IMarkdownCellModel;\n\n    /**\n     * Create a new raw cell.\n     *\n     * @param options - The options used to create the cell.\n     *\n     * @returns A new raw cell. If a source cell is provided, the\n     *   new cell will be initialized with the data from the source.\n     */\n    createRawCell(options: CellModel.IOptions): IRawCellModel;\n\n    /**\n     * Clone the content factory with a new IModelDB.\n     */\n    clone(modelDB: IModelDB): IContentFactory;\n  }\n\n  /**\n   * The default implementation of an `IContentFactory`.\n   */\n  export class ContentFactory {\n    /**\n     * Create a new cell model factory.\n     */\n    constructor(options: ContentFactory.IOptions) {\n      this.codeCellContentFactory =\n        options.codeCellContentFactory || CodeCellModel.defaultContentFactory;\n      this.modelDB = options.modelDB;\n    }\n\n    /**\n     * The factory for code cell content.\n     */\n    readonly codeCellContentFactory: CodeCellModel.IContentFactory;\n\n    /**\n     * The IModelDB in which to put the notebook data.\n     */\n    readonly modelDB: IModelDB | undefined;\n\n    /**\n     * Create a new code cell.\n     *\n     * @param source - The data to use for the original source data.\n     *\n     * @returns A new code cell. If a source cell is provided, the\n     *   new cell will be initialized with the data from the source.\n     *   If the contentFactory is not provided, the instance\n     *   `codeCellContentFactory` will be used.\n     */\n    createCodeCell(options: CodeCellModel.IOptions): ICodeCellModel {\n      if (options.contentFactory) {\n        options.contentFactory = this.codeCellContentFactory;\n      }\n      if (this.modelDB) {\n        if (!options.id) {\n          options.id = UUID.uuid4();\n        }\n        options.modelDB = this.modelDB.view(options.id);\n      }\n      return new CodeCellModel(options);\n    }\n\n    /**\n     * Create a new markdown cell.\n     *\n     * @param source - The data to use for the original source data.\n     *\n     * @returns A new markdown cell. If a source cell is provided, the\n     *   new cell will be initialized with the data from the source.\n     */\n    createMarkdownCell(options: CellModel.IOptions): IMarkdownCellModel {\n      if (this.modelDB) {\n        if (!options.id) {\n          options.id = UUID.uuid4();\n        }\n        options.modelDB = this.modelDB.view(options.id);\n      }\n      return new MarkdownCellModel(options);\n    }\n\n    /**\n     * Create a new raw cell.\n     *\n     * @param source - The data to use for the original source data.\n     *\n     * @returns A new raw cell. If a source cell is provided, the\n     *   new cell will be initialized with the data from the source.\n     */\n    createRawCell(options: CellModel.IOptions): IRawCellModel {\n      if (this.modelDB) {\n        if (!options.id) {\n          options.id = UUID.uuid4();\n        }\n        options.modelDB = this.modelDB.view(options.id);\n      }\n      return new RawCellModel(options);\n    }\n\n    /**\n     * Clone the content factory with a new IModelDB.\n     */\n    clone(modelDB: IModelDB): ContentFactory {\n      return new ContentFactory({\n        modelDB: modelDB,\n        codeCellContentFactory: this.codeCellContentFactory\n      });\n    }\n  }\n\n  /**\n   * A namespace for the notebook model content factory.\n   */\n  export namespace ContentFactory {\n    /**\n     * The options used to initialize a `ContentFactory`.\n     */\n    export interface IOptions {\n      /**\n       * The factory for code cell model content.\n       */\n      codeCellContentFactory?: CodeCellModel.IContentFactory;\n\n      /**\n       * The modelDB in which to place new content.\n       */\n      modelDB?: IModelDB;\n    }\n  }\n\n  /**\n   * The default `ContentFactory` instance.\n   */\n  export const defaultContentFactory = new ContentFactory({});\n}\n"]}