{"version":3,"file":"panel.js","sourceRoot":"","sources":["../../../../notebook/src/panel.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { Kernel, KernelMessage, Session } from '@jupyterlab/services';\n\nimport { Token } from '@phosphor/coreutils';\n\nimport { Message } from '@phosphor/messaging';\n\nimport { ISignal, Signal } from '@phosphor/signaling';\n\nimport { IClientSession } from '@jupyterlab/apputils';\n\nimport { DocumentWidget } from '@jupyterlab/docregistry';\n\nimport { RenderMimeRegistry } from '@jupyterlab/rendermime';\n\nimport { INotebookModel } from './model';\n\nimport { Notebook } from './widget';\n\n/**\n * The class name added to notebook panels.\n */\nconst NOTEBOOK_PANEL_CLASS = 'jp-NotebookPanel';\n\nconst NOTEBOOK_PANEL_TOOLBAR_CLASS = 'jp-NotebookPanel-toolbar';\n\nconst NOTEBOOK_PANEL_NOTEBOOK_CLASS = 'jp-NotebookPanel-notebook';\n\n/**\n * A widget that hosts a notebook toolbar and content area.\n *\n * #### Notes\n * The widget keeps the document metadata in sync with the current\n * kernel on the context.\n */\nexport class NotebookPanel extends DocumentWidget<Notebook, INotebookModel> {\n  /**\n   * Construct a new notebook panel.\n   */\n  constructor(options: DocumentWidget.IOptions<Notebook, INotebookModel>) {\n    super(options);\n\n    // Set up CSS classes\n    this.addClass(NOTEBOOK_PANEL_CLASS);\n    this.toolbar.addClass(NOTEBOOK_PANEL_TOOLBAR_CLASS);\n    this.content.addClass(NOTEBOOK_PANEL_NOTEBOOK_CLASS);\n\n    // Set up things related to the context\n    this.content.model = this.context.model;\n    this.context.session.kernelChanged.connect(this._onKernelChanged, this);\n\n    this.revealed.then(() => {\n      // Set the document edit mode on initial open if it looks like a new document.\n      if (this.content.widgets.length === 1) {\n        let cellModel = this.content.widgets[0].model;\n        if (cellModel.type === 'code' && cellModel.value.text === '') {\n          this.content.mode = 'edit';\n        }\n      }\n    });\n  }\n\n  /**\n   * A signal emitted when the panel has been activated.\n   */\n  get activated(): ISignal<this, void> {\n    return this._activated;\n  }\n\n  /**\n   * The client session used by the panel.\n   */\n  get session(): IClientSession {\n    return this.context.session;\n  }\n\n  /**\n   * The content factory for the notebook.\n   *\n   * TODO: deprecate this in favor of the .content attribute\n   *\n   */\n  get contentFactory(): Notebook.IContentFactory {\n    return this.content.contentFactory;\n  }\n\n  /**\n   * The rendermime instance for the notebook.\n   *\n   * TODO: deprecate this in favor of the .content attribute\n   *\n   */\n  get rendermime(): RenderMimeRegistry {\n    return this.content.rendermime;\n  }\n\n  /**\n   * The notebook used by the widget.\n   */\n  readonly content: Notebook;\n\n  /**\n   * The model for the widget.\n   */\n  get model(): INotebookModel {\n    return this.content ? this.content.model : null;\n  }\n\n  /**\n   * Dispose of the resources used by the widget.\n   */\n  dispose(): void {\n    this.content.dispose();\n    super.dispose();\n  }\n\n  /**\n   * Handle `'activate-request'` messages.\n   */\n  protected onActivateRequest(msg: Message): void {\n    super.onActivateRequest(msg);\n\n    // TODO: do we still need to emit this signal? Who is using it?\n    this._activated.emit(void 0);\n  }\n\n  /**\n   * Handle a change in the kernel by updating the document metadata.\n   */\n  private _onKernelChanged(\n    sender: any,\n    args: Session.IKernelChangedArgs\n  ): void {\n    if (!this.model || !args.newValue) {\n      return;\n    }\n    let { newValue } = args;\n    newValue.ready.then(() => {\n      if (this.model) {\n        this._updateLanguage(newValue.info.language_info);\n      }\n    });\n    this._updateSpec(newValue);\n  }\n\n  /**\n   * Update the kernel language.\n   */\n  private _updateLanguage(language: KernelMessage.ILanguageInfo): void {\n    this.model.metadata.set('language_info', language);\n  }\n\n  /**\n   * Update the kernel spec.\n   */\n  private _updateSpec(kernel: Kernel.IKernelConnection): void {\n    kernel.getSpec().then(spec => {\n      if (this.isDisposed) {\n        return;\n      }\n      this.model.metadata.set('kernelspec', {\n        name: kernel.name,\n        display_name: spec.display_name,\n        language: spec.language\n      });\n    });\n  }\n\n  private _activated = new Signal<this, void>(this);\n}\n\n/**\n * A namespace for `NotebookPanel` statics.\n */\nexport namespace NotebookPanel {\n  /**\n   * A content factory interface for NotebookPanel.\n   */\n  export interface IContentFactory extends Notebook.IContentFactory {\n    /**\n     * Create a new content area for the panel.\n     */\n    createNotebook(options: Notebook.IOptions): Notebook;\n  }\n\n  /**\n   * The default implementation of an `IContentFactory`.\n   */\n  export class ContentFactory extends Notebook.ContentFactory\n    implements IContentFactory {\n    /**\n     * Create a new content area for the panel.\n     */\n    createNotebook(options: Notebook.IOptions): Notebook {\n      return new Notebook(options);\n    }\n  }\n\n  /**\n   * Default content factory for the notebook panel.\n   */\n  export const defaultContentFactory: ContentFactory = new ContentFactory();\n\n  /* tslint:disable */\n  /**\n   * The notebook renderer token.\n   */\n  export const IContentFactory = new Token<IContentFactory>(\n    '@jupyterlab/notebook:IContentFactory'\n  );\n  /* tslint:enable */\n}\n"]}