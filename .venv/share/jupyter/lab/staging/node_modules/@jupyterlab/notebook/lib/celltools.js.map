{"version":3,"file":"celltools.js","sourceRoot":"","sources":["../../../../notebook/src/celltools.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { ArrayExt, each } from '@phosphor/algorithm';\n\nimport { JSONObject, JSONValue, Token } from '@phosphor/coreutils';\n\nimport { ConflatableMessage, Message, MessageLoop } from '@phosphor/messaging';\n\nimport { h, VirtualDOM, VirtualNode } from '@phosphor/virtualdom';\n\nimport { PanelLayout, Widget } from '@phosphor/widgets';\n\nimport { Styling } from '@jupyterlab/apputils';\n\nimport { Cell, ICellModel } from '@jupyterlab/cells';\n\nimport {\n  CodeEditor,\n  CodeEditorWrapper,\n  JSONEditor\n} from '@jupyterlab/codeeditor';\n\nimport { nbformat } from '@jupyterlab/coreutils';\n\nimport { IObservableMap, ObservableJSON } from '@jupyterlab/observables';\n\nimport { INotebookTracker } from './';\n\n/**\n * The class name added to a CellTools instance.\n */\nconst CELLTOOLS_CLASS = 'jp-CellTools';\n\n/**\n * The class name added to a CellTools tool.\n */\nconst CHILD_CLASS = 'jp-CellTools-tool';\n\n/**\n * The class name added to a CellTools active cell.\n */\nconst ACTIVE_CELL_CLASS = 'jp-ActiveCellTool';\n\n/**\n * The class name added to an Editor instance.\n */\nconst EDITOR_CLASS = 'jp-MetadataEditorTool';\n\n/**\n * The class name added to a KeySelector instance.\n */\nconst KEYSELECTOR_CLASS = 'jp-KeySelector';\n\n/* tslint:disable */\n/**\n * The main menu token.\n */\nexport const ICellTools = new Token<ICellTools>(\n  '@jupyterlab/notebook:ICellTools'\n);\n/* tslint:enable */\n\n/**\n * The interface for cell metadata tools.\n */\nexport interface ICellTools extends CellTools {}\n\n/**\n * A widget that provides cell metadata tools.\n */\nexport class CellTools extends Widget {\n  /**\n   * Construct a new CellTools object.\n   */\n  constructor(options: CellTools.IOptions) {\n    super();\n    this.addClass(CELLTOOLS_CLASS);\n    this.layout = new PanelLayout();\n    this._tracker = options.tracker;\n    this._tracker.activeCellChanged.connect(this._onActiveCellChanged, this);\n    this._tracker.selectionChanged.connect(this._onSelectionChanged, this);\n    this._onActiveCellChanged();\n    this._onSelectionChanged();\n  }\n\n  /**\n   * The active cell widget.\n   */\n  get activeCell(): Cell | null {\n    return this._tracker.activeCell;\n  }\n\n  /**\n   * The currently selected cells.\n   */\n  get selectedCells(): Cell[] {\n    let selected: Cell[] = [];\n    let panel = this._tracker.currentWidget;\n    if (!panel) {\n      return selected;\n    }\n    each(panel.content.widgets, widget => {\n      if (panel.content.isSelectedOrActive(widget)) {\n        selected.push(widget);\n      }\n    });\n    return selected;\n  }\n\n  /**\n   * Add a cell tool item.\n   */\n  addItem(options: CellTools.IAddOptions): void {\n    let tool = options.tool;\n    let rank = 'rank' in options ? options.rank : 100;\n    let rankItem = { tool, rank };\n    let index = ArrayExt.upperBound(this._items, rankItem, Private.itemCmp);\n\n    tool.addClass(CHILD_CLASS);\n\n    // Add the tool.\n    ArrayExt.insert(this._items, index, rankItem);\n    let layout = this.layout as PanelLayout;\n    layout.insertWidget(index, tool);\n\n    // Trigger the tool to update its active cell.\n    MessageLoop.sendMessage(tool, CellTools.ActiveCellMessage);\n  }\n\n  /**\n   * Handle the removal of a child\n   */\n  protected onChildRemoved(msg: Widget.ChildMessage): void {\n    let index = ArrayExt.findFirstIndex(\n      this._items,\n      item => item.tool === msg.child\n    );\n    if (index !== -1) {\n      ArrayExt.removeAt(this._items, index);\n    }\n  }\n\n  /**\n   * Handle a change to the active cell.\n   */\n  private _onActiveCellChanged(): void {\n    if (this._prevActive && !this._prevActive.isDisposed) {\n      this._prevActive.metadata.changed.disconnect(\n        this._onMetadataChanged,\n        this\n      );\n    }\n    let activeCell = this._tracker.activeCell;\n    this._prevActive = activeCell ? activeCell.model : null;\n    if (activeCell) {\n      activeCell.model.metadata.changed.connect(this._onMetadataChanged, this);\n    }\n    each(this.children(), widget => {\n      MessageLoop.sendMessage(widget, CellTools.ActiveCellMessage);\n    });\n  }\n\n  /**\n   * Handle a change in the selection.\n   */\n  private _onSelectionChanged(): void {\n    each(this.children(), widget => {\n      MessageLoop.sendMessage(widget, CellTools.SelectionMessage);\n    });\n  }\n\n  /**\n   * Handle a change in the metadata.\n   */\n  private _onMetadataChanged(\n    sender: IObservableMap<JSONValue>,\n    args: IObservableMap.IChangedArgs<JSONValue>\n  ): void {\n    let message = new ObservableJSON.ChangeMessage(args);\n    each(this.children(), widget => {\n      MessageLoop.sendMessage(widget, message);\n    });\n  }\n\n  private _items: Private.IRankItem[] = [];\n  private _tracker: INotebookTracker;\n  private _prevActive: ICellModel | null;\n}\n\n/**\n * The namespace for CellTools class statics.\n */\nexport namespace CellTools {\n  /**\n   * The options used to create a CellTools object.\n   */\n  export interface IOptions {\n    /**\n     * The notebook tracker used by the cell tools.\n     */\n    tracker: INotebookTracker;\n  }\n\n  /**\n   * The options used to add an item to the cell tools.\n   */\n  export interface IAddOptions {\n    /**\n     * The tool to add to the cell tools area.\n     */\n    tool: Tool;\n\n    /**\n     * The rank order of the widget among its siblings.\n     */\n    rank?: number;\n  }\n\n  /**\n   * A singleton conflatable `'activecell-changed'` message.\n   */\n  // tslint:disable-next-line\n  export const ActiveCellMessage = new ConflatableMessage('activecell-changed');\n\n  /**\n   * A singleton conflatable `'selection-changed'` message.\n   */\n  // tslint:disable-next-line\n  export const SelectionMessage = new ConflatableMessage('selection-changed');\n\n  /**\n   * The base cell tool, meant to be subclassed.\n   */\n  export class Tool extends Widget {\n    /**\n     * The cell tools object.\n     */\n    readonly parent: ICellTools;\n\n    /**\n     * Process a message sent to the widget.\n     *\n     * @param msg - The message sent to the widget.\n     */\n    processMessage(msg: Message): void {\n      super.processMessage(msg);\n      switch (msg.type) {\n        case 'activecell-changed':\n          this.onActiveCellChanged(msg);\n          break;\n        case 'selection-changed':\n          this.onSelectionChanged(msg);\n          break;\n        case 'jsonvalue-changed':\n          this.onMetadataChanged(msg as ObservableJSON.ChangeMessage);\n          break;\n        default:\n          break;\n      }\n    }\n\n    /**\n     * Handle a change to the active cell.\n     *\n     * #### Notes\n     * The default implementation is a no-op.\n     */\n    protected onActiveCellChanged(msg: Message): void {\n      /* no-op */\n    }\n\n    /**\n     * Handle a change to the selection.\n     *\n     * #### Notes\n     * The default implementation is a no-op.\n     */\n    protected onSelectionChanged(msg: Message): void {\n      /* no-op */\n    }\n\n    /**\n     * Handle a change to the metadata of the active cell.\n     *\n     * #### Notes\n     * The default implementation is a no-op.\n     */\n    protected onMetadataChanged(msg: ObservableJSON.ChangeMessage): void {\n      /* no-op */\n    }\n  }\n\n  /**\n   * A cell tool displaying the active cell contents.\n   */\n  export class ActiveCellTool extends Tool {\n    /**\n     * Construct a new active cell tool.\n     */\n    constructor() {\n      super();\n      this.addClass(ACTIVE_CELL_CLASS);\n      this.addClass('jp-InputArea');\n      this.layout = new PanelLayout();\n    }\n\n    /**\n     * Dispose of the resources used by the tool.\n     */\n    dispose() {\n      if (this._model === null) {\n        return;\n      }\n      this._model.dispose();\n      this._model = null;\n      super.dispose();\n    }\n\n    /**\n     * Handle a change to the active cell.\n     */\n    protected onActiveCellChanged(): void {\n      let activeCell = this.parent.activeCell;\n      let layout = this.layout as PanelLayout;\n      let count = layout.widgets.length;\n      for (let i = 0; i < count; i++) {\n        layout.widgets[0].dispose();\n      }\n      if (this._cellModel && !this._cellModel.isDisposed) {\n        this._cellModel.value.changed.disconnect(this._onValueChanged, this);\n        this._cellModel.mimeTypeChanged.disconnect(\n          this._onMimeTypeChanged,\n          this\n        );\n      }\n      if (!activeCell) {\n        let cell = new Widget();\n        cell.addClass('jp-InputArea-editor');\n        cell.addClass('jp-InputArea-editor');\n        layout.addWidget(cell);\n        this._cellModel = null;\n        return;\n      }\n      let promptNode = activeCell.promptNode\n        ? (activeCell.promptNode.cloneNode(true) as HTMLElement)\n        : null;\n      let prompt = new Widget({ node: promptNode });\n      let factory = activeCell.contentFactory.editorFactory;\n\n      let cellModel = (this._cellModel = activeCell.model);\n      cellModel.value.changed.connect(this._onValueChanged, this);\n      cellModel.mimeTypeChanged.connect(this._onMimeTypeChanged, this);\n      this._model.value.text = cellModel.value.text.split('\\n')[0];\n      this._model.mimeType = cellModel.mimeType;\n\n      let model = this._model;\n      let editorWidget = new CodeEditorWrapper({ model, factory });\n      editorWidget.addClass('jp-InputArea-editor');\n      editorWidget.addClass('jp-InputArea-editor');\n      editorWidget.editor.setOption('readOnly', true);\n      layout.addWidget(prompt);\n      layout.addWidget(editorWidget);\n    }\n\n    /**\n     * Handle a change to the current editor value.\n     */\n    private _onValueChanged(): void {\n      this._model.value.text = this._cellModel.value.text.split('\\n')[0];\n    }\n\n    /**\n     * Handle a change to the current editor mimetype.\n     */\n    private _onMimeTypeChanged(): void {\n      this._model.mimeType = this._cellModel.mimeType;\n    }\n\n    private _model = new CodeEditor.Model();\n    private _cellModel: CodeEditor.IModel;\n  }\n\n  /**\n   * A raw metadata editor.\n   */\n  export class MetadataEditorTool extends Tool {\n    /**\n     * Construct a new raw metadata tool.\n     */\n    constructor(options: MetadataEditorTool.IOptions) {\n      super();\n      let editorFactory = options.editorFactory;\n      this.addClass(EDITOR_CLASS);\n      let layout = (this.layout = new PanelLayout());\n      this.editor = new JSONEditor({\n        editorFactory,\n        title: 'Edit Metadata',\n        collapsible: true\n      });\n      layout.addWidget(this.editor);\n    }\n\n    /**\n     * The editor used by the tool.\n     */\n    readonly editor: JSONEditor;\n\n    /**\n     * Handle a change to the active cell.\n     */\n    protected onActiveCellChanged(msg: Message): void {\n      let cell = this.parent.activeCell;\n      this.editor.source = cell ? cell.model.metadata : null;\n    }\n  }\n\n  /**\n   * The namespace for `MetadataEditorTool` static data.\n   */\n  export namespace MetadataEditorTool {\n    /**\n     * The options used to initialize a metadata editor tool.\n     */\n    export interface IOptions {\n      /**\n       * The editor factory used by the tool.\n       */\n      editorFactory: CodeEditor.Factory;\n    }\n  }\n\n  /**\n   * A cell tool that provides a selection for a given metadata key.\n   */\n  export class KeySelector extends Tool {\n    /**\n     * Construct a new KeySelector.\n     */\n    constructor(options: KeySelector.IOptions) {\n      super({ node: Private.createSelectorNode(options) });\n      this.addClass(KEYSELECTOR_CLASS);\n      this.key = options.key;\n      this._validCellTypes = options.validCellTypes || [];\n      this._getter = options.getter || this._getValue;\n      this._setter = options.setter || this._setValue;\n    }\n\n    /**\n     * The metadata key used by the selector.\n     */\n    readonly key: string;\n\n    /**\n     * The select node for the widget.\n     */\n    get selectNode(): HTMLSelectElement {\n      return this.node.getElementsByTagName('select')[0] as HTMLSelectElement;\n    }\n\n    /**\n     * Handle the DOM events for the widget.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the notebook panel's node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event: Event): void {\n      switch (event.type) {\n        case 'change':\n          this.onValueChanged();\n          break;\n        default:\n          break;\n      }\n    }\n\n    /**\n     * Handle `after-attach` messages for the widget.\n     */\n    protected onAfterAttach(msg: Message): void {\n      let node = this.selectNode;\n      node.addEventListener('change', this);\n    }\n\n    /**\n     * Handle `before-detach` messages for the widget.\n     */\n    protected onBeforeDetach(msg: Message): void {\n      let node = this.selectNode;\n      node.removeEventListener('change', this);\n    }\n\n    /**\n     * Handle a change to the active cell.\n     */\n    protected onActiveCellChanged(msg: Message): void {\n      let select = this.selectNode;\n      let activeCell = this.parent.activeCell;\n      if (!activeCell) {\n        select.disabled = true;\n        select.value = '';\n        return;\n      }\n      let cellType = activeCell.model.type;\n      if (\n        this._validCellTypes.length &&\n        this._validCellTypes.indexOf(cellType) === -1\n      ) {\n        select.disabled = true;\n        return;\n      }\n      select.disabled = false;\n      this._changeGuard = true;\n      let getter = this._getter;\n      select.value = JSON.stringify(getter(activeCell));\n      this._changeGuard = false;\n    }\n\n    /**\n     * Handle a change to the metadata of the active cell.\n     */\n    protected onMetadataChanged(msg: ObservableJSON.ChangeMessage) {\n      if (this._changeGuard) {\n        return;\n      }\n      let select = this.selectNode;\n      let cell = this.parent.activeCell;\n      if (msg.args.key === this.key && cell) {\n        this._changeGuard = true;\n        let getter = this._getter;\n        select.value = JSON.stringify(getter(cell));\n        this._changeGuard = false;\n      }\n    }\n\n    /**\n     * Handle a change to the value.\n     */\n    protected onValueChanged(): void {\n      let activeCell = this.parent.activeCell;\n      if (!activeCell || this._changeGuard) {\n        return;\n      }\n      this._changeGuard = true;\n      let select = this.selectNode;\n      let setter = this._setter;\n      setter(activeCell, JSON.parse(select.value));\n      this._changeGuard = false;\n    }\n\n    /**\n     * Get the value for the data.\n     */\n    private _getValue = (cell: Cell) => {\n      return cell.model.metadata.get(this.key);\n    };\n\n    /**\n     * Set the value for the data.\n     */\n    private _setValue = (cell: Cell, value: JSONValue) => {\n      cell.model.metadata.set(this.key, value);\n    };\n\n    private _changeGuard = false;\n    private _validCellTypes: string[];\n    private _getter: (cell: Cell) => JSONValue;\n    private _setter: (cell: Cell, value: JSONValue) => void;\n  }\n\n  /**\n   * The namespace for `KeySelector` static data.\n   */\n  export namespace KeySelector {\n    /**\n     * The options used to initialize a keyselector.\n     */\n    export interface IOptions {\n      /**\n       * The metadata key of interest.\n       */\n      key: string;\n\n      /**\n       * The map of options to values.\n       */\n      optionsMap: { [key: string]: JSONValue };\n\n      /**\n       * The optional title of the selector - defaults to capitalized `key`.\n       */\n      title?: string;\n\n      /**\n       * The optional valid cell types - defaults to all valid types.\n       */\n      validCellTypes?: nbformat.CellType[];\n\n      /**\n       * An optional value getter for the selector.\n       *\n       * @param cell - The currently active cell.\n       *\n       * @returns The appropriate value for the selector.\n       */\n      getter?: (cell: Cell) => JSONValue;\n\n      /**\n       * An optional value setter for the selector.\n       *\n       * @param cell - The currently active cell.\n       *\n       * @param value - The value of the selector.\n       *\n       * #### Notes\n       * The setter should set the appropriate metadata value\n       * given the value of the selector.\n       */\n      setter?: (cell: Cell, value: JSONValue) => void;\n    }\n  }\n\n  /**\n   * Create a slideshow selector.\n   */\n  export function createSlideShowSelector(): KeySelector {\n    let options: KeySelector.IOptions = {\n      key: 'slideshow',\n      title: 'Slide Type',\n      optionsMap: {\n        '-': '-',\n        Slide: 'slide',\n        'Sub-Slide': 'subslide',\n        Fragment: 'fragment',\n        Skip: 'skip',\n        Notes: 'notes'\n      },\n      getter: cell => {\n        let value = cell.model.metadata.get('slideshow');\n        return value && (value as JSONObject)['slide_type'];\n      },\n      setter: (cell, value) => {\n        let data = cell.model.metadata.get('slideshow') || Object.create(null);\n        data = { ...data, slide_type: value };\n        cell.model.metadata.set('slideshow', data);\n      }\n    };\n    return new KeySelector(options);\n  }\n\n  /**\n   * Create an nbcovert selector.\n   */\n  export function createNBConvertSelector(): KeySelector {\n    return new KeySelector({\n      key: 'raw_mimetype',\n      title: 'Raw NBConvert Format',\n      optionsMap: {\n        None: '-',\n        LaTeX: 'text/latex',\n        reST: 'text/restructuredtext',\n        HTML: 'text/html',\n        Markdown: 'text/markdown',\n        Python: 'text/x-python'\n      },\n      validCellTypes: ['raw']\n    });\n  }\n}\n\n/**\n * A namespace for private data.\n */\nnamespace Private {\n  /**\n   * An object which holds a widget and its sort rank.\n   */\n  export interface IRankItem {\n    /**\n     * The widget for the item.\n     */\n    tool: CellTools.Tool;\n\n    /**\n     * The sort rank of the menu.\n     */\n    rank: number;\n  }\n\n  /**\n   * A comparator function for widget rank items.\n   */\n  export function itemCmp(first: IRankItem, second: IRankItem): number {\n    return first.rank - second.rank;\n  }\n\n  /**\n   * Create the node for a KeySelector.\n   */\n  export function createSelectorNode(\n    options: CellTools.KeySelector.IOptions\n  ): HTMLElement {\n    let name = options.key;\n    let title = options.title || name[0].toLocaleUpperCase() + name.slice(1);\n    let optionNodes: VirtualNode[] = [];\n    for (let label in options.optionsMap) {\n      let value = JSON.stringify(options.optionsMap[label]);\n      optionNodes.push(h.option({ value }, label));\n    }\n    let node = VirtualDOM.realize(\n      h.div({}, h.label(title), h.select({}, optionNodes))\n    );\n    Styling.styleNode(node);\n    return node;\n  }\n}\n"]}