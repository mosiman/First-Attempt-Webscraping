{"version":3,"file":"default-toolbar.js","sourceRoot":"","sources":["../../../../notebook/src/default-toolbar.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { Message } from '@phosphor/messaging';\n\nimport { Widget } from '@phosphor/widgets';\n\nimport { NotebookActions } from './actions';\n\nimport {\n  showDialog,\n  Dialog,\n  Styling,\n  Toolbar,\n  ToolbarButton\n} from '@jupyterlab/apputils';\n\nimport { nbformat } from '@jupyterlab/coreutils';\n\nimport { NotebookPanel } from './panel';\n\nimport { Notebook } from './widget';\n\n/**\n * The class name added to toolbar save button.\n */\nconst TOOLBAR_SAVE_CLASS = 'jp-SaveIcon';\n\n/**\n * The class name added to toolbar insert button.\n */\nconst TOOLBAR_INSERT_CLASS = 'jp-AddIcon';\n\n/**\n * The class name added to toolbar cut button.\n */\nconst TOOLBAR_CUT_CLASS = 'jp-CutIcon';\n\n/**\n * The class name added to toolbar copy button.\n */\nconst TOOLBAR_COPY_CLASS = 'jp-CopyIcon';\n\n/**\n * The class name added to toolbar paste button.\n */\nconst TOOLBAR_PASTE_CLASS = 'jp-PasteIcon';\n\n/**\n * The class name added to toolbar run button.\n */\nconst TOOLBAR_RUN_CLASS = 'jp-RunIcon';\n\n/**\n * The class name added to toolbar cell type dropdown wrapper.\n */\nconst TOOLBAR_CELLTYPE_CLASS = 'jp-Notebook-toolbarCellType';\n\n/**\n * The class name added to toolbar cell type dropdown.\n */\nconst TOOLBAR_CELLTYPE_DROPDOWN_CLASS = 'jp-Notebook-toolbarCellTypeDropdown';\n\n/**\n * A namespace for the default toolbar items.\n */\nexport namespace ToolbarItems {\n  /**\n   * Create save button toolbar item.\n   */\n  export function createSaveButton(panel: NotebookPanel): ToolbarButton {\n    return new ToolbarButton({\n      className: TOOLBAR_SAVE_CLASS,\n      onClick: () => {\n        if (panel.context.model.readOnly) {\n          return showDialog({\n            title: 'Cannot Save',\n            body: 'Document is read-only',\n            buttons: [Dialog.okButton()]\n          });\n        }\n        panel.context.save().then(() => {\n          if (!panel.isDisposed) {\n            return panel.context.createCheckpoint();\n          }\n        });\n      },\n      tooltip: 'Save the notebook contents and create checkpoint'\n    });\n  }\n\n  /**\n   * Create an insert toolbar item.\n   */\n  export function createInsertButton(panel: NotebookPanel): ToolbarButton {\n    return new ToolbarButton({\n      className: TOOLBAR_INSERT_CLASS,\n      onClick: () => {\n        NotebookActions.insertBelow(panel.content);\n      },\n      tooltip: 'Insert a cell below'\n    });\n  }\n\n  /**\n   * Create a cut toolbar item.\n   */\n  export function createCutButton(panel: NotebookPanel): ToolbarButton {\n    return new ToolbarButton({\n      className: TOOLBAR_CUT_CLASS,\n      onClick: () => {\n        NotebookActions.cut(panel.content);\n      },\n      tooltip: 'Cut the selected cells'\n    });\n  }\n\n  /**\n   * Create a copy toolbar item.\n   */\n  export function createCopyButton(panel: NotebookPanel): ToolbarButton {\n    return new ToolbarButton({\n      className: TOOLBAR_COPY_CLASS,\n      onClick: () => {\n        NotebookActions.copy(panel.content);\n      },\n      tooltip: 'Copy the selected cells'\n    });\n  }\n\n  /**\n   * Create a paste toolbar item.\n   */\n  export function createPasteButton(panel: NotebookPanel): ToolbarButton {\n    return new ToolbarButton({\n      className: TOOLBAR_PASTE_CLASS,\n      onClick: () => {\n        NotebookActions.paste(panel.content);\n      },\n      tooltip: 'Paste cells from the clipboard'\n    });\n  }\n\n  /**\n   * Create a run toolbar item.\n   */\n  export function createRunButton(panel: NotebookPanel): ToolbarButton {\n    return new ToolbarButton({\n      className: TOOLBAR_RUN_CLASS,\n      onClick: () => {\n        NotebookActions.runAndAdvance(panel.content, panel.session);\n      },\n      tooltip: 'Run the selected cells and advance'\n    });\n  }\n\n  /**\n   * Create a cell type switcher item.\n   *\n   * #### Notes\n   * It will display the type of the current active cell.\n   * If more than one cell is selected but are of different types,\n   * it will display `'-'`.\n   * When the user changes the cell type, it will change the\n   * cell types of the selected cells.\n   * It can handle a change to the context.\n   */\n  export function createCellTypeItem(panel: NotebookPanel): Widget {\n    return new CellTypeSwitcher(panel.content);\n  }\n\n  /**\n   * Add the default items to the panel toolbar.\n   */\n  export function populateDefaults(panel: NotebookPanel): void {\n    let toolbar = panel.toolbar;\n    toolbar.addItem('save', createSaveButton(panel));\n    toolbar.addItem('insert', createInsertButton(panel));\n    toolbar.addItem('cut', createCutButton(panel));\n    toolbar.addItem('copy', createCopyButton(panel));\n    toolbar.addItem('paste', createPasteButton(panel));\n    toolbar.addItem('run', createRunButton(panel));\n    toolbar.addItem('interrupt', Toolbar.createInterruptButton(panel.session));\n    toolbar.addItem('restart', Toolbar.createRestartButton(panel.session));\n    toolbar.addItem('cellType', createCellTypeItem(panel));\n    toolbar.addItem('spacer', Toolbar.createSpacerItem());\n    toolbar.addItem('kernelName', Toolbar.createKernelNameItem(panel.session));\n    toolbar.addItem(\n      'kernelStatus',\n      Toolbar.createKernelStatusItem(panel.session)\n    );\n  }\n}\n\n/**\n * A toolbar widget that switches cell types.\n */\nclass CellTypeSwitcher extends Widget {\n  /**\n   * Construct a new cell type switcher.\n   */\n  constructor(widget: Notebook) {\n    super({ node: createCellTypeSwitcherNode() });\n    this.addClass(TOOLBAR_CELLTYPE_CLASS);\n\n    this._select = this.node.firstChild as HTMLSelectElement;\n    Styling.wrapSelect(this._select);\n    this._wildCard = document.createElement('option');\n    this._wildCard.value = '-';\n    this._wildCard.textContent = '-';\n    this._notebook = widget;\n\n    // Set the initial value.\n    if (widget.model) {\n      this._updateValue();\n    }\n\n    // Follow the type of the active cell.\n    widget.activeCellChanged.connect(this._updateValue, this);\n\n    // Follow a change in the selection.\n    widget.selectionChanged.connect(this._updateValue, this);\n  }\n\n  /**\n   * Handle the DOM events for the widget.\n   *\n   * @param event - The DOM event sent to the widget.\n   *\n   * #### Notes\n   * This method implements the DOM `EventListener` interface and is\n   * called in response to events on the dock panel's node. It should\n   * not be called directly by user code.\n   */\n  handleEvent(event: Event): void {\n    switch (event.type) {\n      case 'change':\n        this._evtChange(event);\n        break;\n      case 'keydown':\n        this._evtKeyDown(event as KeyboardEvent);\n        break;\n      default:\n        break;\n    }\n  }\n\n  /**\n   * Handle `after-attach` messages for the widget.\n   */\n  protected onAfterAttach(msg: Message): void {\n    this._select.addEventListener('change', this);\n    this._select.addEventListener('keydown', this);\n  }\n\n  /**\n   * Handle `before-detach` messages for the widget.\n   */\n  protected onBeforeDetach(msg: Message): void {\n    this._select.removeEventListener('change', this);\n    this._select.removeEventListener('keydown', this);\n  }\n\n  /**\n   * Handle `changed` events for the widget.\n   */\n  private _evtChange(event: Event): void {\n    let select = this._select;\n    let widget = this._notebook;\n    if (select.value === '-') {\n      return;\n    }\n    if (!this._changeGuard) {\n      let value = select.value as nbformat.CellType;\n      NotebookActions.changeCellType(widget, value);\n      widget.activate();\n    }\n  }\n\n  /**\n   * Handle `keydown` events for the widget.\n   */\n  private _evtKeyDown(event: KeyboardEvent): void {\n    if (event.keyCode === 13) {\n      // Enter\n      this._notebook.activate();\n    }\n  }\n\n  /**\n   * Update the value of the dropdown from the widget state.\n   */\n  private _updateValue(): void {\n    let widget = this._notebook;\n    let select = this._select;\n    if (!widget.activeCell) {\n      return;\n    }\n    let mType: string = widget.activeCell.model.type;\n    for (let i = 0; i < widget.widgets.length; i++) {\n      let child = widget.widgets[i];\n      if (widget.isSelectedOrActive(child)) {\n        if (child.model.type !== mType) {\n          mType = '-';\n          select.appendChild(this._wildCard);\n          break;\n        }\n      }\n    }\n    if (mType !== '-') {\n      select.remove(3);\n    }\n    this._changeGuard = true;\n    select.value = mType;\n    this._changeGuard = false;\n  }\n\n  private _changeGuard = false;\n  private _wildCard: HTMLOptionElement = null;\n  private _select: HTMLSelectElement = null;\n  private _notebook: Notebook = null;\n}\n\n/**\n * Create the node for the cell type switcher.\n */\nfunction createCellTypeSwitcherNode(): HTMLElement {\n  let div = document.createElement('div');\n  let select = document.createElement('select');\n  for (let t of ['Code', 'Markdown', 'Raw']) {\n    let option = document.createElement('option');\n    option.value = t.toLowerCase();\n    option.textContent = t;\n    select.appendChild(option);\n  }\n  select.className = TOOLBAR_CELLTYPE_DROPDOWN_CLASS;\n  div.appendChild(select);\n  return div;\n}\n"]}