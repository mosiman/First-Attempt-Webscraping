{"version":3,"file":"toolbar.js","sourceRoot":"","sources":["../../../../apputils/src/toolbar.ts"],"names":[],"mappings":";AAAA,0CAA0C;AAC1C,2DAA2D;;AAE3D,mDAAiE;AAIjE,mDAA2D;AAE3D,qDAAwD;AAExD,+CAAwD;AAIxD,uCAAoC;AAEpC;;GAEG;AACH,MAAM,aAAa,GAAG,YAAY,CAAC;AAEnC;;GAEG;AACH,MAAM,kBAAkB,GAAG,iBAAiB,CAAC;AAE7C;;GAEG;AACH,MAAM,oBAAoB,GAAG,mBAAmB,CAAC;AAEjD;;GAEG;AACH,MAAM,uBAAuB,GAAG,aAAa,CAAC;AAE9C;;GAEG;AACH,MAAM,qBAAqB,GAAG,gBAAgB,CAAC;AAE/C;;GAEG;AACH,MAAM,yBAAyB,GAAG,uBAAuB,CAAC;AAE1D;;GAEG;AACH,MAAM,oBAAoB,GAAG,mBAAmB,CAAC;AAEjD;;GAEG;AACH,MAAM,2BAA2B,GAAG,yBAAyB,CAAC;AAE9D;;GAEG;AACH,MAAM,kBAAkB,GAAG,qBAAqB,CAAC;AAEjD,MAAM,kBAAkB,GAAG,eAAe,CAAC;AAE3C;;;;;;;GAOG;AACH,mBAAoB,SAAQ,qBAAW;IAAvC;;QA6GU,WAAM,GAAG,KAAK,CAAC;IACzB,CAAC;IA7GC;;;;;OAKG;IACO,YAAY,CAAC,GAAY;QACjC,KAAK,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;QACxB,IAAI,IAAI,CAAC,MAAO,CAAC,UAAU,EAAE;YAC3B,wEAAwE;YACxE,oBAAoB;YACpB,IAAI,gBAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE;gBACxC,IAAI,CAAC,MAAO,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,kCAAkC,CAAC;aACxE;iBAAM;gBACL,IAAI,CAAC,MAAO,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,EAAE,CAAC;aACxC;SACF;QAED,4DAA4D;QAC5D,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QAEnB,+DAA+D;QAC/D,gEAAgE;QAChE,IAAI,IAAI,CAAC,MAAO,CAAC,MAAM,EAAE;YACvB,uBAAW,CAAC,WAAW,CAAC,IAAI,CAAC,MAAO,CAAC,MAAO,EAAE,gBAAM,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;SACtE;QAED,8DAA8D;QAC9D,gEAAgE;QAChE,IAAI,IAAI,CAAC,MAAM,EAAE;YACf,uBAAW,CAAC,WAAW,CAAC,IAAI,CAAC,MAAO,EAAE,gBAAM,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;SACjE;IACH,CAAC;IAED;;OAEG;IACO,eAAe,CAAC,GAAY;QACpC,KAAK,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;QAC3B,IAAI,IAAI,CAAC,MAAO,CAAC,SAAS,EAAE;YAC1B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;SACrB;IACH,CAAC;IAED;;OAEG;IACO,YAAY,CAAC,GAAwB;QAC7C,KAAK,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;QAExB,4CAA4C;QAC5C,IAAI,CAAC,MAAO,CAAC,GAAG,EAAE,CAAC;IACrB,CAAC;IAED;;OAEG;IACO,aAAa,CAAC,GAAwB;QAC9C,KAAK,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;QAEzB,4CAA4C;QAC5C,IAAI,CAAC,MAAO,CAAC,GAAG,EAAE,CAAC;IACrB,CAAC;IAED;;OAEG;IACO,cAAc,CAAC,GAAY;QACnC,KAAK,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;QAE1B,4CAA4C;QAC5C,IAAI,CAAC,MAAO,CAAC,GAAG,EAAE,CAAC;IACrB,CAAC;IAED;;;;;;;;;OASG;IACO,YAAY,CAAC,KAAa,EAAE,MAAc;QAClD,KAAK,CAAC,YAAY,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QAElC,4CAA4C;QAC5C,IAAI,CAAC,MAAO,CAAC,GAAG,EAAE,CAAC;IACrB,CAAC;IAED;;;;;;;;;OASG;IACO,YAAY,CAAC,KAAa,EAAE,MAAc;QAClD,KAAK,CAAC,YAAY,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QAElC,4CAA4C;QAC5C,IAAI,CAAC,MAAO,CAAC,GAAG,EAAE,CAAC;IACrB,CAAC;CAGF;AAED;;GAEG;AACH,aAAgD,SAAQ,gBAAM;IAC5D;;OAEG;IACH;QACE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;QAC7B,IAAI,CAAC,MAAM,GAAG,IAAI,aAAa,EAAE,CAAC;IACpC,CAAC;IAED;;;;OAIG;IACH,KAAK;QACH,IAAI,MAAM,GAAG,IAAI,CAAC,MAAuB,CAAC;QAC1C,OAAO,eAAG,CAAC,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC,EAAE;YAClC,OAAO,OAAO,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;;;;;;;;;;;OAcG;IACH,OAAO,CAAC,IAAY,EAAE,MAAS;QAC7B,IAAI,MAAM,GAAG,IAAI,CAAC,MAAuB,CAAC;QAC1C,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;IAC9D,CAAC;IAED;;;;;;;;;;;;;;;OAeG;IACH,UAAU,CAAC,KAAa,EAAE,IAAY,EAAE,MAAS;QAC/C,IAAI,QAAQ,GAAG,gBAAI,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE,KAAK,CAAC,EAAE,CAAC,KAAK,KAAK,IAAI,CAAC,CAAC;QAC3D,IAAI,QAAQ,EAAE;YACZ,OAAO,KAAK,CAAC;SACd;QACD,MAAM,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAC;QACpC,IAAI,MAAM,GAAG,IAAI,CAAC,MAAuB,CAAC;QAC1C,MAAM,CAAC,YAAY,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QACnC,OAAO,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QACvC,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;;;;;;OASG;IACH,WAAW,CAAC,KAAY;QACtB,QAAQ,KAAK,CAAC,IAAI,EAAE;YAClB,KAAK,OAAO;gBACV,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,IAAI,CAAC,MAAM,EAAE;oBAC9D,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;iBACxB;gBACD,MAAM;YACR;gBACE,MAAM;SACT;IACH,CAAC;IAED;;OAEG;IACO,aAAa,CAAC,GAAY;QAClC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IAC5C,CAAC;IAED;;OAEG;IACO,cAAc,CAAC,GAAY;QACnC,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IAC/C,CAAC;CACF;AAzGD,0BAyGC;AAED;;GAEG;AACH,WAAiB,OAAO;IACtB;;;;;;;;OAQG;IACH,2BACE,QAAyB,EACzB,EAAU;QAEV,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC,EAAE;YAC5B,OAAO,IAAI,CAAC;SACb;QAED,MAAM,MAAM,GAAG,IAAI,aAAa,CAAC;YAC/B,OAAO,EAAE,GAAG,EAAE;gBACZ,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;gBACrB,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;YACrB,CAAC;YACD,SAAS,EAAE,OAAO,CAAC,gBAAgB,CAAC,QAAQ,EAAE,EAAE,CAAC;YACjD,OAAO,EAAE,OAAO,CAAC,cAAc,CAAC,QAAQ,EAAE,EAAE,CAAC;SAC9C,CAAC,CAAC;QACH,IAAI,UAAU,GAAG,OAAO,CAAC,gBAAgB,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAEnE,MAAM,CAAC,IAA0B,CAAC,QAAQ,GAAG,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;QACtE,OAAO,CAAC,yBAAyB,CAAC,MAAM,CAAC,IAAI,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC;QAE7D,0DAA0D;QAC1D,kBACE,MAAuB,EACvB,IAAyC;YAEzC,IAAI,IAAI,CAAC,EAAE,KAAK,EAAE,EAAE;gBAClB,OAAO,CAAC,kBAAkB;aAC3B;YAED,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS,EAAE;gBAC3B,oBAAoB;gBACpB,MAAM,CAAC,OAAO,EAAE,CAAC;gBACjB,OAAO;aACR;YAED,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS,EAAE;gBAC3B,OAAO;aACR;YAED,oDAAoD;YACpD,MAAM,UAAU,GAAG,OAAO,CAAC,gBAAgB,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAEpE,KAAK,IAAI,GAAG,IAAI,UAAU,EAAE;gBAC1B,IAAI,GAAG,IAAI,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;oBACzC,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;iBACzB;aACF;YACD,KAAK,IAAI,GAAG,IAAI,UAAU,EAAE;gBAC1B,IAAI,GAAG,IAAI,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;oBACzC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;iBACtB;aACF;YACD,UAAU,GAAG,UAAU,CAAC;YACxB,MAAM,CAAC,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,cAAc,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;YACvD,OAAO,CAAC,yBAAyB,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;YAC1D,MAAM,CAAC,IAA0B,CAAC,QAAQ,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;QACtE,CAAC;QACD,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QAElD,OAAO,MAAM,CAAC;IAChB,CAAC;IA7De,yBAAiB,oBA6DhC,CAAA;IAED;;OAEG;IACH,+BACE,OAAuB;QAEvB,OAAO,IAAI,aAAa,CAAC;YACvB,SAAS,EAAE,uBAAuB;YAClC,OAAO,EAAE,GAAG,EAAE;gBACZ,IAAI,OAAO,CAAC,MAAM,EAAE;oBAClB,OAAO,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC;iBAC5B;YACH,CAAC;YACD,OAAO,EAAE,sBAAsB;SAChC,CAAC,CAAC;IACL,CAAC;IAZe,6BAAqB,wBAYpC,CAAA;IAED;;OAEG;IACH,6BAAoC,OAAuB;QACzD,OAAO,IAAI,aAAa,CAAC;YACvB,SAAS,EAAE,qBAAqB;YAChC,OAAO,EAAE,GAAG,EAAE;gBACZ,OAAO,CAAC,OAAO,EAAE,CAAC;YACpB,CAAC;YACD,OAAO,EAAE,oBAAoB;SAC9B,CAAC,CAAC;IACL,CAAC;IARe,2BAAmB,sBAQlC,CAAA;IAED;;;;;;OAMG;IACH;QACE,OAAO,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;IAC9B,CAAC;IAFe,wBAAgB,mBAE/B,CAAA;IAED;;;;;;;OAOG;IACH,8BAAqC,OAAuB;QAC1D,OAAO,IAAI,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;IACzC,CAAC;IAFe,4BAAoB,uBAEnC,CAAA;IAED;;;;;;;;OAQG;IACH,gCAAuC,OAAuB;QAC5D,OAAO,IAAI,OAAO,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;IAC3C,CAAC;IAFe,8BAAsB,yBAErC,CAAA;AACH,CAAC,EA1IgB,OAAO,GAAP,eAAO,KAAP,eAAO,QA0IvB;AAED;;GAEG;AACH,mBAA2B,SAAQ,gBAAM;IACvC;;OAEG;IACH,YAAY,UAAkC,EAAE;QAC9C,KAAK,CAAC,EAAE,IAAI,EAAE,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QAClD,iBAAO,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QAC5C,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC,CAAC;QACpC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,OAAO,IAAI,OAAO,CAAC,IAAI,CAAC;QAEhD,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS;YAC/B,CAAC,CAAC,OAAO,CAAC,SAAS;iBACd,IAAI,EAAE;iBACN,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC;iBACvB,KAAK,CAAC,IAAI,CAAC;YAChB,CAAC,CAAC,IAAI,CAAC;QAET,IAAI,OAAO,EAAE;YACX,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;gBACrB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YACtB,CAAC,CAAC,CAAC;SACJ;QAED,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,OAAO,IAAI,EAAE,CAAC;IAC1C,CAAC;IAED;;;;;;;;;OASG;IACH,WAAW,CAAC,KAAY;QACtB,QAAQ,KAAK,CAAC,IAAI,EAAE;YAClB,KAAK,OAAO;gBACV,IAAK,KAAoB,CAAC,MAAM,KAAK,CAAC,EAAE;oBACtC,IAAI,CAAC,QAAQ,EAAE,CAAC;iBACjB;gBACD,MAAM;YACR;gBACE,MAAM;SACT;IACH,CAAC;IAED;;OAEG;IACO,aAAa,CAAC,GAAY;QAClC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IAC5C,CAAC;IAED;;OAEG;IACO,cAAc,CAAC,GAAY;QACnC,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IAC/C,CAAC;CAGF;AA/DD,sCA+DC;AA2BD;;GAEG;AACH,IAAU,OAAO,CAqIhB;AArID,WAAU,OAAO;IACf;;OAEG;IACU,oBAAY,GAAG,IAAI,6BAAgB,CAAiB;QAC/D,IAAI,EAAE,MAAM;QACZ,MAAM,EAAE,GAAG,EAAE,CAAC,EAAE;KACjB,CAAC,CAAC;IAEH;;OAEG;IACH,wBACE,QAAyB,EACzB,EAAU;QAEV,OAAO,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC9B,CAAC;IALe,sBAAc,iBAK7B,CAAA;IAED;;OAEG;IACH;QACE,WAAW;IACb,CAAC;IAFe,YAAI,OAEnB,CAAA;IAED;;OAEG;IACH,0BACE,QAAyB,EACzB,EAAU;QAEV,IAAI,IAAI,GAAG,QAAQ,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;QAClC,iCAAiC;QACjC,IAAI,QAAQ,CAAC,SAAS,CAAC,EAAE,CAAC,EAAE;YAC1B,IAAI,IAAI,gBAAgB,CAAC;SAC1B;QACD,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE,CAAC,EAAE;YAC3B,IAAI,IAAI,eAAe,CAAC;SACzB;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAbe,wBAAgB,mBAa/B,CAAA;IAED;;OAEG;IACH,mCACE,IAAiB,EACjB,QAAyB,EACzB,EAAU;QAEV,MAAM,SAAS,GAAG,QAAQ,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;QACzC,MAAM,SAAS,GAAG,QAAQ,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;QACzC,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QAEjC,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QACpB,IAAI,SAAS,EAAE;YACb,IAAI,CAAC,SAAS,IAAI,IAAI,SAAS,EAAE,CAAC;YAClC,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,SAAS,IAAI,KAAK,CAAC,CAAC;SAChD;aAAM;YACL,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;SACxB;IACH,CAAC;IAhBe,iCAAyB,4BAgBxC,CAAA;IAED;;OAEG;IACH,YAAoB,SAAQ,gBAAM;QAChC;;WAEG;QACH;YACE,KAAK,EAAE,CAAC;YACR,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC,CAAC;QACtC,CAAC;KACF;IARY,cAAM,SAQlB,CAAA;IAED;;OAEG;IACH,gBAAwB,SAAQ,aAAa;QAC3C;;WAEG;QACH,YAAY,OAAuB;YACjC,KAAK,CAAC;gBACJ,SAAS,EAAE,yBAAyB;gBACpC,OAAO,EAAE,GAAG,EAAE;oBACZ,OAAO,CAAC,YAAY,EAAE,CAAC;gBACzB,CAAC;gBACD,OAAO,EAAE,eAAe;aACzB,CAAC,CAAC;YACH,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;YAC/B,OAAO,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;QAC7D,CAAC;QAED;;WAEG;QACK,gBAAgB,CAAC,OAAuB;YAC9C,IAAI,CAAC,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,iBAAiB,CAAC;QACpD,CAAC;KACF;IAtBY,kBAAU,aAsBtB,CAAA;IAED;;OAEG;IACH,kBAA0B,SAAQ,gBAAM;QACtC;;WAEG;QACH,YAAY,OAAuB;YACjC,KAAK,EAAE,CAAC;YACR,IAAI,CAAC,QAAQ,CAAC,2BAA2B,CAAC,CAAC;YAC3C,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;YAC/B,OAAO,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;QAC7D,CAAC;QAED;;WAEG;QACK,gBAAgB,CAAC,OAAuB;YAC9C,IAAI,IAAI,CAAC,UAAU,EAAE;gBACnB,OAAO;aACR;YACD,IAAI,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;YAC5B,IAAI,CAAC,WAAW,CAAC,kBAAkB,EAAE,MAAM,KAAK,MAAM,CAAC,CAAC;YACxD,IAAI,CAAC,WAAW,CAAC,kBAAkB,EAAE,MAAM,KAAK,MAAM,CAAC,CAAC;YACxD,IAAI,KAAK,GAAG,SAAS,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAClE,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QAC1B,CAAC;KACF;IAxBY,oBAAY,eAwBxB,CAAA;AACH,CAAC,EArIS,OAAO,KAAP,OAAO,QAqIhB","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { IIterator, find, map, some } from '@phosphor/algorithm';\n\nimport { CommandRegistry } from '@phosphor/commands';\n\nimport { Message, MessageLoop } from '@phosphor/messaging';\n\nimport { AttachedProperty } from '@phosphor/properties';\n\nimport { PanelLayout, Widget } from '@phosphor/widgets';\n\nimport { IClientSession } from './clientsession';\n\nimport { Styling } from './styling';\n\n/**\n * The class name added to toolbars.\n */\nconst TOOLBAR_CLASS = 'jp-Toolbar';\n\n/**\n * The class name added to toolbar items.\n */\nconst TOOLBAR_ITEM_CLASS = 'jp-Toolbar-item';\n\n/**\n * The class name added to toolbar buttons.\n */\nconst TOOLBAR_BUTTON_CLASS = 'jp-Toolbar-button';\n\n/**\n * The class name added to toolbar interrupt button.\n */\nconst TOOLBAR_INTERRUPT_CLASS = 'jp-StopIcon';\n\n/**\n * The class name added to toolbar restart button.\n */\nconst TOOLBAR_RESTART_CLASS = 'jp-RefreshIcon';\n\n/**\n * The class name added to toolbar kernel name text.\n */\nconst TOOLBAR_KERNEL_NAME_CLASS = 'jp-Toolbar-kernelName';\n\n/**\n * The class name added to toolbar spacer.\n */\nconst TOOLBAR_SPACER_CLASS = 'jp-Toolbar-spacer';\n\n/**\n * The class name added to toolbar kernel status icon.\n */\nconst TOOLBAR_KERNEL_STATUS_CLASS = 'jp-Toolbar-kernelStatus';\n\n/**\n * The class name added to a busy kernel indicator.\n */\nconst TOOLBAR_BUSY_CLASS = 'jp-FilledCircleIcon';\n\nconst TOOLBAR_IDLE_CLASS = 'jp-CircleIcon';\n\n/**\n * A layout for toolbars.\n *\n * #### Notes\n * This layout automatically collapses its height if there are no visible\n * toolbar widgets, and expands to the standard toolbar height if there are\n * visible toolbar widgets.\n */\nclass ToolbarLayout extends PanelLayout {\n  /**\n   * A message handler invoked on a `'fit-request'` message.\n   *\n   * If any child widget is visible, expand the toolbar height to the normal\n   * toolbar height.\n   */\n  protected onFitRequest(msg: Message): void {\n    super.onFitRequest(msg);\n    if (this.parent!.isAttached) {\n      // If there are any widgets not explicitly hidden, expand the toolbar to\n      // accommodate them.\n      if (some(this.widgets, w => !w.isHidden)) {\n        this.parent!.node.style.minHeight = 'var(--jp-private-toolbar-height)';\n      } else {\n        this.parent!.node.style.minHeight = '';\n      }\n    }\n\n    // Set the dirty flag to ensure only a single update occurs.\n    this._dirty = true;\n\n    // Notify the ancestor that it should fit immediately. This may\n    // cause a resize of the parent, fulfilling the required update.\n    if (this.parent!.parent) {\n      MessageLoop.sendMessage(this.parent!.parent!, Widget.Msg.FitRequest);\n    }\n\n    // If the dirty flag is still set, the parent was not resized.\n    // Trigger the required update on the parent widget immediately.\n    if (this._dirty) {\n      MessageLoop.sendMessage(this.parent!, Widget.Msg.UpdateRequest);\n    }\n  }\n\n  /**\n   * A message handler invoked on an `'update-request'` message.\n   */\n  protected onUpdateRequest(msg: Message): void {\n    super.onUpdateRequest(msg);\n    if (this.parent!.isVisible) {\n      this._dirty = false;\n    }\n  }\n\n  /**\n   * A message handler invoked on a `'child-shown'` message.\n   */\n  protected onChildShown(msg: Widget.ChildMessage): void {\n    super.onChildShown(msg);\n\n    // Post a fit request for the parent widget.\n    this.parent!.fit();\n  }\n\n  /**\n   * A message handler invoked on a `'child-hidden'` message.\n   */\n  protected onChildHidden(msg: Widget.ChildMessage): void {\n    super.onChildHidden(msg);\n\n    // Post a fit request for the parent widget.\n    this.parent!.fit();\n  }\n\n  /**\n   * A message handler invoked on a `'before-attach'` message.\n   */\n  protected onBeforeAttach(msg: Message): void {\n    super.onBeforeAttach(msg);\n\n    // Post a fit request for the parent widget.\n    this.parent!.fit();\n  }\n\n  /**\n   * Attach a widget to the parent's DOM node.\n   *\n   * @param index - The current index of the widget in the layout.\n   *\n   * @param widget - The widget to attach to the parent.\n   *\n   * #### Notes\n   * This is a reimplementation of the superclass method.\n   */\n  protected attachWidget(index: number, widget: Widget): void {\n    super.attachWidget(index, widget);\n\n    // Post a fit request for the parent widget.\n    this.parent!.fit();\n  }\n\n  /**\n   * Detach a widget from the parent's DOM node.\n   *\n   * @param index - The previous index of the widget in the layout.\n   *\n   * @param widget - The widget to detach from the parent.\n   *\n   * #### Notes\n   * This is a reimplementation of the superclass method.\n   */\n  protected detachWidget(index: number, widget: Widget): void {\n    super.detachWidget(index, widget);\n\n    // Post a fit request for the parent widget.\n    this.parent!.fit();\n  }\n\n  private _dirty = false;\n}\n\n/**\n * A class which provides a toolbar widget.\n */\nexport class Toolbar<T extends Widget = Widget> extends Widget {\n  /**\n   * Construct a new toolbar widget.\n   */\n  constructor() {\n    super();\n    this.addClass(TOOLBAR_CLASS);\n    this.layout = new ToolbarLayout();\n  }\n\n  /**\n   * Get an iterator over the ordered toolbar item names.\n   *\n   * @returns An iterator over the toolbar item names.\n   */\n  names(): IIterator<string> {\n    let layout = this.layout as ToolbarLayout;\n    return map(layout.widgets, widget => {\n      return Private.nameProperty.get(widget);\n    });\n  }\n\n  /**\n   * Add an item to the end of the toolbar.\n   *\n   * @param name - The name of the widget to add to the toolbar.\n   *\n   * @param widget - The widget to add to the toolbar.\n   *\n   * @param index - The optional name of the item to insert after.\n   *\n   * @returns Whether the item was added to toolbar.  Returns false if\n   *   an item of the same name is already in the toolbar.\n   *\n   * #### Notes\n   * The item can be removed from the toolbar by setting its parent to `null`.\n   */\n  addItem(name: string, widget: T): boolean {\n    let layout = this.layout as ToolbarLayout;\n    return this.insertItem(layout.widgets.length, name, widget);\n  }\n\n  /**\n   * Insert an item into the toolbar at the specified index.\n   *\n   * @param index - The index at which to insert the item.\n   *\n   * @param name - The name of the item.\n   *\n   * @param widget - The widget to add.\n   *\n   * @returns Whether the item was added to the toolbar. Returns false if\n   *   an item of the same name is already in the toolbar.\n   *\n   * #### Notes\n   * The index will be clamped to the bounds of the items.\n   * The item can be removed from the toolbar by setting its parent to `null`.\n   */\n  insertItem(index: number, name: string, widget: T): boolean {\n    let existing = find(this.names(), value => value === name);\n    if (existing) {\n      return false;\n    }\n    widget.addClass(TOOLBAR_ITEM_CLASS);\n    let layout = this.layout as ToolbarLayout;\n    layout.insertWidget(index, widget);\n    Private.nameProperty.set(widget, name);\n    return true;\n  }\n\n  /**\n   * Handle the DOM events for the widget.\n   *\n   * @param event - The DOM event sent to the widget.\n   *\n   * #### Notes\n   * This method implements the DOM `EventListener` interface and is\n   * called in response to events on the dock panel's node. It should\n   * not be called directly by user code.\n   */\n  handleEvent(event: Event): void {\n    switch (event.type) {\n      case 'click':\n        if (!this.node.contains(document.activeElement) && this.parent) {\n          this.parent.activate();\n        }\n        break;\n      default:\n        break;\n    }\n  }\n\n  /**\n   * Handle `after-attach` messages for the widget.\n   */\n  protected onAfterAttach(msg: Message): void {\n    this.node.addEventListener('click', this);\n  }\n\n  /**\n   * Handle `before-detach` messages for the widget.\n   */\n  protected onBeforeDetach(msg: Message): void {\n    this.node.removeEventListener('click', this);\n  }\n}\n\n/**\n * The namespace for Toolbar class statics.\n */\nexport namespace Toolbar {\n  /**\n   * Create a toolbar item for a command or `null` if the command does not exist\n   * in the registry.\n   *\n   * Notes:\n   * If the command has an icon label it will be added to the button.\n   * If there is no icon label, and no icon class, the main label will\n   * be added.\n   */\n  export function createFromCommand(\n    commands: CommandRegistry,\n    id: string\n  ): ToolbarButton | null {\n    if (!commands.hasCommand(id)) {\n      return null;\n    }\n\n    const button = new ToolbarButton({\n      onClick: () => {\n        commands.execute(id);\n        button.node.blur();\n      },\n      className: Private.commandClassName(commands, id),\n      tooltip: Private.commandTooltip(commands, id)\n    });\n    let oldClasses = Private.commandClassName(commands, id).split(/\\s/);\n\n    (button.node as HTMLButtonElement).disabled = !commands.isEnabled(id);\n    Private.setNodeContentFromCommand(button.node, commands, id);\n\n    // Ensure that we pick up relevant changes to the command:\n    function onChange(\n      sender: CommandRegistry,\n      args: CommandRegistry.ICommandChangedArgs\n    ) {\n      if (args.id !== id) {\n        return; // Not our command\n      }\n\n      if (args.type === 'removed') {\n        // Dispose of button\n        button.dispose();\n        return;\n      }\n\n      if (args.type !== 'changed') {\n        return;\n      }\n\n      // Update all fields (onClick is already indirected)\n      const newClasses = Private.commandClassName(sender, id).split(/\\s/);\n\n      for (let cls of oldClasses) {\n        if (cls && newClasses.indexOf(cls) === -1) {\n          button.removeClass(cls);\n        }\n      }\n      for (let cls of newClasses) {\n        if (cls && oldClasses.indexOf(cls) === -1) {\n          button.addClass(cls);\n        }\n      }\n      oldClasses = newClasses;\n      button.node.title = Private.commandTooltip(sender, id);\n      Private.setNodeContentFromCommand(button.node, sender, id);\n      (button.node as HTMLButtonElement).disabled = !sender.isEnabled(id);\n    }\n    commands.commandChanged.connect(onChange, button);\n\n    return button;\n  }\n\n  /**\n   * Create an interrupt toolbar item.\n   */\n  export function createInterruptButton(\n    session: IClientSession\n  ): ToolbarButton {\n    return new ToolbarButton({\n      className: TOOLBAR_INTERRUPT_CLASS,\n      onClick: () => {\n        if (session.kernel) {\n          session.kernel.interrupt();\n        }\n      },\n      tooltip: 'Interrupt the kernel'\n    });\n  }\n\n  /**\n   * Create a restart toolbar item.\n   */\n  export function createRestartButton(session: IClientSession): ToolbarButton {\n    return new ToolbarButton({\n      className: TOOLBAR_RESTART_CLASS,\n      onClick: () => {\n        session.restart();\n      },\n      tooltip: 'Restart the kernel'\n    });\n  }\n\n  /**\n   * Create a toolbar spacer item.\n   *\n   * #### Notes\n   * It is a flex spacer that separates the left toolbar items\n   * from the right toolbar items.\n   */\n  export function createSpacerItem(): Widget {\n    return new Private.Spacer();\n  }\n\n  /**\n   * Create a kernel name indicator item.\n   *\n   * #### Notes\n   * It will display the `'display_name`' of the current kernel,\n   * or `'No Kernel!'` if there is no kernel.\n   * It can handle a change in context or kernel.\n   */\n  export function createKernelNameItem(session: IClientSession): ToolbarButton {\n    return new Private.KernelName(session);\n  }\n\n  /**\n   * Create a kernel status indicator item.\n   *\n   * #### Notes\n   * It show display a busy status if the kernel status is\n   * not idle.\n   * It will show the current status in the node title.\n   * It can handle a change to the context or the kernel.\n   */\n  export function createKernelStatusItem(session: IClientSession): Widget {\n    return new Private.KernelStatus(session);\n  }\n}\n\n/**\n * A widget which acts as a button in a toolbar.\n */\nexport class ToolbarButton extends Widget {\n  /**\n   * Construct a new toolbar button.\n   */\n  constructor(options: ToolbarButton.IOptions = {}) {\n    super({ node: document.createElement('button') });\n    Styling.styleNodeByTag(this.node, 'button');\n    this.addClass(TOOLBAR_BUTTON_CLASS);\n    this._onClick = options.onClick || Private.noOp;\n\n    const classes = options.className\n      ? options.className\n          .trim()\n          .replace(/\\s{2,}/g, ' ')\n          .split(/\\s/)\n      : null;\n\n    if (classes) {\n      classes.forEach(name => {\n        this.addClass(name);\n      });\n    }\n\n    this.node.title = options.tooltip || '';\n  }\n\n  /**\n   * Handle the DOM events for the widget.\n   *\n   * @param event - The DOM event sent to the widget.\n   *\n   * #### Notes\n   * This method implements the DOM `EventListener` interface and is\n   * called in response to events on the dock panel's node. It should\n   * not be called directly by user code.\n   */\n  handleEvent(event: Event): void {\n    switch (event.type) {\n      case 'click':\n        if ((event as MouseEvent).button === 0) {\n          this._onClick();\n        }\n        break;\n      default:\n        break;\n    }\n  }\n\n  /**\n   * Handle `after-attach` messages for the widget.\n   */\n  protected onAfterAttach(msg: Message): void {\n    this.node.addEventListener('click', this);\n  }\n\n  /**\n   * Handle `before-detach` messages for the widget.\n   */\n  protected onBeforeDetach(msg: Message): void {\n    this.node.removeEventListener('click', this);\n  }\n\n  private _onClick: () => void;\n}\n\n/**\n * A namespace for `ToolbarButton` statics.\n */\nexport namespace ToolbarButton {\n  /**\n   * The options used to construct a toolbar button.\n   */\n  export interface IOptions {\n    /**\n     * The callback for a click event.\n     */\n    onClick?: () => void;\n\n    /**\n     * The class name added to the button.\n     */\n    className?: string;\n\n    /**\n     * The tooltip added to the button node.\n     */\n    tooltip?: string;\n  }\n}\n\n/**\n * A namespace for private data.\n */\nnamespace Private {\n  /**\n   * An attached property for the name of a toolbar item.\n   */\n  export const nameProperty = new AttachedProperty<Widget, string>({\n    name: 'name',\n    create: () => ''\n  });\n\n  /**\n   * ToolbarButton tooltip formatter for a command.\n   */\n  export function commandTooltip(\n    commands: CommandRegistry,\n    id: string\n  ): string {\n    return commands.caption(id);\n  }\n\n  /**\n   * A no-op function.\n   */\n  export function noOp() {\n    /* no-op */\n  }\n\n  /**\n   * Get the class names for a command based ToolBarButton\n   */\n  export function commandClassName(\n    commands: CommandRegistry,\n    id: string\n  ): string {\n    let name = commands.className(id);\n    // Add the boolean state classes.\n    if (commands.isToggled(id)) {\n      name += ' p-mod-toggled';\n    }\n    if (!commands.isVisible(id)) {\n      name += ' p-mod-hidden';\n    }\n    return name;\n  }\n\n  /**\n   * Fill the node of a command based ToolBarButton.\n   */\n  export function setNodeContentFromCommand(\n    node: HTMLElement,\n    commands: CommandRegistry,\n    id: string\n  ): void {\n    const iconClass = commands.iconClass(id);\n    const iconLabel = commands.iconLabel(id);\n    const label = commands.label(id);\n\n    node.innerHTML = '';\n    if (iconClass) {\n      node.className += ` ${iconClass}`;\n      node.setAttribute('title', iconLabel || label);\n    } else {\n      node.innerText = label;\n    }\n  }\n\n  /**\n   * A spacer widget.\n   */\n  export class Spacer extends Widget {\n    /**\n     * Construct a new spacer widget.\n     */\n    constructor() {\n      super();\n      this.addClass(TOOLBAR_SPACER_CLASS);\n    }\n  }\n\n  /**\n   * A kernel name widget.\n   */\n  export class KernelName extends ToolbarButton {\n    /**\n     * Construct a new kernel name widget.\n     */\n    constructor(session: IClientSession) {\n      super({\n        className: TOOLBAR_KERNEL_NAME_CLASS,\n        onClick: () => {\n          session.selectKernel();\n        },\n        tooltip: 'Switch kernel'\n      });\n      this._onKernelChanged(session);\n      session.kernelChanged.connect(this._onKernelChanged, this);\n    }\n\n    /**\n     * Update the text of the kernel name item.\n     */\n    private _onKernelChanged(session: IClientSession): void {\n      this.node.textContent = session.kernelDisplayName;\n    }\n  }\n\n  /**\n   * A toolbar item that displays kernel status.\n   */\n  export class KernelStatus extends Widget {\n    /**\n     * Construct a new kernel status widget.\n     */\n    constructor(session: IClientSession) {\n      super();\n      this.addClass(TOOLBAR_KERNEL_STATUS_CLASS);\n      this._onStatusChanged(session);\n      session.statusChanged.connect(this._onStatusChanged, this);\n    }\n\n    /**\n     * Handle a status on a kernel.\n     */\n    private _onStatusChanged(session: IClientSession) {\n      if (this.isDisposed) {\n        return;\n      }\n      let status = session.status;\n      this.toggleClass(TOOLBAR_IDLE_CLASS, status === 'idle');\n      this.toggleClass(TOOLBAR_BUSY_CLASS, status !== 'idle');\n      let title = 'Kernel ' + status[0].toUpperCase() + status.slice(1);\n      this.node.title = title;\n    }\n  }\n}\n"]}