{"version":3,"file":"model.js","sourceRoot":"","sources":["../../../../attachments/src/model.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { nbformat } from '@jupyterlab/coreutils';\n\nimport {\n  IObservableMap,\n  ObservableMap,\n  IObservableValue,\n  ObservableValue,\n  IModelDB\n} from '@jupyterlab/observables';\n\nimport {\n  IAttachmentModel,\n  AttachmentModel,\n  imageRendererFactory\n} from '@jupyterlab/rendermime';\n\nimport { IRenderMime } from '@jupyterlab/rendermime-interfaces';\n\nimport { IDisposable } from '@phosphor/disposable';\n\nimport { ISignal, Signal } from '@phosphor/signaling';\n\n/**\n * The model for attachments.\n */\nexport interface IAttachmentsModel extends IDisposable {\n  /**\n   * A signal emitted when the model state changes.\n   */\n  readonly stateChanged: ISignal<IAttachmentsModel, void>;\n\n  /**\n   * A signal emitted when the model changes.\n   */\n  readonly changed: ISignal<IAttachmentsModel, IAttachmentsModel.ChangedArgs>;\n\n  /**\n   * The length of the items in the model.\n   */\n  readonly length: number;\n\n  /**\n   * The keys of the attachments in the model.\n   */\n  readonly keys: ReadonlyArray<string>;\n\n  /**\n   * The attachment content factory used by the model.\n   */\n  readonly contentFactory: IAttachmentsModel.IContentFactory;\n\n  /**\n   * Whether the specified key is set.\n   */\n  has(key: string): boolean;\n\n  /**\n   * Get an item for the specified key.\n   */\n  get(key: string): IAttachmentModel;\n\n  /**\n   * Set the value of the specified key.\n   */\n  set(key: string, attachment: nbformat.IMimeBundle): void;\n\n  /**\n   * Clear all of the attachments.\n   */\n  clear(): void;\n\n  /**\n   * Deserialize the model from JSON.\n   *\n   * #### Notes\n   * This will clear any existing data.\n   */\n  fromJSON(values: nbformat.IAttachments): void;\n\n  /**\n   * Serialize the model to JSON.\n   */\n  toJSON(): nbformat.IAttachments;\n}\n\n/**\n * The namespace for IAttachmentsModel interfaces.\n */\nexport namespace IAttachmentsModel {\n  /**\n   * The options used to create a attachments model.\n   */\n  export interface IOptions {\n    /**\n     * The initial values for the model.\n     */\n    values?: nbformat.IAttachments;\n\n    /**\n     * The attachment content factory used by the model.\n     *\n     * If not given, a default factory will be used.\n     */\n    contentFactory?: IContentFactory;\n\n    /**\n     * An optional IModelDB to store the attachments model.\n     */\n    modelDB?: IModelDB;\n  }\n\n  /**\n   * A type alias for changed args.\n   */\n  export type ChangedArgs = IObservableMap.IChangedArgs<IAttachmentModel>;\n\n  /**\n   * The interface for an attachment content factory.\n   */\n  export interface IContentFactory {\n    /**\n     * Create an attachment model.\n     */\n    createAttachmentModel(options: IAttachmentModel.IOptions): IAttachmentModel;\n  }\n}\n\n/**\n * The default implementation of the IAttachmentsModel.\n */\nexport class AttachmentsModel implements IAttachmentsModel {\n  /**\n   * Construct a new observable outputs instance.\n   */\n  constructor(options: IAttachmentsModel.IOptions = {}) {\n    this.contentFactory =\n      options.contentFactory || AttachmentsModel.defaultContentFactory;\n    if (options.values) {\n      for (let key of Object.keys(options.values)) {\n        this.set(key, options.values[key]);\n      }\n    }\n    this._map.changed.connect(this._onMapChanged, this);\n\n    // If we are given a IModelDB, keep an up-to-date\n    // serialized copy of the AttachmentsModel in it.\n    if (options.modelDB) {\n      this._modelDB = options.modelDB;\n      this._serialized = this._modelDB.createValue('attachments');\n      if (this._serialized.get()) {\n        this.fromJSON(this._serialized.get() as nbformat.IAttachments);\n      } else {\n        this._serialized.set(this.toJSON());\n      }\n      this._serialized.changed.connect(this._onSerializedChanged, this);\n    }\n  }\n\n  /**\n   * A signal emitted when the model state changes.\n   */\n  get stateChanged(): ISignal<IAttachmentsModel, void> {\n    return this._stateChanged;\n  }\n\n  /**\n   * A signal emitted when the model changes.\n   */\n  get changed(): ISignal<this, IAttachmentsModel.ChangedArgs> {\n    return this._changed;\n  }\n\n  /**\n   * The keys of the attachments in the model.\n   */\n  get keys(): ReadonlyArray<string> {\n    return this._map.keys();\n  }\n\n  /**\n   * Get the length of the items in the model.\n   */\n  get length(): number {\n    return this._map.keys().length;\n  }\n\n  /**\n   * The attachment content factory used by the model.\n   */\n  readonly contentFactory: IAttachmentsModel.IContentFactory;\n\n  /**\n   * Test whether the model is disposed.\n   */\n  get isDisposed(): boolean {\n    return this._isDisposed;\n  }\n\n  /**\n   * Dispose of the resources used by the model.\n   */\n  dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n    this._isDisposed = true;\n    this._map.dispose();\n    Signal.clearData(this);\n  }\n\n  /**\n   * Whether the specified key is set.\n   */\n  has(key: string): boolean {\n    return this._map.has(key);\n  }\n\n  /**\n   * Get an item at the specified key.\n   */\n  get(key: string): IAttachmentModel {\n    return this._map.get(key);\n  }\n\n  /**\n   * Set the value at the specified key.\n   */\n  set(key: string, value: nbformat.IMimeBundle): void {\n    // Normalize stream data.\n    let item = this._createItem({ value });\n    this._map.set(key, item);\n  }\n\n  /**\n   * Clear all of the attachments.\n   */\n  clear(): void {\n    this._map.values().forEach((item: IAttachmentModel) => {\n      item.dispose();\n    });\n    this._map.clear();\n  }\n\n  /**\n   * Deserialize the model from JSON.\n   *\n   * #### Notes\n   * This will clear any existing data.\n   */\n  fromJSON(values: nbformat.IAttachments) {\n    this.clear();\n    Object.keys(values).forEach(key => {\n      this.set(key, values[key]);\n    });\n  }\n\n  /**\n   * Serialize the model to JSON.\n   */\n  toJSON(): nbformat.IAttachments {\n    let ret: nbformat.IAttachments = {};\n    for (let key of this._map.keys()) {\n      ret[key] = this._map.get(key).toJSON();\n    }\n    return ret;\n  }\n\n  /**\n   * Create an attachment item and hook up its signals.\n   */\n  private _createItem(options: IAttachmentModel.IOptions): IAttachmentModel {\n    let factory = this.contentFactory;\n    let item = factory.createAttachmentModel(options);\n    item.changed.connect(this._onGenericChange, this);\n    return item;\n  }\n\n  /**\n   * Handle a change to the list.\n   */\n  private _onMapChanged(\n    sender: IObservableMap<IAttachmentModel>,\n    args: IObservableMap.IChangedArgs<IAttachmentModel>\n  ) {\n    if (this._serialized && !this._changeGuard) {\n      this._changeGuard = true;\n      this._serialized.set(this.toJSON());\n      this._changeGuard = false;\n    }\n    this._changed.emit(args);\n    this._stateChanged.emit(void 0);\n  }\n\n  /**\n   * If the serialized version of the outputs have changed due to a remote\n   * action, then update the model accordingly.\n   */\n  private _onSerializedChanged(\n    sender: IObservableValue,\n    args: ObservableValue.IChangedArgs\n  ) {\n    if (!this._changeGuard) {\n      this._changeGuard = true;\n      this.fromJSON(args.newValue as nbformat.IAttachments);\n      this._changeGuard = false;\n    }\n  }\n\n  /**\n   * Handle a change to an item.\n   */\n  private _onGenericChange(): void {\n    this._stateChanged.emit(void 0);\n  }\n\n  private _map = new ObservableMap<IAttachmentModel>();\n  private _isDisposed = false;\n  private _stateChanged = new Signal<IAttachmentsModel, void>(this);\n  private _changed = new Signal<this, IAttachmentsModel.ChangedArgs>(this);\n  private _modelDB: IModelDB = null;\n  private _serialized: IObservableValue = null;\n  private _changeGuard = false;\n}\n\n/**\n * The namespace for AttachmentsModel class statics.\n */\nexport namespace AttachmentsModel {\n  /**\n   * The default implementation of a `IAttachemntsModel.IContentFactory`.\n   */\n  export class ContentFactory implements IAttachmentsModel.IContentFactory {\n    /**\n     * Create an attachment model.\n     */\n    createAttachmentModel(\n      options: IAttachmentModel.IOptions\n    ): IAttachmentModel {\n      return new AttachmentModel(options);\n    }\n  }\n\n  /**\n   * The default attachment model factory.\n   */\n  export const defaultContentFactory = new ContentFactory();\n}\n\n/**\n * A resolver for cell attachments 'attchment:filename'.\n *\n * Will resolve to a data: url.\n */\nexport class AttachmentsResolver implements IRenderMime.IResolver {\n  /**\n   * Create an attachments resolver object.\n   */\n  constructor(options: AttachmentsResolver.IOptions) {\n    this._parent = options.parent || null;\n    this._model = options.model;\n  }\n  /**\n   * Resolve a relative url to a correct server path.\n   */\n  resolveUrl(url: string): Promise<string> {\n    if (this._parent && !url.startsWith('attachment:')) {\n      return this._parent.resolveUrl(url);\n    }\n    return Promise.resolve(url);\n  }\n\n  /**\n   * Get the download url of a given absolute server path.\n   */\n  getDownloadUrl(path: string): Promise<string> {\n    if (this._parent && !path.startsWith('attachment:')) {\n      return this._parent.getDownloadUrl(path);\n    }\n    // Return a data URL with the data of the url\n    const key = path.slice('attachment:'.length);\n    if (!this._model.has(key)) {\n      // Resolve with unprocessed path, to show as broken image\n      return Promise.resolve(path);\n    }\n    const { data } = this._model.get(key);\n    const mimeType = Object.keys(data)[0];\n    // Only support known safe types:\n    if (imageRendererFactory.mimeTypes.indexOf(mimeType) === -1) {\n      return Promise.reject(\n        `Cannot render unknown image mime type \"${mimeType}\".`\n      );\n    }\n    const dataUrl = `data:${mimeType};base64,${data[mimeType]}`;\n    return Promise.resolve(dataUrl);\n  }\n\n  /**\n   * Whether the URL should be handled by the resolver\n   * or not.\n   */\n  isLocal(url: string): boolean {\n    if (this._parent && !url.startsWith('attachment:')) {\n      return this._parent.isLocal(url);\n    }\n    return true;\n  }\n\n  private _model: IAttachmentsModel;\n  private _parent: IRenderMime.IResolver | null;\n}\n\n/**\n * The namespace for `AttachmentsResolver` class statics.\n */\nexport namespace AttachmentsResolver {\n  /**\n   * The options used to create an AttachmentsResolver.\n   */\n  export interface IOptions {\n    /**\n     * The attachments model to resolve against.\n     */\n    model: IAttachmentsModel;\n\n    /**\n     * A parent resolver to use if the URL/path is not for an attachment.\n     */\n    parent?: IRenderMime.IResolver;\n  }\n}\n"]}