{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../codemirror-extension/src/index.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport CodeMirror from 'codemirror';\n\nimport { Menu } from '@phosphor/widgets';\n\nimport { JupyterLab, JupyterLabPlugin } from '@jupyterlab/application';\n\nimport { IMainMenu, IEditMenu } from '@jupyterlab/mainmenu';\n\nimport { IEditorServices } from '@jupyterlab/codeeditor';\n\nimport { editorServices, CodeMirrorEditor, Mode } from '@jupyterlab/codemirror';\n\nimport { ISettingRegistry, IStateDB } from '@jupyterlab/coreutils';\n\nimport { IDocumentWidget } from '@jupyterlab/docregistry';\n\nimport { IEditorTracker, FileEditor } from '@jupyterlab/fileeditor';\n\n/**\n * The command IDs used by the codemirror plugin.\n */\nnamespace CommandIDs {\n  export const changeKeyMap = 'codemirror:change-keymap';\n\n  export const changeTheme = 'codemirror:change-theme';\n\n  export const changeMode = 'codemirror:change-mode';\n\n  export const find = 'codemirror:find';\n\n  export const findAndReplace = 'codemirror:find-and-replace';\n}\n\n/**\n * The editor services.\n */\nconst services: JupyterLabPlugin<IEditorServices> = {\n  id: '@jupyterlab/codemirror-extension:services',\n  provides: IEditorServices,\n  activate: activateEditorServices\n};\n\n/**\n * The editor commands.\n */\nconst commands: JupyterLabPlugin<void> = {\n  id: '@jupyterlab/codemirror-extension:commands',\n  requires: [IEditorTracker, IMainMenu, IStateDB, ISettingRegistry],\n  activate: activateEditorCommands,\n  autoStart: true\n};\n\n/**\n * Export the plugins as default.\n */\nconst plugins: JupyterLabPlugin<any>[] = [commands, services];\nexport default plugins;\n\n/**\n * The plugin ID used as the key in the setting registry.\n */\nconst id = commands.id;\n\n/**\n * Set up the editor services.\n */\nfunction activateEditorServices(app: JupyterLab): IEditorServices {\n  CodeMirror.prototype.save = () => {\n    app.commands.execute('docmanager:save');\n  };\n  return editorServices;\n}\n\n/**\n * Set up the editor widget menu and commands.\n */\nfunction activateEditorCommands(\n  app: JupyterLab,\n  tracker: IEditorTracker,\n  mainMenu: IMainMenu,\n  state: IStateDB,\n  settingRegistry: ISettingRegistry\n): void {\n  const { commands, restored } = app;\n  let { theme, keyMap } = CodeMirrorEditor.defaultConfig;\n\n  /**\n   * Update the setting values.\n   */\n  function updateSettings(settings: ISettingRegistry.ISettings): void {\n    keyMap = (settings.get('keyMap').composite as string | null) || keyMap;\n    theme = (settings.get('theme').composite as string | null) || theme;\n  }\n\n  /**\n   * Update the settings of the current tracker instances.\n   */\n  function updateTracker(): void {\n    tracker.forEach(widget => {\n      if (widget.content.editor instanceof CodeMirrorEditor) {\n        let cm = widget.content.editor.editor;\n        cm.setOption('keyMap', keyMap);\n        cm.setOption('theme', theme);\n      }\n    });\n  }\n\n  // Fetch the initial state of the settings.\n  Promise.all([settingRegistry.load(id), restored])\n    .then(([settings]) => {\n      updateSettings(settings);\n      updateTracker();\n      settings.changed.connect(() => {\n        updateSettings(settings);\n        updateTracker();\n      });\n    })\n    .catch((reason: Error) => {\n      console.error(reason.message);\n      updateTracker();\n    });\n\n  /**\n   * Handle the settings of new widgets.\n   */\n  tracker.widgetAdded.connect((sender, widget) => {\n    if (widget.content.editor instanceof CodeMirrorEditor) {\n      let cm = widget.content.editor.editor;\n      cm.setOption('keyMap', keyMap);\n      cm.setOption('theme', theme);\n    }\n  });\n\n  /**\n   * A test for whether the tracker has an active widget.\n   */\n  function isEnabled(): boolean {\n    return (\n      tracker.currentWidget !== null &&\n      tracker.currentWidget === app.shell.currentWidget\n    );\n  }\n\n  /**\n   * Create a menu for the editor.\n   */\n  const themeMenu = new Menu({ commands });\n  const keyMapMenu = new Menu({ commands });\n  const modeMenu = new Menu({ commands });\n\n  themeMenu.title.label = 'Text Editor Theme';\n  keyMapMenu.title.label = 'Text Editor Key Map';\n  modeMenu.title.label = 'Text Editor Syntax Highlighting';\n\n  commands.addCommand(CommandIDs.changeTheme, {\n    label: args => args['theme'] as string,\n    execute: args => {\n      const key = 'theme';\n      const value = (theme = (args['theme'] as string) || theme);\n\n      updateTracker();\n      return settingRegistry.set(id, key, value).catch((reason: Error) => {\n        console.error(`Failed to set ${id}:${key} - ${reason.message}`);\n      });\n    },\n    isToggled: args => args['theme'] === theme\n  });\n\n  commands.addCommand(CommandIDs.changeKeyMap, {\n    label: args => {\n      let title = args['keyMap'] as string;\n      return title === 'sublime' ? 'Sublime Text' : title;\n    },\n    execute: args => {\n      const key = 'keyMap';\n      const value = (keyMap = (args['keyMap'] as string) || keyMap);\n\n      updateTracker();\n      return settingRegistry.set(id, key, value).catch((reason: Error) => {\n        console.error(`Failed to set ${id}:${key} - ${reason.message}`);\n      });\n    },\n    isToggled: args => args['keyMap'] === keyMap\n  });\n\n  commands.addCommand(CommandIDs.find, {\n    label: 'Find...',\n    execute: () => {\n      let widget = tracker.currentWidget;\n      if (!widget) {\n        return;\n      }\n      let editor = widget.content.editor as CodeMirrorEditor;\n      editor.execCommand('find');\n    },\n    isEnabled\n  });\n\n  commands.addCommand(CommandIDs.findAndReplace, {\n    label: 'Find and Replace...',\n    execute: () => {\n      let widget = tracker.currentWidget;\n      if (!widget) {\n        return;\n      }\n      let editor = widget.content.editor as CodeMirrorEditor;\n      editor.execCommand('replace');\n    },\n    isEnabled\n  });\n\n  commands.addCommand(CommandIDs.changeMode, {\n    label: args => args['name'] as string,\n    execute: args => {\n      let name = args['name'] as string;\n      let widget = tracker.currentWidget;\n      if (name && widget) {\n        let spec = Mode.findByName(name);\n        if (spec) {\n          widget.content.model.mimeType = spec.mime;\n        }\n      }\n    },\n    isEnabled,\n    isToggled: args => {\n      let widget = tracker.currentWidget;\n      if (!widget) {\n        return false;\n      }\n      let mime = widget.content.model.mimeType;\n      let spec = Mode.findByMIME(mime);\n      let name = spec && spec.name;\n      return args['name'] === name;\n    }\n  });\n\n  Mode.getModeInfo()\n    .sort((a, b) => {\n      let aName = a.name || '';\n      let bName = b.name || '';\n      return aName.localeCompare(bName);\n    })\n    .forEach(spec => {\n      // Avoid mode name with a curse word.\n      if (spec.mode.indexOf('brainf') === 0) {\n        return;\n      }\n      modeMenu.addItem({\n        command: CommandIDs.changeMode,\n        args: { ...spec }\n      });\n    });\n\n  [\n    'jupyter',\n    'default',\n    'abcdef',\n    'base16-dark',\n    'base16-light',\n    'hopscotch',\n    'material',\n    'mbo',\n    'mdn-like',\n    'seti',\n    'solarized dark',\n    'solarized light',\n    'the-matrix',\n    'xq-light',\n    'zenburn'\n  ].forEach(name =>\n    themeMenu.addItem({\n      command: CommandIDs.changeTheme,\n      args: { theme: name }\n    })\n  );\n\n  ['default', 'sublime', 'vim', 'emacs'].forEach(name => {\n    keyMapMenu.addItem({\n      command: CommandIDs.changeKeyMap,\n      args: { keyMap: name }\n    });\n  });\n\n  // Add some of the editor settings to the settings menu.\n  mainMenu.settingsMenu.addGroup(\n    [\n      { type: 'submenu' as Menu.ItemType, submenu: keyMapMenu },\n      { type: 'submenu' as Menu.ItemType, submenu: themeMenu }\n    ],\n    10\n  );\n\n  // Add the syntax highlighting submenu to the `View` menu.\n  mainMenu.viewMenu.addGroup([{ type: 'submenu', submenu: modeMenu }], 40);\n\n  // Add find-replace capabilities to the edit menu.\n  mainMenu.editMenu.findReplacers.add({\n    tracker,\n    find: (widget: IDocumentWidget<FileEditor>) => {\n      let editor = widget.content.editor as CodeMirrorEditor;\n      editor.execCommand('find');\n    },\n    findAndReplace: (widget: IDocumentWidget<FileEditor>) => {\n      let editor = widget.content.editor as CodeMirrorEditor;\n      editor.execCommand('replace');\n    }\n  } as IEditMenu.IFindReplacer<IDocumentWidget<FileEditor>>);\n}\n"]}