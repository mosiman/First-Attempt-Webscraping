{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../inspector-extension/src/index.ts"],"names":[],"mappings":";AAAA,0CAA0C;AAC1C,2DAA2D;;AAE3D,yDAIiC;AAEjC,mDAI8B;AAE9B,iDAAsD;AAEtD,qDAK+B;AAE/B,mDAAwD;AAExD,uCAA6C;AAE7C;;GAEG;AACH,IAAU,UAAU,CAEnB;AAFD,WAAU,UAAU;IACL,eAAI,GAAG,gBAAgB,CAAC;AACvC,CAAC,EAFS,UAAU,KAAV,UAAU,QAEnB;AAED;;GAEG;AACH,MAAM,SAAS,GAAiC;IAC9C,EAAE,EAAE,2CAA2C;IAC/C,QAAQ,EAAE,CAAC,0BAAe,EAAE,6BAAe,CAAC;IAC5C,QAAQ,EAAE,sBAAU;IACpB,SAAS,EAAE,IAAI;IACf,QAAQ,EAAE,CACR,GAAe,EACf,OAAwB,EACxB,QAAyB,EACb,EAAE;QACd,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG,GAAG,CAAC;QAChC,MAAM,OAAO,GAAG,IAAI,0BAAgB,EAAE,CAAC;QACvC,MAAM,QAAQ,GAAG,WAAW,CAAC;QAC7B,MAAM,OAAO,GAAG,UAAU,CAAC,IAAI,CAAC;QAChC,MAAM,KAAK,GAAG,gBAAgB,CAAC;QAC/B,MAAM,SAAS,GAAG,WAAW,CAAC;QAC9B,MAAM,OAAO,GAAG,IAAI,0BAAe,CAAiC;YAClE,SAAS;SACV,CAAC,CAAC;QAEH;;WAEG;QACH;YACE,MAAM,SAAS,GAAG,IAAI,0BAAc,EAAE,CAAC;YAEvC,SAAS,CAAC,EAAE,GAAG,cAAc,CAAC;YAC9B,SAAS,CAAC,KAAK,CAAC,KAAK,GAAG,WAAW,CAAC;YACpC,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAE;gBAC9B,IAAI,OAAO,CAAC,SAAS,KAAK,SAAS,EAAE;oBACnC,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC;iBAC1B;YACH,CAAC,CAAC,CAAC;YAEH,uBAAuB;YACvB,IAAI,MAAM,GAAG,IAAI,yBAAc,CAAC,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC,CAAC;YACxD,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YAEpB,yCAAyC;YACzC,OAAO,CAAC,qBAAqB,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;gBAC3C,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YACtB,CAAC,CAAC,CAAC;YAEH,OAAO,SAAS,CAAC;QACnB,CAAC;QAED,4BAA4B;QAC5B,QAAQ,CAAC,OAAO,CAAC,OAAO,EAAE;YACxB,OAAO;YACP,IAAI,EAAE,GAAG,EAAE,CAAC,IAAI;YAChB,IAAI,EAAE,GAAG,EAAE,CAAC,WAAW;SACxB,CAAC,CAAC;QAEH,uCAAuC;QACvC,QAAQ,CAAC,UAAU,CAAC,OAAO,EAAE;YAC3B,KAAK;YACL,OAAO,EAAE,GAAG,EAAE;gBACZ,IAAI,CAAC,OAAO,CAAC,SAAS,IAAI,OAAO,CAAC,SAAS,CAAC,UAAU,EAAE;oBACtD,OAAO,CAAC,SAAS,GAAG,iBAAiB,EAAE,CAAC;iBACzC;gBACD,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,UAAU,EAAE;oBACjC,KAAK,CAAC,aAAa,CAAC,OAAO,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC;iBACpE;gBACD,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;YAClD,CAAC;SACF,CAAC,CAAC;QACH,OAAO,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC,CAAC;QAEvC,OAAO,OAAO,CAAC;IACjB,CAAC;CACF,CAAC;AAEF;;GAEG;AACH,MAAM,QAAQ,GAA2B;IACvC,EAAE,EAAE,0CAA0C;IAC9C,QAAQ,EAAE,CAAC,sBAAU,EAAE,yBAAe,CAAC;IACvC,SAAS,EAAE,IAAI;IACf,QAAQ,EAAE,CACR,GAAe,EACf,OAAmB,EACnB,QAAyB,EACnB,EAAE;QACR,uEAAuE;QACvE,MAAM,QAAQ,GAAwC,EAAE,CAAC;QAEzD,qDAAqD;QACrD,QAAQ,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,MAAM,EAAE,EAAE;YAC9C,MAAM,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC;YACvC,MAAM,UAAU,GAAG,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC;YAC7C,MAAM,SAAS,GAAG,IAAI,2BAAe,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC;YACnD,MAAM,OAAO,GAAG,IAAI,6BAAiB,CAAC,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,CAAC;YAEjE,uCAAuC;YACvC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC;YAE9B,0BAA0B;YAC1B,IAAI,IAAI,GAAG,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC;YACrC,OAAO,CAAC,MAAM,GAAG,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC;YAErC,8BAA8B;YAC9B,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,IAAI,EAAE,EAAE;gBACxD,OAAO,CAAC,MAAM,GAAG,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC;YACvC,CAAC,CAAC,CAAC;YAEH,8BAA8B;YAC9B,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAE;gBAC3B,OAAO,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;gBAC3B,OAAO,CAAC,OAAO,EAAE,CAAC;YACpB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,4DAA4D;QAC5D,GAAG,CAAC,KAAK,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,IAAI,EAAE,EAAE;YAChD,IAAI,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC;YAC3B,IAAI,CAAC,MAAM,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;gBACpC,OAAO;aACR;YACD,IAAI,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;YACjC,IAAI,MAAM,EAAE;gBACV,OAAO,CAAC,MAAM,GAAG,MAAM,CAAC;aACzB;QACH,CAAC,CAAC,CAAC;QAEH,GAAG,CAAC,WAAW,CAAC,OAAO,CAAC;YACtB,OAAO,EAAE,UAAU,CAAC,IAAI;YACxB,QAAQ,EAAE,4BAA4B;SACvC,CAAC,CAAC;IACL,CAAC;CACF,CAAC;AAEF;;GAEG;AACH,MAAM,SAAS,GAA2B;IACxC,EAAE,EAAE,2CAA2C;IAC/C,QAAQ,EAAE,CAAC,sBAAU,EAAE,2BAAgB,CAAC;IACxC,SAAS,EAAE,IAAI;IACf,QAAQ,EAAE,CACR,GAAe,EACf,OAAmB,EACnB,SAA2B,EACrB,EAAE;QACR,wEAAwE;QACxE,MAAM,QAAQ,GAAwC,EAAE,CAAC;QAEzD,sDAAsD;QACtD,SAAS,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,MAAM,EAAE,EAAE;YAC/C,MAAM,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;YAC/B,MAAM,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;YACrC,MAAM,SAAS,GAAG,IAAI,2BAAe,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC;YACnD,MAAM,OAAO,GAAG,IAAI,6BAAiB,CAAC,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,CAAC;YAEjE,uCAAuC;YACvC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC;YAE9B,0BAA0B;YAC1B,IAAI,IAAI,GAAG,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC;YACrC,OAAO,CAAC,MAAM,GAAG,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC;YAErC,kCAAkC;YAClC,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,IAAI,EAAE,EAAE;gBACxD,OAAO,CAAC,MAAM,GAAG,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC;YACvC,CAAC,CAAC,CAAC;YAEH,8BAA8B;YAC9B,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAE;gBAC3B,OAAO,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;gBAC3B,OAAO,CAAC,OAAO,EAAE,CAAC;YACpB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,6DAA6D;QAC7D,GAAG,CAAC,KAAK,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,IAAI,EAAE,EAAE;YAChD,IAAI,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC;YAC3B,IAAI,CAAC,MAAM,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;gBACrC,OAAO;aACR;YACD,IAAI,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;YACjC,IAAI,MAAM,EAAE;gBACV,OAAO,CAAC,MAAM,GAAG,MAAM,CAAC;aACzB;QACH,CAAC,CAAC,CAAC;QAEH,GAAG,CAAC,WAAW,CAAC,OAAO,CAAC;YACtB,OAAO,EAAE,UAAU,CAAC,IAAI;YACxB,QAAQ,EAAE,cAAc;SACzB,CAAC,CAAC;IACL,CAAC;CACF,CAAC;AAEF;;GAEG;AACH,MAAM,OAAO,GAA4B,CAAC,SAAS,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;AAC1E,kBAAe,OAAO,CAAC;AAEvB;;GAEG;AACH,IAAU,OAAO,CAYhB;AAZD,WAAU,OAAO;IACf;;OAEG;IACU,6BAAqB,GAAgC;QAChE;YACE,SAAS,EAAE,uBAAuB;YAClC,IAAI,EAAE,OAAO;YACb,IAAI,EAAE,EAAE;YACR,IAAI,EAAE,OAAO;SACd;KACF,CAAC;AACJ,CAAC,EAZS,OAAO,KAAP,OAAO,QAYhB","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport {\n  ILayoutRestorer,\n  JupyterLab,\n  JupyterLabPlugin\n} from '@jupyterlab/application';\n\nimport {\n  ICommandPalette,\n  InstanceTracker,\n  MainAreaWidget\n} from '@jupyterlab/apputils';\n\nimport { IConsoleTracker } from '@jupyterlab/console';\n\nimport {\n  IInspector,\n  InspectionHandler,\n  InspectorPanel,\n  KernelConnector\n} from '@jupyterlab/inspector';\n\nimport { INotebookTracker } from '@jupyterlab/notebook';\n\nimport { InspectorManager } from './manager';\n\n/**\n * The command IDs used by the inspector plugin.\n */\nnamespace CommandIDs {\n  export const open = 'inspector:open';\n}\n\n/**\n * A service providing code introspection.\n */\nconst inspector: JupyterLabPlugin<IInspector> = {\n  id: '@jupyterlab/inspector-extension:inspector',\n  requires: [ICommandPalette, ILayoutRestorer],\n  provides: IInspector,\n  autoStart: true,\n  activate: (\n    app: JupyterLab,\n    palette: ICommandPalette,\n    restorer: ILayoutRestorer\n  ): IInspector => {\n    const { commands, shell } = app;\n    const manager = new InspectorManager();\n    const category = 'Inspector';\n    const command = CommandIDs.open;\n    const label = 'Open Inspector';\n    const namespace = 'inspector';\n    const tracker = new InstanceTracker<MainAreaWidget<InspectorPanel>>({\n      namespace\n    });\n\n    /**\n     * Create and track a new inspector.\n     */\n    function newInspectorPanel(): InspectorPanel {\n      const inspector = new InspectorPanel();\n\n      inspector.id = 'jp-inspector';\n      inspector.title.label = 'Inspector';\n      inspector.disposed.connect(() => {\n        if (manager.inspector === inspector) {\n          manager.inspector = null;\n        }\n      });\n\n      // Track the inspector.\n      let widget = new MainAreaWidget({ content: inspector });\n      tracker.add(widget);\n\n      // Add the default inspector child items.\n      Private.defaultInspectorItems.forEach(item => {\n        inspector.add(item);\n      });\n\n      return inspector;\n    }\n\n    // Handle state restoration.\n    restorer.restore(tracker, {\n      command,\n      args: () => null,\n      name: () => 'inspector'\n    });\n\n    // Add command to registry and palette.\n    commands.addCommand(command, {\n      label,\n      execute: () => {\n        if (!manager.inspector || manager.inspector.isDisposed) {\n          manager.inspector = newInspectorPanel();\n        }\n        if (!manager.inspector.isAttached) {\n          shell.addToMainArea(manager.inspector.parent, { activate: false });\n        }\n        shell.activateById(manager.inspector.parent.id);\n      }\n    });\n    palette.addItem({ command, category });\n\n    return manager;\n  }\n};\n\n/**\n * An extension that registers consoles for inspection.\n */\nconst consoles: JupyterLabPlugin<void> = {\n  id: '@jupyterlab/inspector-extension:consoles',\n  requires: [IInspector, IConsoleTracker],\n  autoStart: true,\n  activate: (\n    app: JupyterLab,\n    manager: IInspector,\n    consoles: IConsoleTracker\n  ): void => {\n    // Maintain association of new consoles with their respective handlers.\n    const handlers: { [id: string]: InspectionHandler } = {};\n\n    // Create a handler for each console that is created.\n    consoles.widgetAdded.connect((sender, parent) => {\n      const session = parent.console.session;\n      const rendermime = parent.console.rendermime;\n      const connector = new KernelConnector({ session });\n      const handler = new InspectionHandler({ connector, rendermime });\n\n      // Associate the handler to the widget.\n      handlers[parent.id] = handler;\n\n      // Set the initial editor.\n      let cell = parent.console.promptCell;\n      handler.editor = cell && cell.editor;\n\n      // Listen for prompt creation.\n      parent.console.promptCellCreated.connect((sender, cell) => {\n        handler.editor = cell && cell.editor;\n      });\n\n      // Listen for parent disposal.\n      parent.disposed.connect(() => {\n        delete handlers[parent.id];\n        handler.dispose();\n      });\n    });\n\n    // Keep track of console instances and set inspector source.\n    app.shell.currentChanged.connect((sender, args) => {\n      let widget = args.newValue;\n      if (!widget || !consoles.has(widget)) {\n        return;\n      }\n      let source = handlers[widget.id];\n      if (source) {\n        manager.source = source;\n      }\n    });\n\n    app.contextMenu.addItem({\n      command: CommandIDs.open,\n      selector: '.jp-CodeConsole-promptCell'\n    });\n  }\n};\n\n/**\n * An extension that registers notebooks for inspection.\n */\nconst notebooks: JupyterLabPlugin<void> = {\n  id: '@jupyterlab/inspector-extension:notebooks',\n  requires: [IInspector, INotebookTracker],\n  autoStart: true,\n  activate: (\n    app: JupyterLab,\n    manager: IInspector,\n    notebooks: INotebookTracker\n  ): void => {\n    // Maintain association of new notebooks with their respective handlers.\n    const handlers: { [id: string]: InspectionHandler } = {};\n\n    // Create a handler for each notebook that is created.\n    notebooks.widgetAdded.connect((sender, parent) => {\n      const session = parent.session;\n      const rendermime = parent.rendermime;\n      const connector = new KernelConnector({ session });\n      const handler = new InspectionHandler({ connector, rendermime });\n\n      // Associate the handler to the widget.\n      handlers[parent.id] = handler;\n\n      // Set the initial editor.\n      let cell = parent.content.activeCell;\n      handler.editor = cell && cell.editor;\n\n      // Listen for active cell changes.\n      parent.content.activeCellChanged.connect((sender, cell) => {\n        handler.editor = cell && cell.editor;\n      });\n\n      // Listen for parent disposal.\n      parent.disposed.connect(() => {\n        delete handlers[parent.id];\n        handler.dispose();\n      });\n    });\n\n    // Keep track of notebook instances and set inspector source.\n    app.shell.currentChanged.connect((sender, args) => {\n      let widget = args.newValue;\n      if (!widget || !notebooks.has(widget)) {\n        return;\n      }\n      let source = handlers[widget.id];\n      if (source) {\n        manager.source = source;\n      }\n    });\n\n    app.contextMenu.addItem({\n      command: CommandIDs.open,\n      selector: '.jp-Notebook'\n    });\n  }\n};\n\n/**\n * Export the plugins as default.\n */\nconst plugins: JupyterLabPlugin<any>[] = [inspector, consoles, notebooks];\nexport default plugins;\n\n/**\n * A namespace for private data.\n */\nnamespace Private {\n  /**\n   * The default set of inspector items added to the inspector panel.\n   */\n  export const defaultInspectorItems: IInspector.IInspectorItem[] = [\n    {\n      className: 'jp-HintsInspectorItem',\n      name: 'Hints',\n      rank: 20,\n      type: 'hints'\n    }\n  ];\n}\n"]}