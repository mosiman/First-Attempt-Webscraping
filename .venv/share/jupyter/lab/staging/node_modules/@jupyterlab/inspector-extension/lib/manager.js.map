{"version":3,"file":"manager.js","sourceRoot":"","sources":["../../../../inspector-extension/src/manager.ts"],"names":[],"mappings":";AAAA,0CAA0C;AAC1C,2DAA2D;;AAM3D;;;GAGG;AACH;IAAA;QAiEU,eAAU,GAAmB,IAAI,CAAC;QAClC,YAAO,GAA4B,IAAI,CAAC;IAClD,CAAC;IAlEC;;OAEG;IACH,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IACD,IAAI,SAAS,CAAC,SAAyB;QACrC,IAAI,IAAI,CAAC,UAAU,KAAK,SAAS,EAAE;YACjC,OAAO;SACR;QACD,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,iDAAiD;QACjD,IAAI,SAAS,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE;YAClC,SAAS,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC;SACjC;IACH,CAAC;IAED;;OAEG;IACH,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IACD,IAAI,MAAM,CAAC,MAA+B;QACxC,IAAI,IAAI,CAAC,OAAO,KAAK,MAAM,EAAE;YAC3B,OAAO;SACR;QAED,IAAI,IAAI,CAAC,OAAO,EAAE;YAChB,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC;SAChE;QAED,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QAEtB,IAAI,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE;YAClD,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC;SACvC;QAED,IAAI,IAAI,CAAC,OAAO,EAAE;YAChB,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC;SAC7D;IACH,CAAC;IAED;;;;;;OAMG;IACH,GAAG,CAAC,IAA+B;QACjC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,MAAM,IAAI,KAAK,CAAC,qDAAqD,CAAC,CAAC;SACxE;QACD,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACnC,CAAC;IAED;;OAEG;IACK,iBAAiB;QACvB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;IACtB,CAAC;CAIF;AAnED,4CAmEC","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { IInspector, InspectorPanel } from '@jupyterlab/inspector';\n\nimport { IDisposable } from '@phosphor/disposable';\n\n/**\n * A class that manages inspector widget instances and offers persistent\n * `IInspector` instance that other plugins can communicate with.\n */\nexport class InspectorManager implements IInspector {\n  /**\n   * The current inspector widget.\n   */\n  get inspector(): InspectorPanel {\n    return this._inspector;\n  }\n  set inspector(inspector: InspectorPanel) {\n    if (this._inspector === inspector) {\n      return;\n    }\n    this._inspector = inspector;\n    // If an inspector was added and it has no source\n    if (inspector && !inspector.source) {\n      inspector.source = this._source;\n    }\n  }\n\n  /**\n   * The source of events the inspector panel listens for.\n   */\n  get source(): IInspector.IInspectable {\n    return this._source;\n  }\n  set source(source: IInspector.IInspectable) {\n    if (this._source === source) {\n      return;\n    }\n\n    if (this._source) {\n      this._source.disposed.disconnect(this._onSourceDisposed, this);\n    }\n\n    this._source = source;\n\n    if (this._inspector && !this._inspector.isDisposed) {\n      this._inspector.source = this._source;\n    }\n\n    if (this._source) {\n      this._source.disposed.connect(this._onSourceDisposed, this);\n    }\n  }\n\n  /**\n   * Create an inspector child item and return a disposable to remove it.\n   *\n   * @param item - The inspector child item being added to the inspector.\n   *\n   * @returns A disposable that removes the child item from the inspector.\n   */\n  add(item: IInspector.IInspectorItem): IDisposable {\n    if (!this._inspector) {\n      throw new Error('Cannot add child item before creating an inspector.');\n    }\n    return this._inspector.add(item);\n  }\n\n  /**\n   * Handle the source disposed signal.\n   */\n  private _onSourceDisposed() {\n    this._source = null;\n  }\n\n  private _inspector: InspectorPanel = null;\n  private _source: IInspector.IInspectable = null;\n}\n"]}