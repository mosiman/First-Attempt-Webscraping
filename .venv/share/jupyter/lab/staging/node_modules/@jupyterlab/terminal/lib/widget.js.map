{"version":3,"file":"widget.js","sourceRoot":"","sources":["../../../../terminal/src/widget.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { TerminalSession } from '@jupyterlab/services';\n\nimport { Message, MessageLoop } from '@phosphor/messaging';\n\nimport { Widget } from '@phosphor/widgets';\n\nimport { Terminal as Xterm, ITerminalOptions as IXtermOptions } from 'xterm';\n\nimport { fit } from 'xterm/lib/addons/fit';\n\n/**\n * The class name added to a terminal widget.\n */\nconst TERMINAL_CLASS = 'jp-Terminal';\n\n/**\n * The class name added to a terminal body.\n */\nconst TERMINAL_BODY_CLASS = 'jp-Terminal-body';\n\n/**\n * A widget which manages a terminal session.\n */\nexport class Terminal extends Widget {\n  /**\n   * Construct a new terminal widget.\n   *\n   * @param options - The terminal configuration options.\n   */\n  constructor(options: Partial<Terminal.IOptions> = {}) {\n    super();\n    this.addClass(TERMINAL_CLASS);\n\n    // Create the xterm.\n    this._term = new Xterm(Private.getConfig(options));\n    this._initializeTerm();\n\n    // Initialize settings.\n    let defaults = Terminal.defaultOptions;\n    this._initialCommand = options.initialCommand || defaults.initialCommand;\n    this.theme = options.theme || defaults.theme;\n\n    this.id = `jp-Terminal-${Private.id++}`;\n    this.title.label = 'Terminal';\n  }\n\n  /**\n   * The terminal session associated with the widget.\n   */\n  get session(): TerminalSession.ISession | null {\n    return this._session;\n  }\n  set session(value: TerminalSession.ISession | null) {\n    if (this._session && !this._session.isDisposed) {\n      this._session.messageReceived.disconnect(this._onMessage, this);\n    }\n    this._session = value || null;\n    if (!value) {\n      return;\n    }\n    value.ready.then(() => {\n      if (this.isDisposed || value !== this._session) {\n        return;\n      }\n      value.messageReceived.connect(this._onMessage, this);\n      this.title.label = `Terminal ${value.name}`;\n      this._setSessionSize();\n      if (this._initialCommand) {\n        this._session.send({\n          type: 'stdin',\n          content: [this._initialCommand + '\\r']\n        });\n      }\n    });\n  }\n\n  /**\n   * Get the font size of the terminal in pixels.\n   */\n  get fontSize(): number {\n    return this._term.getOption('fontSize');\n  }\n\n  /**\n   * Set the font size of the terminal in pixels.\n   */\n  set fontSize(size: number) {\n    if (this.fontSize === size) {\n      return;\n    }\n    this._term.setOption('fontSize', size);\n    this._needsResize = true;\n    this.update();\n  }\n\n  /**\n   * Get the current theme, either light or dark.\n   */\n  get theme(): Terminal.Theme {\n    return this._theme;\n  }\n\n  /**\n   * Set the current theme, either light or dark.\n   */\n  set theme(value: Terminal.Theme) {\n    this._theme = value;\n    if (value === 'light') {\n      this.addClass('jp-mod-light');\n      this._term.setOption('theme', Private.lightTheme);\n    } else {\n      this.removeClass('jp-mod-light');\n      this._term.setOption('theme', Private.darkTheme);\n    }\n    this.update();\n  }\n\n  /**\n   * Dispose of the resources held by the terminal widget.\n   */\n  dispose(): void {\n    this._session = null;\n    super.dispose();\n  }\n\n  /**\n   * Refresh the terminal session.\n   */\n  refresh(): Promise<void> {\n    if (!this._session) {\n      return Promise.reject(void 0);\n    }\n    return this._session.reconnect().then(() => {\n      this._term.clear();\n    });\n  }\n\n  /**\n   * Process a message sent to the widget.\n   *\n   * @param msg - The message sent to the widget.\n   *\n   * #### Notes\n   * Subclasses may reimplement this method as needed.\n   */\n  processMessage(msg: Message): void {\n    super.processMessage(msg);\n    switch (msg.type) {\n      case 'fit-request':\n        this.onFitRequest(msg);\n        break;\n      default:\n        break;\n    }\n  }\n\n  /**\n   * Set the size of the terminal when attached if dirty.\n   */\n  protected onAfterAttach(msg: Message): void {\n    this.update();\n  }\n\n  /**\n   * Set the size of the terminal when shown if dirty.\n   */\n  protected onAfterShow(msg: Message): void {\n    this.update();\n  }\n\n  /**\n   * On resize, use the computed row and column sizes to resize the terminal.\n   */\n  protected onResize(msg: Widget.ResizeMessage): void {\n    this._offsetWidth = msg.width;\n    this._offsetHeight = msg.height;\n    this._needsResize = true;\n    this.update();\n  }\n\n  /**\n   * A message handler invoked on an `'update-request'` message.\n   */\n  protected onUpdateRequest(msg: Message): void {\n    if (!this.isVisible || !this.isAttached) {\n      return;\n    }\n\n    // Open the terminal if necessary.\n    if (!this._termOpened) {\n      this._term.open(this.node);\n      this._term.element.classList.add(TERMINAL_BODY_CLASS);\n      this._termOpened = true;\n    }\n\n    if (this._needsResize) {\n      this._resizeTerminal();\n    }\n  }\n\n  /**\n   * A message handler invoked on an `'fit-request'` message.\n   */\n  protected onFitRequest(msg: Message): void {\n    let resize = Widget.ResizeMessage.UnknownSize;\n    MessageLoop.sendMessage(this, resize);\n  }\n\n  /**\n   * Handle `'activate-request'` messages.\n   */\n  protected onActivateRequest(msg: Message): void {\n    this._term.focus();\n  }\n\n  /**\n   * Initialize the terminal object.\n   */\n  private _initializeTerm(): void {\n    this._term.on('data', (data: string) => {\n      if (this._session) {\n        this._session.send({\n          type: 'stdin',\n          content: [data]\n        });\n      }\n    });\n\n    this._term.on('title', (title: string) => {\n      this.title.label = title;\n    });\n  }\n\n  /**\n   * Handle a message from the terminal session.\n   */\n  private _onMessage(\n    sender: TerminalSession.ISession,\n    msg: TerminalSession.IMessage\n  ): void {\n    switch (msg.type) {\n      case 'stdout':\n        if (msg.content) {\n          this._term.write(msg.content[0] as string);\n        }\n        break;\n      case 'disconnect':\n        this._term.write('\\r\\n\\r\\n[Finished... Term Session]\\r\\n');\n        break;\n      default:\n        break;\n    }\n  }\n\n  /**\n   * Resize the terminal based on computed geometry.\n   */\n  private _resizeTerminal() {\n    fit(this._term);\n    if (this._offsetWidth === -1) {\n      this._offsetWidth = this.node.offsetWidth;\n    }\n    if (this._offsetHeight === -1) {\n      this._offsetHeight = this.node.offsetHeight;\n    }\n    this._setSessionSize();\n    this._needsResize = false;\n  }\n\n  /**\n   * Set the size of the terminal in the session.\n   */\n  private _setSessionSize(): void {\n    let content = [\n      this._term.rows,\n      this._term.cols,\n      this._offsetHeight,\n      this._offsetWidth\n    ];\n    if (this._session) {\n      this._session.send({ type: 'set_size', content });\n    }\n  }\n\n  private _term: Xterm;\n  private _needsResize = true;\n  private _theme: Terminal.Theme = 'dark';\n  private _session: TerminalSession.ISession | null = null;\n  private _initialCommand: string;\n  private _termOpened = false;\n  private _offsetWidth = -1;\n  private _offsetHeight = -1;\n}\n\n/**\n * The namespace for `Terminal` class statics.\n */\nexport namespace Terminal {\n  /**\n   * Options for the terminal widget.\n   */\n  export interface IOptions {\n    /**\n     * The font size of the terminal in pixels.\n     */\n    fontSize: number;\n\n    /**\n     * The theme of the terminal.\n     */\n    theme: Theme;\n\n    /**\n     * Whether to blink the cursor.  Can only be set at startup.\n     */\n    cursorBlink: boolean;\n\n    /**\n     * An optional command to run when the session starts.\n     */\n    initialCommand: string;\n  }\n\n  /**\n   * The default options used for creating terminals.\n   */\n  export const defaultOptions: IOptions = {\n    theme: 'dark',\n    fontSize: 13,\n    cursorBlink: true,\n    initialCommand: ''\n  };\n\n  /**\n   * A type for the terminal theme.\n   */\n  export type Theme = 'light' | 'dark';\n}\n\n/**\n * A namespace for private data.\n */\nnamespace Private {\n  /**\n   * Get term.js options from ITerminalOptions.\n   */\n  export function getConfig(\n    options: Partial<Terminal.IOptions>\n  ): IXtermOptions {\n    let config: IXtermOptions = {};\n    if (options.cursorBlink !== void 0) {\n      config.cursorBlink = options.cursorBlink;\n    } else {\n      config.cursorBlink = Terminal.defaultOptions.cursorBlink;\n    }\n    if (options.fontSize !== void 0) {\n      config.fontSize = options.fontSize;\n    } else {\n      config.fontSize = Terminal.defaultOptions.fontSize;\n    }\n    return config;\n  }\n\n  /**\n   * An incrementing counter for ids.\n   */\n  export let id = 0;\n\n  /**\n   * The light terminal theme.\n   */\n  export const lightTheme = {\n    foreground: '#000',\n    background: '#fff',\n    cursor: '#616161', // md-grey-700\n    cursorAccent: '#F5F5F5', // md-grey-100\n    selection: 'rgba(97, 97, 97, 0.3)' // md-grey-700\n  };\n\n  /**\n   * The dark terminal theme.\n   */\n  export const darkTheme = {\n    foreground: '#fff',\n    background: '#000',\n    cursor: '#fff',\n    cursorAccent: '#000',\n    selection: 'rgba(255, 255, 255, 0.3)'\n  };\n}\n"]}