{"version":3,"file":"settingeditor.js","sourceRoot":"","sources":["../../../../settingeditor/src/settingeditor.tsx"],"names":[],"mappings":"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","sourcesContent":["/*-----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\n\nimport { CodeEditor } from '@jupyterlab/codeeditor';\n\nimport { ISettingRegistry, IStateDB } from '@jupyterlab/coreutils';\n\nimport { RenderMimeRegistry } from '@jupyterlab/rendermime';\n\nimport { CommandRegistry } from '@phosphor/commands';\n\nimport { JSONExt, JSONObject, JSONValue } from '@phosphor/coreutils';\n\nimport { Message } from '@phosphor/messaging';\n\nimport { ISignal } from '@phosphor/signaling';\n\nimport { PanelLayout, Widget } from '@phosphor/widgets';\n\nimport * as React from 'react';\n\nimport * as ReactDOM from 'react-dom';\n\nimport { PluginEditor } from './plugineditor';\n\nimport { PluginList } from './pluginlist';\n\nimport { SplitPanel } from './splitpanel';\n\n/**\n * The ratio panes in the setting editor.\n */\nconst DEFAULT_LAYOUT: SettingEditor.ILayoutState = {\n  sizes: [1, 3],\n  container: {\n    editor: 'raw',\n    plugin: '',\n    sizes: [1, 1]\n  }\n};\n\n/**\n * An interface for modifying and saving application settings.\n */\nexport class SettingEditor extends Widget {\n  /**\n   * Create a new setting editor.\n   */\n  constructor(options: SettingEditor.IOptions) {\n    super();\n    this.addClass('jp-SettingEditor');\n    this.key = options.key;\n    this.state = options.state;\n\n    const { commands, editorFactory, rendermime } = options;\n    const layout = (this.layout = new PanelLayout());\n    const registry = (this.registry = options.registry);\n    const panel = (this._panel = new SplitPanel({\n      orientation: 'horizontal',\n      renderer: SplitPanel.defaultRenderer,\n      spacing: 1\n    }));\n    const instructions = (this._instructions = new Widget());\n    const editor = (this._editor = new PluginEditor({\n      commands,\n      editorFactory,\n      registry,\n      rendermime\n    }));\n    const confirm = () => editor.confirm();\n    const list = (this._list = new PluginList({ confirm, registry }));\n    const when = options.when;\n\n    instructions.addClass('jp-SettingEditorInstructions');\n    Private.populateInstructionsNode(instructions.node);\n\n    if (when) {\n      this._when = Array.isArray(when) ? Promise.all(when) : when;\n    }\n\n    panel.addClass('jp-SettingEditor-main');\n    layout.addWidget(panel);\n    panel.addWidget(list);\n    panel.addWidget(instructions);\n\n    SplitPanel.setStretch(list, 0);\n    SplitPanel.setStretch(instructions, 1);\n    SplitPanel.setStretch(editor, 1);\n\n    editor.stateChanged.connect(this._onStateChanged, this);\n    list.changed.connect(this._onStateChanged, this);\n    panel.handleMoved.connect(this._onStateChanged, this);\n  }\n\n  /**\n   * The state database key for the editor's state management.\n   */\n  readonly key: string;\n\n  /**\n   * The setting registry used by the editor.\n   */\n  readonly registry: ISettingRegistry;\n\n  /**\n   * The state database used to store layout.\n   */\n  readonly state: IStateDB;\n\n  /**\n   * Whether the raw editor revert functionality is enabled.\n   */\n  get canRevertRaw(): boolean {\n    return this._editor.raw.canRevert;\n  }\n\n  /**\n   * Whether the raw editor save functionality is enabled.\n   */\n  get canSaveRaw(): boolean {\n    return this._editor.raw.canSave;\n  }\n\n  /**\n   * Emits when the commands passed in at instantiation change.\n   */\n  get commandsChanged(): ISignal<any, string[]> {\n    return this._editor.raw.commandsChanged;\n  }\n\n  /**\n   * Whether the debug panel is visible.\n   */\n  get isDebugVisible(): boolean {\n    return this._editor.raw.isDebugVisible;\n  }\n\n  /**\n   * The currently loaded settings.\n   */\n  get settings(): ISettingRegistry.ISettings {\n    return this._editor.settings;\n  }\n\n  /**\n   * The inspectable raw user editor source for the currently loaded settings.\n   */\n  get source(): CodeEditor.IEditor {\n    return this._editor.raw.source;\n  }\n\n  /**\n   * Dispose of the resources held by the setting editor.\n   */\n  dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n\n    super.dispose();\n    this._editor.dispose();\n    this._instructions.dispose();\n    this._list.dispose();\n    this._panel.dispose();\n  }\n\n  /**\n   * Revert raw editor back to original settings.\n   */\n  revert(): void {\n    this._editor.raw.revert();\n  }\n\n  /**\n   * Save the contents of the raw editor.\n   */\n  save(): Promise<void> {\n    return this._editor.raw.save();\n  }\n\n  /**\n   * Toggle the debug functionality.\n   */\n  toggleDebug(): void {\n    this._editor.raw.toggleDebug();\n  }\n\n  /**\n   * Handle `'after-attach'` messages.\n   */\n  protected onAfterAttach(msg: Message): void {\n    super.onAfterAttach(msg);\n    this._panel.hide();\n    this._fetchState()\n      .then(() => {\n        this._panel.show();\n        this._setState();\n      })\n      .catch(reason => {\n        console.error('Fetching setting editor state failed', reason);\n        this._panel.show();\n        this._setState();\n      });\n  }\n\n  /**\n   * Handle `'close-request'` messages.\n   */\n  protected onCloseRequest(msg: Message): void {\n    this._editor\n      .confirm()\n      .then(() => {\n        super.onCloseRequest(msg);\n        this.dispose();\n      })\n      .catch(() => {\n        /* no op */\n      });\n  }\n\n  /**\n   * Get the state of the panel.\n   */\n  private _fetchState(): Promise<void> {\n    if (this._fetching) {\n      return this._fetching;\n    }\n\n    const { key, state } = this;\n    const promises = [state.fetch(key), this._when];\n\n    return (this._fetching = Promise.all(promises).then(([saved]) => {\n      this._fetching = null;\n\n      if (this._saving) {\n        return;\n      }\n\n      this._state = Private.normalizeState(saved, this._state);\n    }));\n  }\n\n  /**\n   * Handle root level layout state changes.\n   */\n  private _onStateChanged(): void {\n    this._state.sizes = this._panel.relativeSizes();\n    this._state.container = this._editor.state;\n    this._state.container.editor = this._list.editor;\n    this._state.container.plugin = this._list.selection;\n    this._saveState()\n      .then(() => {\n        this._setState();\n      })\n      .catch(reason => {\n        console.error('Saving setting editor state failed', reason);\n        this._setState();\n      });\n  }\n\n  /**\n   * Set the state of the setting editor.\n   */\n  private _saveState(): Promise<void> {\n    const { key, state } = this;\n    const value = this._state;\n\n    this._saving = true;\n    return state\n      .save(key, value)\n      .then(() => {\n        this._saving = false;\n      })\n      .catch((reason: any) => {\n        this._saving = false;\n        throw reason;\n      });\n  }\n\n  /**\n   * Set the layout sizes.\n   */\n  private _setLayout(): void {\n    const editor = this._editor;\n    const panel = this._panel;\n    const state = this._state;\n\n    editor.state = state.container;\n\n    // Allow the message queue (which includes fit requests that might disrupt\n    // setting relative sizes) to clear before setting sizes.\n    requestAnimationFrame(() => {\n      panel.setRelativeSizes(state.sizes);\n    });\n  }\n\n  /**\n   * Set the presets of the setting editor.\n   */\n  private _setState(): void {\n    const editor = this._editor;\n    const list = this._list;\n    const panel = this._panel;\n    const { container } = this._state;\n\n    if (!container.plugin) {\n      editor.settings = null;\n      list.selection = '';\n      this._setLayout();\n      return;\n    }\n\n    if (editor.settings && editor.settings.plugin === container.plugin) {\n      this._setLayout();\n      return;\n    }\n\n    const instructions = this._instructions;\n\n    this.registry\n      .load(container.plugin)\n      .then(settings => {\n        if (instructions.isAttached) {\n          instructions.parent = null;\n        }\n        if (!editor.isAttached) {\n          panel.addWidget(editor);\n        }\n        editor.settings = settings;\n        list.editor = container.editor;\n        list.selection = container.plugin;\n        this._setLayout();\n      })\n      .catch((reason: Error) => {\n        console.error(`Loading settings failed: ${reason.message}`);\n        list.selection = this._state.container.plugin = '';\n        editor.settings = null;\n        this._setLayout();\n      });\n  }\n\n  private _editor: PluginEditor;\n  private _fetching: Promise<void> | null = null;\n  private _instructions: Widget;\n  private _list: PluginList;\n  private _panel: SplitPanel;\n  private _saving = false;\n  private _state: SettingEditor.ILayoutState = JSONExt.deepCopy(DEFAULT_LAYOUT);\n  private _when: Promise<any>;\n}\n\n/**\n * A namespace for `SettingEditor` statics.\n */\nexport namespace SettingEditor {\n  /**\n   * The instantiation options for a setting editor.\n   */\n  export interface IOptions {\n    /**\n     * The toolbar commands and registry for the setting editor toolbar.\n     */\n    commands: {\n      /**\n       * The command registry.\n       */\n      registry: CommandRegistry;\n\n      /**\n       * The debug command ID.\n       */\n      debug: string;\n\n      /**\n       * The revert command ID.\n       */\n      revert: string;\n\n      /**\n       * The save command ID.\n       */\n      save: string;\n    };\n\n    /**\n     * The editor factory used by the setting editor.\n     */\n    editorFactory: CodeEditor.Factory;\n\n    /**\n     * The state database key for the editor's state management.\n     */\n    key: string;\n\n    /**\n     * The setting registry the editor modifies.\n     */\n    registry: ISettingRegistry;\n\n    /**\n     * The optional MIME renderer to use for rendering debug messages.\n     */\n    rendermime?: RenderMimeRegistry;\n\n    /**\n     * The state database used to store layout.\n     */\n    state: IStateDB;\n\n    /**\n     * The point after which the editor should restore its state.\n     */\n    when?: Promise<any> | Array<Promise<any>>;\n  }\n\n  /**\n   * The layout state for the setting editor.\n   */\n  export interface ILayoutState extends JSONObject {\n    /**\n     * The layout state for a plugin editor container.\n     */\n    container: IPluginLayout;\n\n    /**\n     * The relative sizes of the plugin list and plugin editor.\n     */\n    sizes: number[];\n  }\n\n  /**\n   * The layout information that is stored and restored from the state database.\n   */\n  export interface IPluginLayout extends JSONObject {\n    /**\n     * The current plugin being displayed.\n     */\n    plugin: string;\n\n    editor: 'raw' | 'table';\n\n    sizes: number[];\n  }\n}\n\n/**\n * A namespace for private module data.\n */\nnamespace Private {\n  /**\n   * Populate the instructions text node.\n   */\n  export function populateInstructionsNode(node: HTMLElement): void {\n    const iconClass = `jp-SettingEditorInstructions-icon jp-JupyterIcon`;\n\n    ReactDOM.render(\n      <React.Fragment>\n        <h2>\n          <span className={iconClass} />\n          <span className=\"jp-SettingEditorInstructions-title\">Settings</span>\n        </h2>\n        <span className=\"jp-SettingEditorInstructions-text\">\n          Select a plugin from the list to view and edit its preferences.\n        </span>\n      </React.Fragment>,\n      node\n    );\n  }\n\n  /**\n   * Return a normalized restored layout state that defaults to the presets.\n   */\n  export function normalizeState(\n    saved: JSONObject | null,\n    current: SettingEditor.ILayoutState\n  ): SettingEditor.ILayoutState {\n    if (!saved) {\n      return JSONExt.deepCopy(DEFAULT_LAYOUT);\n    }\n\n    if (!('sizes' in saved) || !numberArray(saved.sizes)) {\n      saved.sizes = JSONExt.deepCopy(DEFAULT_LAYOUT.sizes);\n    }\n    if (!('container' in saved)) {\n      saved.container = JSONExt.deepCopy(DEFAULT_LAYOUT.container);\n      return saved as SettingEditor.ILayoutState;\n    }\n\n    const container =\n      'container' in saved &&\n      saved.container &&\n      typeof saved.container === 'object'\n        ? (saved.container as JSONObject)\n        : {};\n\n    saved.container = {\n      editor:\n        container.editor === 'raw' || container.editor === 'table'\n          ? container.editor\n          : DEFAULT_LAYOUT.container.editor,\n      plugin:\n        typeof container.plugin === 'string'\n          ? container.plugin\n          : DEFAULT_LAYOUT.container.plugin,\n      sizes: numberArray(container.sizes)\n        ? container.sizes\n        : JSONExt.deepCopy(DEFAULT_LAYOUT.container.sizes)\n    };\n\n    return saved as SettingEditor.ILayoutState;\n  }\n\n  /**\n   * Tests whether an array consists exclusively of numbers.\n   */\n  function numberArray(value: JSONValue): boolean {\n    return Array.isArray(value) && value.every(x => typeof x === 'number');\n  }\n}\n"]}