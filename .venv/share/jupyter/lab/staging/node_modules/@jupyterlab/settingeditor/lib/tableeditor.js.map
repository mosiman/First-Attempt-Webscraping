{"version":3,"file":"tableeditor.js","sourceRoot":"","sources":["../../../../settingeditor/src/tableeditor.tsx"],"names":[],"mappings":"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","sourcesContent":["/*-----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\n\nimport { ISettingRegistry } from '@jupyterlab/coreutils';\n\nimport { Message } from '@phosphor/messaging';\n\nimport { Widget } from '@phosphor/widgets';\n\nimport * as React from 'react';\n\nimport * as ReactDOM from 'react-dom';\n\n/**\n * A tabular editor for plugin settings.\n */\nexport class TableEditor extends Widget {\n  /**\n   * Create a new table editor for settings.\n   */\n  constructor(options: TableEditor.IOptions) {\n    super({ node: document.createElement('fieldset') });\n    this.addClass('jp-SettingsTableEditor');\n  }\n\n  /**\n   * Tests whether the settings have been modified and need saving.\n   */\n  get isDirty(): boolean {\n    return false; // TODO: remove placeholder.\n  }\n\n  /**\n   * The plugin settings.\n   */\n  get settings(): ISettingRegistry.ISettings | null {\n    return this._settings;\n  }\n  set settings(settings: ISettingRegistry.ISettings | null) {\n    if (this._settings) {\n      this._settings.changed.disconnect(this._onSettingsChanged, this);\n    }\n    this._settings = settings;\n    if (this._settings) {\n      this._settings.changed.connect(this._onSettingsChanged, this);\n    }\n    this.update();\n  }\n\n  /**\n   * Handle `'update-request'` messages.\n   */\n  protected onUpdateRequest(msg: Message): void {\n    const settings = this._settings;\n\n    // Populate if possible.\n    if (settings) {\n      Private.populateTable(this.node, settings);\n    }\n  }\n\n  /**\n   * Handle setting changes.\n   */\n  private _onSettingsChanged(): void {\n    this.update();\n  }\n\n  private _settings: ISettingRegistry.ISettings | null = null;\n}\n\n/**\n * A namespace for `TableEditor` statics.\n */\nexport namespace TableEditor {\n  /**\n   * The instantiation options for a table editor.\n   */\n  export interface IOptions {\n    /**\n     * A function the table editor calls on save errors.\n     */\n    onSaveError: (reason: any) => void;\n  }\n}\n\n/**\n * A namespace for private module data.\n */\nnamespace Private {\n  /**\n   * Populate the fieldset with a specific plugin's metadata.\n   */\n  export function populateTable(\n    node: HTMLElement,\n    settings: ISettingRegistry.ISettings\n  ): void {\n    const { plugin, schema } = settings;\n    const fields: { [property: string]: React.ReactElement<any> } = {};\n    const properties = schema.properties || {};\n    const title = `(${plugin}) ${schema.description}`;\n    const label = `Fields - ${schema.title || plugin}`;\n\n    Object.keys(properties).forEach(property => {\n      const field = properties[property];\n      const { type } = field;\n      const defaultValue = settings.default(property);\n      const title = field.title || property;\n      const value = JSON.stringify(defaultValue) || '';\n      const valueTitle = JSON.stringify(defaultValue, null, 4);\n\n      fields[property] = (\n        <tr key={property}>\n          <td className=\"jp-SettingsTableEditor-key\" title={title}>\n            <code title={title}>{property}</code>\n          </td>\n          <td className=\"jp-SettingsTableEditor-value\" title={valueTitle}>\n            <code title={valueTitle}>{value}</code>\n          </td>\n          <td className=\"jp-SettingsTableEditor-type\">{type}</td>\n        </tr>\n      );\n    });\n\n    const rows = Object.keys(fields)\n      .sort((a, b) => a.localeCompare(b))\n      .map(property => fields[property]);\n    const fragment = (\n      <React.Fragment>\n        <legend title={title}>{label}</legend>\n        <div className=\"jp-SettingsTableEditor-wrapper\">\n          <table>\n            <thead>\n              <tr>\n                <th className=\"jp-SettingsTableEditor-key\">Key</th>\n                <th className=\"jp-SettingsTableEditor-value\">Default</th>\n                <th className=\"jp-SettingsTableEditor-type\">Type</th>\n              </tr>\n            </thead>\n            <tbody>{rows}</tbody>\n          </table>\n        </div>\n      </React.Fragment>\n    );\n\n    ReactDOM.unmountComponentAtNode(node);\n    ReactDOM.render(fragment, node);\n  }\n}\n"]}