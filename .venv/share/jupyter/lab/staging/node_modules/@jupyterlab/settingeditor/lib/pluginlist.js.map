{"version":3,"file":"pluginlist.js","sourceRoot":"","sources":["../../../../settingeditor/src/pluginlist.tsx"],"names":[],"mappings":"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","sourcesContent":["/*-----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\n\nimport {\n  ICON_CLASS_KEY,\n  ICON_LABEL_KEY,\n  ISettingRegistry\n} from '@jupyterlab/coreutils';\n\nimport { Message } from '@phosphor/messaging';\n\nimport { ISignal, Signal } from '@phosphor/signaling';\n\nimport { Widget } from '@phosphor/widgets';\n\nimport * as React from 'react';\n\nimport * as ReactDOM from 'react-dom';\n\n/**\n * A list of plugins with editable settings.\n */\nexport class PluginList extends Widget {\n  /**\n   * Create a new plugin list.\n   */\n  constructor(options: PluginList.IOptions) {\n    super();\n    this.registry = options.registry;\n    this.addClass('jp-PluginList');\n    this._confirm = options.confirm;\n    this.registry.pluginChanged.connect(() => {\n      this.update();\n    }, this);\n  }\n\n  /**\n   * The setting registry.\n   */\n  readonly registry: ISettingRegistry;\n\n  /**\n   * A signal emitted when a list user interaction happens.\n   */\n  get changed(): ISignal<this, void> {\n    return this._changed;\n  }\n\n  /**\n   * The editor type currently selected.\n   */\n  get editor(): 'raw' | 'table' {\n    return this._editor;\n  }\n  set editor(editor: 'raw' | 'table') {\n    if (this._editor === editor) {\n      return;\n    }\n\n    this._editor = editor;\n    this.update();\n  }\n\n  /**\n   * The selection value of the plugin list.\n   */\n  get scrollTop(): number {\n    return this.node.querySelector('ul').scrollTop;\n  }\n\n  /**\n   * The selection value of the plugin list.\n   */\n  get selection(): string {\n    return this._selection;\n  }\n  set selection(selection: string) {\n    if (this._selection === selection) {\n      return;\n    }\n    this._selection = selection;\n    this.update();\n  }\n\n  /**\n   * Handle the DOM events for the widget.\n   *\n   * @param event - The DOM event sent to the widget.\n   *\n   * #### Notes\n   * This method implements the DOM `EventListener` interface and is\n   * called in response to events on the plugin list's node. It should\n   * not be called directly by user code.\n   */\n  handleEvent(event: Event): void {\n    switch (event.type) {\n      case 'mousedown':\n        this._evtMousedown(event as MouseEvent);\n        break;\n      default:\n        break;\n    }\n  }\n\n  /**\n   * Handle `'after-attach'` messages.\n   */\n  protected onAfterAttach(msg: Message): void {\n    this.node.addEventListener('mousedown', this);\n    this.update();\n  }\n\n  /**\n   * Handle `before-detach` messages for the widget.\n   */\n  protected onBeforeDetach(msg: Message): void {\n    this.node.removeEventListener('mousedown', this);\n  }\n\n  /**\n   * Handle `'update-request'` messages.\n   */\n  protected onUpdateRequest(msg: Message): void {\n    const { node, registry } = this;\n    const type = this._editor;\n    const selection = this._selection;\n\n    Private.populateList(registry, type, selection, node);\n    node.querySelector('ul').scrollTop = this._scrollTop;\n  }\n\n  /**\n   * Handle the `'mousedown'` event for the plugin list.\n   *\n   * @param event - The DOM event sent to the widget\n   */\n  private _evtMousedown(event: MouseEvent): void {\n    event.preventDefault();\n\n    let target = event.target as HTMLElement;\n    let id = target.getAttribute('data-id');\n\n    if (id === this._selection) {\n      return;\n    }\n\n    const editor = target.getAttribute('data-editor');\n\n    if (editor) {\n      this._editor = editor as 'raw' | 'table';\n      this._changed.emit(undefined);\n      this.update();\n      return;\n    }\n\n    if (!id) {\n      while (!id && target !== this.node) {\n        target = target.parentElement as HTMLElement;\n        id = target.getAttribute('data-id');\n      }\n    }\n\n    if (!id) {\n      return;\n    }\n\n    this._confirm()\n      .then(() => {\n        this._scrollTop = this.scrollTop;\n        this._selection = id;\n        this._changed.emit(undefined);\n        this.update();\n      })\n      .catch(() => {\n        /* no op */\n      });\n  }\n\n  private _changed = new Signal<this, void>(this);\n  private _confirm: () => Promise<void>;\n  private _editor: 'raw' | 'table' = 'raw';\n  private _scrollTop = 0;\n  private _selection = '';\n}\n\n/**\n * A namespace for `PluginList` statics.\n */\nexport namespace PluginList {\n  /**\n   * The instantiation options for a plugin list.\n   */\n  export interface IOptions {\n    /**\n     * A function that allows for asynchronously confirming a selection.\n     *\n     * #### Notest\n     * If the promise returned by the function resolves, then the selection will\n     * succeed and emit an event. If the promise rejects, the selection is not\n     * made.\n     */\n    confirm: () => Promise<void>;\n\n    /**\n     * The setting registry for the plugin list.\n     */\n    registry: ISettingRegistry;\n  }\n}\n\n/**\n * A namespace for private module data.\n */\nnamespace Private {\n  /**\n   * Check the plugin for a rendering hint's value.\n   *\n   * #### Notes\n   * The order of priority for overridden hints is as follows, from most\n   * important to least:\n   * 1. Data set by the end user in a settings file.\n   * 2. Data set by the plugin author as a schema default.\n   * 3. Data set by the plugin author as a top-level key of the schema.\n   */\n  function getHint(\n    key: string,\n    registry: ISettingRegistry,\n    plugin: ISettingRegistry.IPlugin\n  ): string {\n    // First, give priority to checking if the hint exists in the user data.\n    let hint = plugin.data.user[key];\n\n    // Second, check to see if the hint exists in composite data, which folds\n    // in default values from the schema.\n    if (!hint) {\n      hint = plugin.data.composite[key];\n    }\n\n    // Third, check to see if the plugin schema has defined the hint.\n    if (!hint) {\n      hint = plugin.schema[key];\n    }\n\n    // Finally, use the defaults from the registry schema.\n    if (!hint) {\n      const { properties } = registry.schema;\n\n      hint = properties && properties[key] && properties[key].default;\n    }\n\n    return typeof hint === 'string' ? hint : '';\n  }\n\n  /**\n   * Populate the plugin list.\n   */\n  export function populateList(\n    registry: ISettingRegistry,\n    type: 'raw' | 'table',\n    selection: string,\n    node: HTMLElement\n  ): void {\n    const plugins = sortPlugins(registry.plugins);\n    const items = plugins.map(plugin => {\n      const itemTitle = `(${plugin.id}) ${plugin.schema.description}`;\n      const image = getHint(ICON_CLASS_KEY, registry, plugin);\n      const iconClass = `jp-PluginList-icon${image ? ' ' + image : ''}`;\n      const iconTitle = getHint(ICON_LABEL_KEY, registry, plugin);\n      return (\n        <li\n          className={plugin.id === selection ? 'jp-mod-selected' : ''}\n          data-id={plugin.id}\n          key={plugin.id}\n          title={itemTitle}\n        >\n          <span className={iconClass} title={iconTitle} />\n          <span>{plugin.schema.title || plugin.id}</span>\n        </li>\n      );\n    });\n\n    ReactDOM.unmountComponentAtNode(node);\n    ReactDOM.render(\n      <React.Fragment>\n        <div className=\"jp-PluginList-switcher\">\n          <button data-editor=\"raw\" disabled={type === 'raw'}>\n            Raw View\n          </button>\n          <button data-editor=\"table\" disabled={type === 'table'}>\n            Table View\n          </button>\n        </div>\n        <ul>{items}</ul>\n      </React.Fragment>,\n      node\n    );\n  }\n\n  /**\n   * Sort a list of plugins by ID.\n   */\n  function sortPlugins(\n    plugins: ISettingRegistry.IPlugin[]\n  ): ISettingRegistry.IPlugin[] {\n    return plugins.sort((a, b) => {\n      return (a.schema.title || a.id).localeCompare(b.schema.title || b.id);\n    });\n  }\n}\n"]}