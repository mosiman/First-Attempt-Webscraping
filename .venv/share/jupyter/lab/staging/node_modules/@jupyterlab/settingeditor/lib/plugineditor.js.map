{"version":3,"file":"plugineditor.js","sourceRoot":"","sources":["../../../../settingeditor/src/plugineditor.ts"],"names":[],"mappings":"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","sourcesContent":["/*-----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\n\nimport { Dialog, showDialog } from '@jupyterlab/apputils';\n\nimport { CodeEditor } from '@jupyterlab/codeeditor';\n\nimport { ISettingRegistry } from '@jupyterlab/coreutils';\n\nimport { RenderMimeRegistry } from '@jupyterlab/rendermime';\n\nimport { CommandRegistry } from '@phosphor/commands';\n\nimport { JSONExt } from '@phosphor/coreutils';\n\nimport { Message } from '@phosphor/messaging';\n\nimport { ISignal, Signal } from '@phosphor/signaling';\n\nimport { Widget, StackedLayout } from '@phosphor/widgets';\n\nimport { RawEditor } from './raweditor';\n\nimport { SettingEditor } from './settingeditor';\n\nimport { TableEditor } from './tableeditor';\n\n/**\n * The class name added to all plugin editors.\n */\nconst PLUGIN_EDITOR_CLASS = 'jp-PluginEditor';\n\n/**\n * An individual plugin settings editor.\n */\nexport class PluginEditor extends Widget {\n  /**\n   * Create a new plugin editor.\n   *\n   * @param options - The plugin editor instantiation options.\n   */\n  constructor(options: PluginEditor.IOptions) {\n    super();\n    this.addClass(PLUGIN_EDITOR_CLASS);\n\n    const { commands, editorFactory, registry, rendermime } = options;\n    const layout = (this.layout = new StackedLayout());\n    const { onSaveError } = Private;\n\n    this.raw = this._rawEditor = new RawEditor({\n      commands,\n      editorFactory,\n      onSaveError,\n      registry,\n      rendermime\n    });\n    this.table = this._tableEditor = new TableEditor({ onSaveError });\n    this._rawEditor.handleMoved.connect(this._onStateChanged, this);\n\n    layout.addWidget(this._rawEditor);\n    layout.addWidget(this._tableEditor);\n  }\n\n  /**\n   * The plugin editor's raw editor.\n   */\n  readonly raw: RawEditor;\n\n  /**\n   * The plugin editor's table editor.\n   */\n  readonly table: TableEditor;\n\n  /**\n   * Tests whether the settings have been modified and need saving.\n   */\n  get isDirty(): boolean {\n    return this._rawEditor.isDirty || this._tableEditor.isDirty;\n  }\n\n  /**\n   * The plugin settings being edited.\n   */\n  get settings(): ISettingRegistry.ISettings | null {\n    return this._settings;\n  }\n  set settings(settings: ISettingRegistry.ISettings | null) {\n    if (this._settings === settings) {\n      return;\n    }\n\n    const raw = this._rawEditor;\n    const table = this._tableEditor;\n\n    this._settings = raw.settings = table.settings = settings;\n    this.update();\n  }\n\n  /**\n   * The plugin editor layout state.\n   */\n  get state(): SettingEditor.IPluginLayout {\n    const editor = this._editor;\n    const plugin = this._settings ? this._settings.plugin : '';\n    const { sizes } = this._rawEditor;\n\n    return { editor, plugin, sizes };\n  }\n  set state(state: SettingEditor.IPluginLayout) {\n    if (JSONExt.deepEqual(this.state, state)) {\n      return;\n    }\n\n    this._editor = state.editor;\n    this._rawEditor.sizes = state.sizes;\n    this.update();\n  }\n\n  /**\n   * A signal that emits when editor layout state changes and needs to be saved.\n   */\n  get stateChanged(): ISignal<this, void> {\n    return this._stateChanged;\n  }\n\n  /**\n   * If the editor is in a dirty state, confirm that the user wants to leave.\n   */\n  confirm(): Promise<void> {\n    if (this.isHidden || !this.isAttached || !this.isDirty) {\n      return Promise.resolve(undefined);\n    }\n\n    return showDialog({\n      title: 'You have unsaved changes.',\n      body: 'Do you want to leave without saving?',\n      buttons: [Dialog.cancelButton(), Dialog.okButton()]\n    }).then(result => {\n      if (!result.button.accept) {\n        throw new Error('User canceled.');\n      }\n    });\n  }\n\n  /**\n   * Dispose of the resources held by the plugin editor.\n   */\n  dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n\n    super.dispose();\n    this._rawEditor.dispose();\n    this._tableEditor.dispose();\n  }\n\n  /**\n   * Handle `after-attach` messages.\n   */\n  protected onAfterAttach(msg: Message): void {\n    this.update();\n  }\n\n  /**\n   * Handle `'update-request'` messages.\n   */\n  protected onUpdateRequest(msg: Message): void {\n    const editor = this._editor;\n    const raw = this._rawEditor;\n    const table = this._tableEditor;\n    const settings = this._settings;\n\n    if (!settings) {\n      this.hide();\n      return;\n    }\n\n    this.show();\n    (editor === 'raw' ? table : raw).hide();\n    (editor === 'raw' ? raw : table).show();\n  }\n\n  /**\n   * Handle layout state changes that need to be saved.\n   */\n  private _onStateChanged(): void {\n    (this.stateChanged as Signal<any, void>).emit(undefined);\n  }\n\n  private _editor: 'raw' | 'table' = 'raw';\n  private _rawEditor: RawEditor;\n  private _tableEditor: TableEditor;\n  private _settings: ISettingRegistry.ISettings | null = null;\n  private _stateChanged = new Signal<this, void>(this);\n}\n\n/**\n * A namespace for `PluginEditor` statics.\n */\nexport namespace PluginEditor {\n  /**\n   * The instantiation options for a plugin editor.\n   */\n  export interface IOptions {\n    /**\n     * The toolbar commands and registry for the setting editor toolbar.\n     */\n    commands: {\n      /**\n       * The command registry.\n       */\n      registry: CommandRegistry;\n\n      /**\n       * The debug command ID.\n       */\n      debug: string;\n\n      /**\n       * The revert command ID.\n       */\n      revert: string;\n\n      /**\n       * The save command ID.\n       */\n      save: string;\n    };\n\n    /**\n     * The editor factory used by the plugin editor.\n     */\n    editorFactory: CodeEditor.Factory;\n\n    /**\n     * The setting registry used by the editor.\n     */\n    registry: ISettingRegistry;\n\n    /**\n     * The optional MIME renderer to use for rendering debug messages.\n     */\n    rendermime?: RenderMimeRegistry;\n  }\n}\n\n/**\n * A namespace for private module data.\n */\nnamespace Private {\n  /**\n   * Handle save errors.\n   */\n  export function onSaveError(reason: any): void {\n    console.error(`Saving setting editor value failed: ${reason.message}`);\n\n    showDialog({\n      title: 'Your changes were not saved.',\n      body: reason.message,\n      buttons: [Dialog.okButton()]\n    });\n  }\n}\n"]}