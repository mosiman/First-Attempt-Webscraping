{"version":3,"file":"raweditor.js","sourceRoot":"","sources":["../../../../settingeditor/src/raweditor.ts"],"names":[],"mappings":";AAAA,0CAA0C;AAC1C,2DAA2D;;AAE3D,mDAA+C;AAE/C,uDAAuE;AAUvE,mDAAsD;AAEtD,+CAAsD;AAEtD,2CAA8C;AAE9C,6CAA0C;AAE1C;;GAEG;AACH,MAAM,gBAAgB,GAAG,sBAAsB,CAAC;AAEhD;;GAEG;AACH,MAAM,UAAU,GAAG,2BAA2B,CAAC;AAE/C;;GAEG;AACH,MAAM,WAAW,GAAG,cAAc,CAAC;AAEnC;;GAEG;AACH,MAAM,aAAa,GAAG,iBAAiB,CAAC;AAExC;;GAEG;AACH,MAAM,UAAU,GAAG,gBAAgB,CAAC;AAEpC;;GAEG;AACH,eAAuB,SAAQ,uBAAU;IACvC;;OAEG;IACH,YAAY,OAA2B;QACrC,KAAK,CAAC;YACJ,WAAW,EAAE,YAAY;YACzB,QAAQ,EAAE,uBAAU,CAAC,eAAe;YACpC,OAAO,EAAE,CAAC;SACX,CAAC,CAAC;QAsQG,eAAU,GAAG,KAAK,CAAC;QACnB,aAAQ,GAAG,KAAK,CAAC;QAEjB,qBAAgB,GAAG,IAAI,kBAAM,CAAiB,IAAI,CAAC,CAAC;QAIpD,cAAS,GAAsC,IAAI,CAAC;QACpD,aAAQ,GAAoB,IAAI,kBAAO,EAAE,CAAC;QA5QhD,MAAM,EAAE,QAAQ,EAAE,aAAa,EAAE,QAAQ,EAAE,GAAG,OAAO,CAAC;QAEtD,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAE1B,oCAAoC;QACpC,MAAM,QAAQ,GAAG,CAAC,IAAI,CAAC,SAAS,GAAG,IAAI,8BAAiB,CAAC;YACvD,KAAK,EAAE,IAAI,uBAAU,CAAC,KAAK,EAAE;YAC7B,OAAO,EAAE,aAAa;SACvB,CAAC,CAAC,CAAC;QAEJ,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,GAAG,EAAE,CAAC;QACtC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,GAAG,iBAAiB,CAAC;QACnD,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;QAE5C,0CAA0C;QAC1C,MAAM,IAAI,GAAG,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,8BAAiB,CAAC;YAC/C,KAAK,EAAE,IAAI,uBAAU,CAAC,KAAK,EAAE;YAC7B,OAAO,EAAE,aAAa;YACtB,MAAM,EAAE,EAAE,WAAW,EAAE,IAAI,EAAE;SAC9B,CAAC,CAAC,CAAC;QAEJ,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;QAC1B,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,GAAG,iBAAiB,CAAC;QAC/C,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;QAEnE,kCAAkC;QAClC,IAAI,CAAC,UAAU,GAAG,2BAAe,CAAC,IAAI,EAAE,OAAO,CAAC,UAAU,CAAC,CAAC;QAE5D,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC;QAChC,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,WAAW,CAAC;QACxC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC;QACjD,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;IAC3E,CAAC;IAOD;;OAEG;IACH,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IAED;;OAEG;IACH,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAED;;OAEG;IACH,IAAI,eAAe;QACjB,OAAO,IAAI,CAAC,gBAAgB,CAAC;IAC/B,CAAC;IAED;;OAEG;IACH,IAAI,cAAc;QAChB,OAAO,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC;IACnC,CAAC;IAED;;OAEG;IACH,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC;IACnE,CAAC;IAED;;OAEG;IACH,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IACD,IAAI,QAAQ,CAAC,QAA2C;QACtD,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YAChC,OAAO;SACR;QAED,MAAM,UAAU,GACd,QAAQ,IAAI,IAAI,CAAC,SAAS,IAAI,QAAQ,CAAC,MAAM,KAAK,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;QAE1E,IAAI,UAAU,EAAE;YACd,OAAO;SACR;QAED,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC;QAChC,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;QAExB,0CAA0C;QAC1C,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC;SAClE;QAED,IAAI,QAAQ,EAAE;YACZ,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;YAC1B,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC;YAC9D,IAAI,CAAC,kBAAkB,EAAE,CAAC;SAC3B;aAAM;YACL,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,GAAG,EAAE,CAAC;YACtC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,GAAG,EAAE,CAAC;SACnC;QAED,IAAI,CAAC,MAAM,EAAE,CAAC;IAChB,CAAC;IAED;;OAEG;IACH,IAAI,KAAK;QACP,OAAO,IAAI,CAAC,aAAa,EAAE,CAAC;IAC9B,CAAC;IACD,IAAI,KAAK,CAAC,KAAe;QACvB,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;IAC/B,CAAC;IAED;;OAEG;IACH,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;IAC3B,CAAC;IAED;;OAEG;IACH,OAAO;QACL,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,OAAO;SACR;QAED,KAAK,CAAC,OAAO,EAAE,CAAC;QAChB,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;QACzB,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;IACvB,CAAC;IAED;;OAEG;IACH,MAAM;QACJ,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC;QACvD,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IACpC,CAAC;IAED;;OAEG;IACH,IAAI;QACF,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACjB,OAAO,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;SACnC;QAED,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC;QAChC,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC;QAElD,OAAO,QAAQ;aACZ,IAAI,CAAC,MAAM,CAAC;aACZ,IAAI,CAAC,GAAG,EAAE;YACT,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QACpC,CAAC,CAAC;aACD,KAAK,CAAC,MAAM,CAAC,EAAE;YACd,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YACjC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;QAC5B,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACH,WAAW;QACT,MAAM,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC;QAElC,IAAI,SAAS,CAAC,QAAQ,EAAE;YACtB,SAAS,CAAC,IAAI,EAAE,CAAC;SAClB;aAAM;YACL,SAAS,CAAC,IAAI,EAAE,CAAC;SAClB;QACD,IAAI,CAAC,cAAc,EAAE,CAAC;IACxB,CAAC;IAED;;OAEG;IACO,aAAa,CAAC,GAAY;QAClC,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QACvD,IAAI,CAAC,MAAM,EAAE,CAAC;IAChB,CAAC;IAED;;OAEG;IACO,eAAe,CAAC,GAAY;QACpC,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC;QAChC,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC;QAChC,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;QAExB,IAAI,QAAQ,EAAE;YACZ,QAAQ,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;YAC1B,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;SACvB;IACH,CAAC;IAED;;OAEG;IACK,cAAc;QACpB,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC;QAC/C,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC;QAEhC,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;QAE9B,iEAAiE;QACjE,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,GAAG,KAAK,GAAG,EAAE;YACrC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YAClC,OAAO;SACR;QAED,MAAM,MAAM,GAAG,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QAEtC,IAAI,MAAM,EAAE;YACV,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;YAC3B,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YACjC,OAAO;SACR;QAED,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAClC,CAAC;IAED;;OAEG;IACK,kBAAkB;QACxB,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC;QAChC,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC;QAChC,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;QAExB,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,GAAG,QAAQ,CAAC,iBAAiB,EAAE,CAAC;QAChE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,GAAG,QAAQ,CAAC,GAAG,CAAC;IAC9C,CAAC;IAEO,cAAc,CAAC,MAAM,GAAG,IAAI,CAAC,UAAU,EAAE,IAAI,GAAG,IAAI,CAAC,QAAQ;QACnE,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC;QAEhC,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC;QACzB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC;YACzB,QAAQ,CAAC,KAAK;YACd,QAAQ,CAAC,MAAM;YACf,QAAQ,CAAC,IAAI;SACd,CAAC,CAAC;IACL,CAAC;CAYF;AAzRD,8BAyRC;AA8DD;;GAEG;AACH,IAAU,OAAO,CA6DhB;AA7DD,WAAU,OAAO;IACf;;OAEG;IACH,wBAA+B,MAAc;QAC3C,MAAM,MAAM,GAAG,IAAI,gBAAM,EAAE,CAAC;QAC5B,MAAM,MAAM,GAAG,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,mBAAS,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAC/D,MAAM,MAAM,GAAG,IAAI,gBAAM,EAAE,CAAC;QAC5B,MAAM,GAAG,GAAG,IAAI,kBAAO,EAAE,CAAC;QAE1B,MAAM,CAAC,IAAI,CAAC,SAAS,GAAG,aAAa,CAAC;QACtC,GAAG,CAAC,UAAU,CAAC,CAAC,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;QACpC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;QACtB,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QAEzB,OAAO,MAAM,CAAC;IAChB,CAAC;IAZe,sBAAc,iBAY7B,CAAA;IAED;;OAEG;IACH,yBACE,QAAkC,EAClC,OAAwB;QAExB,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,QAAQ,CAAC;QAEnD,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,kBAAO,CAAC,gBAAgB,EAAE,CAAC,CAAC;QAEtD,yEAAyE;QACzE,uEAAuE;QACvE,4BAA4B;QAC5B,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACnC,MAAM,IAAI,GAAG,kBAAO,CAAC,iBAAiB,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;YAEvD,IAAI,IAAI,EAAE;gBACR,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;aAC7B;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAlBe,uBAAe,kBAkB9B,CAAA;IAED;;OAEG;IACH,oBACE,MAAc,EACd,OAAwB,EACxB,SAAiB;QAEjB,MAAM,MAAM,GAAG,IAAI,gBAAM,EAAE,CAAC;QAC5B,MAAM,MAAM,GAAG,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,mBAAS,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAC/D,MAAM,MAAM,GAAG,IAAI,gBAAM,EAAE,CAAC;QAE5B,MAAM,CAAC,IAAI,CAAC,SAAS,GAAG,UAAU,CAAC;QACnC,OAAO,CAAC,UAAU,CAAC,CAAC,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;QACxC,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QAC1B,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QACzB,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;QAE5B,OAAO,MAAM,CAAC;IAChB,CAAC;IAhBe,kBAAU,aAgBzB,CAAA;AACH,CAAC,EA7DS,OAAO,KAAP,OAAO,QA6DhB","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { Toolbar } from '@jupyterlab/apputils';\n\nimport { CodeEditor, CodeEditorWrapper } from '@jupyterlab/codeeditor';\n\nimport { ISettingRegistry } from '@jupyterlab/coreutils';\n\nimport { RenderMimeRegistry } from '@jupyterlab/rendermime';\n\nimport { CommandRegistry } from '@phosphor/commands';\n\nimport { Message } from '@phosphor/messaging';\n\nimport { ISignal, Signal } from '@phosphor/signaling';\n\nimport { BoxLayout, Widget } from '@phosphor/widgets';\n\nimport { createInspector } from './inspector';\n\nimport { SplitPanel } from './splitpanel';\n\n/**\n * A class name added to all raw editors.\n */\nconst RAW_EDITOR_CLASS = 'jp-SettingsRawEditor';\n\n/**\n * A class name added to the user settings editor.\n */\nconst USER_CLASS = 'jp-SettingsRawEditor-user';\n\n/**\n * A class name added to the user editor when there are validation errors.\n */\nconst ERROR_CLASS = 'jp-mod-error';\n\n/**\n * The banner text for the default editor.\n */\nconst DEFAULT_TITLE = 'System Defaults';\n\n/**\n * The banner text for the user settings editor.\n */\nconst USER_TITLE = 'User Overrides';\n\n/**\n * A raw JSON settings editor.\n */\nexport class RawEditor extends SplitPanel {\n  /**\n   * Create a new plugin editor.\n   */\n  constructor(options: RawEditor.IOptions) {\n    super({\n      orientation: 'horizontal',\n      renderer: SplitPanel.defaultRenderer,\n      spacing: 1\n    });\n\n    const { commands, editorFactory, registry } = options;\n\n    this.registry = registry;\n    this._commands = commands;\n\n    // Create read-only defaults editor.\n    const defaults = (this._defaults = new CodeEditorWrapper({\n      model: new CodeEditor.Model(),\n      factory: editorFactory\n    }));\n\n    defaults.editor.model.value.text = '';\n    defaults.editor.model.mimeType = 'text/javascript';\n    defaults.editor.setOption('readOnly', true);\n\n    // Create read-write user settings editor.\n    const user = (this._user = new CodeEditorWrapper({\n      model: new CodeEditor.Model(),\n      factory: editorFactory,\n      config: { lineNumbers: true }\n    }));\n\n    user.addClass(USER_CLASS);\n    user.editor.model.mimeType = 'text/javascript';\n    user.editor.model.value.changed.connect(this._onTextChanged, this);\n\n    // Create and set up an inspector.\n    this._inspector = createInspector(this, options.rendermime);\n\n    this.addClass(RAW_EDITOR_CLASS);\n    this._onSaveError = options.onSaveError;\n    this.addWidget(Private.defaultsEditor(defaults));\n    this.addWidget(Private.userEditor(user, this._toolbar, this._inspector));\n  }\n\n  /**\n   * The setting registry used by the editor.\n   */\n  readonly registry: ISettingRegistry;\n\n  /**\n   * Whether the raw editor revert functionality is enabled.\n   */\n  get canRevert(): boolean {\n    return this._canRevert;\n  }\n\n  /**\n   * Whether the raw editor save functionality is enabled.\n   */\n  get canSave(): boolean {\n    return this._canSave;\n  }\n\n  /**\n   * Emits when the commands passed in at instantiation change.\n   */\n  get commandsChanged(): ISignal<any, string[]> {\n    return this._commandsChanged;\n  }\n\n  /**\n   * Whether the debug panel is visible.\n   */\n  get isDebugVisible(): boolean {\n    return this._inspector.isVisible;\n  }\n\n  /**\n   * Tests whether the settings have been modified and need saving.\n   */\n  get isDirty(): boolean {\n    return this._user.editor.model.value.text !== this._settings.raw;\n  }\n\n  /**\n   * The plugin settings being edited.\n   */\n  get settings(): ISettingRegistry.ISettings | null {\n    return this._settings;\n  }\n  set settings(settings: ISettingRegistry.ISettings | null) {\n    if (!settings && !this._settings) {\n      return;\n    }\n\n    const samePlugin =\n      settings && this._settings && settings.plugin === this._settings.plugin;\n\n    if (samePlugin) {\n      return;\n    }\n\n    const defaults = this._defaults;\n    const user = this._user;\n\n    // Disconnect old settings change handler.\n    if (this._settings) {\n      this._settings.changed.disconnect(this._onSettingsChanged, this);\n    }\n\n    if (settings) {\n      this._settings = settings;\n      this._settings.changed.connect(this._onSettingsChanged, this);\n      this._onSettingsChanged();\n    } else {\n      this._settings = null;\n      defaults.editor.model.value.text = '';\n      user.editor.model.value.text = '';\n    }\n\n    this.update();\n  }\n\n  /**\n   * Get the relative sizes of the two editor panels.\n   */\n  get sizes(): number[] {\n    return this.relativeSizes();\n  }\n  set sizes(sizes: number[]) {\n    this.setRelativeSizes(sizes);\n  }\n\n  /**\n   * The inspectable source editor for user input.\n   */\n  get source(): CodeEditor.IEditor {\n    return this._user.editor;\n  }\n\n  /**\n   * Dispose of the resources held by the raw editor.\n   */\n  dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n\n    super.dispose();\n    this._defaults.dispose();\n    this._user.dispose();\n  }\n\n  /**\n   * Revert the editor back to original settings.\n   */\n  revert(): void {\n    this._user.editor.model.value.text = this.settings.raw;\n    this._updateToolbar(false, false);\n  }\n\n  /**\n   * Save the contents of the raw editor.\n   */\n  save(): Promise<void> {\n    if (!this.isDirty) {\n      return Promise.resolve(undefined);\n    }\n\n    const settings = this._settings;\n    const source = this._user.editor.model.value.text;\n\n    return settings\n      .save(source)\n      .then(() => {\n        this._updateToolbar(false, false);\n      })\n      .catch(reason => {\n        this._updateToolbar(true, false);\n        this._onSaveError(reason);\n      });\n  }\n\n  /**\n   * Toggle the debug functionality.\n   */\n  toggleDebug(): void {\n    const inspector = this._inspector;\n\n    if (inspector.isHidden) {\n      inspector.show();\n    } else {\n      inspector.hide();\n    }\n    this._updateToolbar();\n  }\n\n  /**\n   * Handle `after-attach` messages.\n   */\n  protected onAfterAttach(msg: Message): void {\n    Private.populateToolbar(this._commands, this._toolbar);\n    this.update();\n  }\n\n  /**\n   * Handle `'update-request'` messages.\n   */\n  protected onUpdateRequest(msg: Message): void {\n    const settings = this._settings;\n    const defaults = this._defaults;\n    const user = this._user;\n\n    if (settings) {\n      defaults.editor.refresh();\n      user.editor.refresh();\n    }\n  }\n\n  /**\n   * Handle text changes in the underlying editor.\n   */\n  private _onTextChanged(): void {\n    const raw = this._user.editor.model.value.text;\n    const settings = this._settings;\n\n    this.removeClass(ERROR_CLASS);\n\n    // If there are no settings loaded or there are no changes, bail.\n    if (!settings || settings.raw === raw) {\n      this._updateToolbar(false, false);\n      return;\n    }\n\n    const errors = settings.validate(raw);\n\n    if (errors) {\n      this.addClass(ERROR_CLASS);\n      this._updateToolbar(true, false);\n      return;\n    }\n\n    this._updateToolbar(true, true);\n  }\n\n  /**\n   * Handle updates to the settings.\n   */\n  private _onSettingsChanged(): void {\n    const settings = this._settings;\n    const defaults = this._defaults;\n    const user = this._user;\n\n    defaults.editor.model.value.text = settings.annotatedDefaults();\n    user.editor.model.value.text = settings.raw;\n  }\n\n  private _updateToolbar(revert = this._canRevert, save = this._canSave): void {\n    const commands = this._commands;\n\n    this._canRevert = revert;\n    this._canSave = save;\n    this._commandsChanged.emit([\n      commands.debug,\n      commands.revert,\n      commands.save\n    ]);\n  }\n\n  private _canRevert = false;\n  private _canSave = false;\n  private _commands: RawEditor.ICommandBundle;\n  private _commandsChanged = new Signal<this, string[]>(this);\n  private _defaults: CodeEditorWrapper;\n  private _inspector: Widget;\n  private _onSaveError: (reason: any) => void;\n  private _settings: ISettingRegistry.ISettings | null = null;\n  private _toolbar: Toolbar<Widget> = new Toolbar();\n  private _user: CodeEditorWrapper;\n}\n\n/**\n * A namespace for `RawEditor` statics.\n */\nexport namespace RawEditor {\n  /**\n   * The toolbar commands and registry for the setting editor toolbar.\n   */\n  export interface ICommandBundle {\n    /**\n     * The command registry.\n     */\n    registry: CommandRegistry;\n\n    /**\n     * The debug command ID.\n     */\n    debug: string;\n\n    /**\n     * The revert command ID.\n     */\n    revert: string;\n\n    /**\n     * The save command ID.\n     */\n    save: string;\n  }\n\n  /**\n   * The instantiation options for a raw editor.\n   */\n  export interface IOptions {\n    /**\n     * The toolbar commands and registry for the setting editor toolbar.\n     */\n    commands: ICommandBundle;\n\n    /**\n     * The editor factory used by the raw editor.\n     */\n    editorFactory: CodeEditor.Factory;\n\n    /**\n     * A function the raw editor calls on save errors.\n     */\n    onSaveError: (reason: any) => void;\n\n    /**\n     * The setting registry used by the editor.\n     */\n    registry: ISettingRegistry;\n\n    /**\n     * The optional MIME renderer to use for rendering debug messages.\n     */\n    rendermime?: RenderMimeRegistry;\n  }\n}\n\n/**\n * A namespace for private module data.\n */\nnamespace Private {\n  /**\n   * Returns the wrapped setting defaults editor.\n   */\n  export function defaultsEditor(editor: Widget): Widget {\n    const widget = new Widget();\n    const layout = (widget.layout = new BoxLayout({ spacing: 0 }));\n    const banner = new Widget();\n    const bar = new Toolbar();\n\n    banner.node.innerText = DEFAULT_TITLE;\n    bar.insertItem(0, 'banner', banner);\n    layout.addWidget(bar);\n    layout.addWidget(editor);\n\n    return widget;\n  }\n\n  /**\n   * Populate the raw editor toolbar.\n   */\n  export function populateToolbar(\n    commands: RawEditor.ICommandBundle,\n    toolbar: Toolbar<Widget>\n  ): void {\n    const { debug, registry, revert, save } = commands;\n\n    toolbar.addItem('spacer', Toolbar.createSpacerItem());\n\n    // Note the button order. The rationale here is that no matter what state\n    // the toolbar is in, the relative location of the revert button in the\n    // toolbar remains the same.\n    [revert, debug, save].forEach(name => {\n      const item = Toolbar.createFromCommand(registry, name);\n\n      if (item) {\n        toolbar.addItem(name, item);\n      }\n    });\n  }\n\n  /**\n   * Returns the wrapped user overrides editor.\n   */\n  export function userEditor(\n    editor: Widget,\n    toolbar: Toolbar<Widget>,\n    inspector: Widget\n  ): Widget {\n    const widget = new Widget();\n    const layout = (widget.layout = new BoxLayout({ spacing: 0 }));\n    const banner = new Widget();\n\n    banner.node.innerText = USER_TITLE;\n    toolbar.insertItem(0, 'banner', banner);\n    layout.addWidget(toolbar);\n    layout.addWidget(editor);\n    layout.addWidget(inspector);\n\n    return widget;\n  }\n}\n"]}