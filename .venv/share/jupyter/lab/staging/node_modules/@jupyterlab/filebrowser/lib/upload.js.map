{"version":3,"file":"upload.js","sourceRoot":"","sources":["../../../../filebrowser/src/upload.ts"],"names":[],"mappings":";AAAA,0CAA0C;AAC1C,2DAA2D;;AAE3D,mDAAuE;AAIvE;;GAEG;AACH,MAAM,aAAa,GAAG,8BAA8B,CAAC;AAErD;;GAEG;AACH,MAAM,UAAU,GAAG,2BAA2B,CAAC;AAE/C;;GAEG;AACH,MAAM,eAAe,GAAG,eAAe,CAAC;AAExC;;GAEG;AACH,MAAM,cAAc,GAAG,iBAAiB,CAAC;AAEzC;;GAEG;AACH,MAAM,YAAY,GAAG,cAAc,CAAC;AAEpC;;GAEG;AACH,cAAsB,SAAQ,wBAAa;IACzC;;OAEG;IACH,YAAY,OAA0B;QACpC,KAAK,CAAC;YACJ,SAAS,EAAE,YAAY;YACvB,OAAO,EAAE,GAAG,EAAE;gBACZ,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;YACtB,CAAC;YACD,OAAO,EAAE,cAAc;SACxB,CAAC,CAAC;QAkBL;;WAEG;QACK,oBAAe,GAAG,GAAG,EAAE;YAC7B,IAAI,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAW,CAAC;YACpE,IAAI,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;YACzD,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;gBACjC,2BAAgB,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;YAC1C,CAAC,CAAC,CAAC;QACL,CAAC,CAAC;QAEF;;WAEG;QACK,oBAAe,GAAG,GAAG,EAAE;YAC7B,gFAAgF;YAChF,8DAA8D;YAC9D,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,EAAE,CAAC;QACzB,CAAC,CAAC;QAEM,WAAM,GAAG,OAAO,CAAC,iBAAiB,EAAE,CAAC;QArC3C,IAAI,aAAa,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QACnD,IAAI,UAAU,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QAChD,aAAa,CAAC,SAAS,GAAG,aAAa,CAAC;QACxC,UAAU,CAAC,SAAS;YAClB,UAAU,GAAG,GAAG,GAAG,cAAc,GAAG,GAAG,GAAG,eAAe,CAAC;QAC5D,aAAa,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;QACtC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;QACrC,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;QAC3B,IAAI,CAAC,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC;QAC3C,IAAI,CAAC,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC;IAC9C,CAAC;CA4BF;AAlDD,4BAkDC;AAiBD;;GAEG;AACH,IAAU,OAAO,CAUhB;AAVD,WAAU,OAAO;IACf;;OAEG;IACH;QACE,IAAI,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;QAC5C,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC;QACpB,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC;QACtB,OAAO,KAAK,CAAC;IACf,CAAC;IALe,yBAAiB,oBAKhC,CAAA;AACH,CAAC,EAVS,OAAO,KAAP,OAAO,QAUhB","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { ToolbarButton, showErrorMessage } from '@jupyterlab/apputils';\n\nimport { FileBrowserModel } from './model';\n\n/**\n * The class name added to a button content node.\n */\nconst CONTENT_CLASS = 'jp-FileButtons-buttonContent';\n\n/**\n * The class name added to a button icon node.\n */\nconst ICON_CLASS = 'jp-FileButtons-buttonIcon';\n\n/**\n * The class name added to the upload button.\n */\nconst MATERIAL_UPLOAD = 'jp-UploadIcon';\n\n/**\n * The class name added to a material icon button.\n */\nconst MATERIAL_CLASS = 'jp-MaterialIcon';\n\n/**\n * The class name added to the upload button.\n */\nconst UPLOAD_CLASS = 'jp-id-upload';\n\n/**\n * A widget which provides an upload button.\n */\nexport class Uploader extends ToolbarButton {\n  /**\n   * Construct a new file browser buttons widget.\n   */\n  constructor(options: Uploader.IOptions) {\n    super({\n      className: UPLOAD_CLASS,\n      onClick: () => {\n        this._input.click();\n      },\n      tooltip: 'Upload Files'\n    });\n    let uploadContent = document.createElement('span');\n    let uploadIcon = document.createElement('span');\n    uploadContent.className = CONTENT_CLASS;\n    uploadIcon.className =\n      ICON_CLASS + ' ' + MATERIAL_CLASS + ' ' + MATERIAL_UPLOAD;\n    uploadContent.appendChild(uploadIcon);\n    this.node.appendChild(uploadContent);\n    this.model = options.model;\n    this._input.onclick = this._onInputClicked;\n    this._input.onchange = this._onInputChanged;\n  }\n\n  /**\n   * The underlying file browser model for the widget.\n   */\n  readonly model: FileBrowserModel;\n\n  /**\n   * The 'change' handler for the input field.\n   */\n  private _onInputChanged = () => {\n    let files = Array.prototype.slice.call(this._input.files) as File[];\n    let pending = files.map(file => this.model.upload(file));\n    Promise.all(pending).catch(error => {\n      showErrorMessage('Upload Error', error);\n    });\n  };\n\n  /**\n   * The 'click' handler for the input field.\n   */\n  private _onInputClicked = () => {\n    // In order to allow repeated uploads of the same file (with delete in between),\n    // we need to clear the input value to trigger a change event.\n    this._input.value = '';\n  };\n\n  private _input = Private.createUploadInput();\n}\n\n/**\n * The namespace for Uploader class statics.\n */\nexport namespace Uploader {\n  /**\n   * The options used to create an uploader.\n   */\n  export interface IOptions {\n    /**\n     * A file browser model instance.\n     */\n    model: FileBrowserModel;\n  }\n}\n\n/**\n * The namespace for module private data.\n */\nnamespace Private {\n  /**\n   * Create the upload input node for a file buttons widget.\n   */\n  export function createUploadInput(): HTMLInputElement {\n    let input = document.createElement('input');\n    input.type = 'file';\n    input.multiple = true;\n    return input;\n  }\n}\n"]}