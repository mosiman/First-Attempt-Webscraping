{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../extensionmanager-extension/src/index.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport {\n  ILayoutRestorer,\n  IRouter,\n  JupyterLab,\n  JupyterLabPlugin\n} from '@jupyterlab/application';\n\nimport { Dialog, showDialog } from '@jupyterlab/apputils';\n\nimport { ISettingRegistry } from '@jupyterlab/coreutils';\n\nimport { ExtensionView } from '@jupyterlab/extensionmanager';\n\n/**\n * IDs of the commands added by this extension.\n */\nnamespace CommandIDs {\n  export const enable = 'extensionmanager:enable';\n\n  export const hide = 'extensionmanager:hide-main';\n\n  export const show = 'extensionmanager:activate-main';\n\n  export const toggle = 'extensionmanager:toggle-main';\n}\n\n/**\n * The extension manager plugin.\n */\nconst plugin: JupyterLabPlugin<void> = {\n  id: '@jupyterlab/extensionmanager-extension:plugin',\n  autoStart: true,\n  requires: [ISettingRegistry, ILayoutRestorer, IRouter],\n  activate: async (\n    app: JupyterLab,\n    registry: ISettingRegistry,\n    restorer: ILayoutRestorer,\n    router: IRouter\n  ) => {\n    const settings = await registry.load(plugin.id);\n    let enabled = settings.composite['enabled'] === true;\n\n    const { shell, serviceManager } = app;\n    const view = new ExtensionView(serviceManager);\n\n    view.id = 'extensionmanager.main-view';\n    view.title.label = 'Extensions';\n    restorer.add(view, view.id);\n\n    if (enabled) {\n      shell.addToLeftArea(view);\n    }\n\n    // If the extension is enabled or disabled,\n    // add or remove it from the left area.\n    app.restored.then(() => {\n      settings.changed.connect(async () => {\n        enabled = settings.composite['enabled'] === true;\n        if (enabled && !view.isAttached) {\n          const accepted = await Private.showWarning();\n          if (!accepted) {\n            settings.set('enabled', false);\n            return;\n          }\n          shell.addToLeftArea(view);\n        } else if (!enabled && view.isAttached) {\n          view.close();\n        }\n      });\n    });\n\n    addCommands(app, view);\n  }\n};\n\n/**\n * Add the main file view commands to the application's command registry.\n */\nfunction addCommands(app: JupyterLab, view: ExtensionView): void {\n  const { commands } = app;\n\n  commands.addCommand(CommandIDs.show, {\n    label: 'Show Extension Manager',\n    execute: () => {\n      app.shell.activateById(view.id);\n    }\n  });\n\n  commands.addCommand(CommandIDs.hide, {\n    execute: () => {\n      if (!view.isHidden) {\n        app.shell.collapseLeft();\n      }\n    }\n  });\n\n  commands.addCommand(CommandIDs.toggle, {\n    execute: () => {\n      if (view.isHidden) {\n        return commands.execute(CommandIDs.show, undefined);\n      } else {\n        return commands.execute(CommandIDs.hide, undefined);\n      }\n    }\n  });\n\n  // TODO: Also add to command palette\n}\n\n/**\n * Export the plugin as the default.\n */\nexport default plugin;\n\n/**\n * A namespace for module-private functions.\n */\nnamespace Private {\n  /**\n   * Show a warning dialog about extension security.\n   *\n   * @returns whether the user accepted the dialog.\n   */\n  export async function showWarning(): Promise<boolean> {\n    return showDialog({\n      title: 'Enable Extension Manager?',\n      body:\n        \"Thanks for trying out JupyterLab's extension manager. \" +\n        'The JupyterLab development team is excited to have a robust ' +\n        'third-party extension community. ' +\n        'However, we cannot vouch for every extension, ' +\n        'and some may introduce security risks. ' +\n        'Do you want to continue?',\n      buttons: [\n        Dialog.cancelButton({ label: 'DISABLE' }),\n        Dialog.warnButton({ label: 'ENABLE' })\n      ]\n    }).then(result => {\n      if (result.button.accept) {\n        return true;\n      } else {\n        return false;\n      }\n    });\n  }\n}\n"]}