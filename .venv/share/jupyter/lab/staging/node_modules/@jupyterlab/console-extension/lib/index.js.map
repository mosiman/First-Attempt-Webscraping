{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../console-extension/src/index.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport {\n  ILayoutRestorer,\n  JupyterLab,\n  JupyterLabPlugin\n} from '@jupyterlab/application';\n\nimport {\n  Dialog,\n  IClientSession,\n  ICommandPalette,\n  InstanceTracker,\n  showDialog\n} from '@jupyterlab/apputils';\n\nimport { IEditorServices } from '@jupyterlab/codeeditor';\n\nimport { ConsolePanel, IConsoleTracker } from '@jupyterlab/console';\n\nimport { ISettingRegistry, PageConfig } from '@jupyterlab/coreutils';\n\nimport { IFileBrowserFactory } from '@jupyterlab/filebrowser';\n\nimport { ILauncher } from '@jupyterlab/launcher';\n\nimport {\n  IEditMenu,\n  IFileMenu,\n  IHelpMenu,\n  IKernelMenu,\n  IMainMenu,\n  IRunMenu\n} from '@jupyterlab/mainmenu';\n\nimport { IRenderMimeRegistry } from '@jupyterlab/rendermime';\n\nimport { find } from '@phosphor/algorithm';\n\nimport { JSONExt, ReadonlyJSONObject } from '@phosphor/coreutils';\n\nimport { DockLayout, Menu } from '@phosphor/widgets';\n\n/**\n * The command IDs used by the console plugin.\n */\nnamespace CommandIDs {\n  export const create = 'console:create';\n\n  export const clear = 'console:clear';\n\n  export const runUnforced = 'console:run-unforced';\n\n  export const runForced = 'console:run-forced';\n\n  export const linebreak = 'console:linebreak';\n\n  export const interrupt = 'console:interrupt-kernel';\n\n  export const restart = 'console:restart-kernel';\n\n  export const closeAndShutdown = 'console:close-and-shutdown';\n\n  export const open = 'console:open';\n\n  export const inject = 'console:inject';\n\n  export const changeKernel = 'console:change-kernel';\n\n  export const toggleShowAllActivity =\n    'console:toggle-show-all-kernel-activity';\n\n  export const enterToExecute = 'console:enter-to-execute';\n\n  export const shiftEnterToExecute = 'console:shift-enter-to-execute';\n}\n\n/**\n * The console widget tracker provider.\n */\nconst tracker: JupyterLabPlugin<IConsoleTracker> = {\n  id: '@jupyterlab/console-extension:tracker',\n  provides: IConsoleTracker,\n  requires: [\n    IMainMenu,\n    ICommandPalette,\n    ConsolePanel.IContentFactory,\n    IEditorServices,\n    ILayoutRestorer,\n    IFileBrowserFactory,\n    IRenderMimeRegistry,\n    ISettingRegistry\n  ],\n  optional: [ILauncher],\n  activate: activateConsole,\n  autoStart: true\n};\n\n/**\n * The console widget content factory.\n */\nconst factory: JupyterLabPlugin<ConsolePanel.IContentFactory> = {\n  id: '@jupyterlab/console-extension:factory',\n  provides: ConsolePanel.IContentFactory,\n  requires: [IEditorServices],\n  autoStart: true,\n  activate: (app: JupyterLab, editorServices: IEditorServices) => {\n    const editorFactory = editorServices.factoryService.newInlineEditor;\n    return new ConsolePanel.ContentFactory({ editorFactory });\n  }\n};\n\n/**\n * Export the plugins as the default.\n */\nconst plugins: JupyterLabPlugin<any>[] = [factory, tracker];\nexport default plugins;\n\n/**\n * Activate the console extension.\n */\nfunction activateConsole(\n  app: JupyterLab,\n  mainMenu: IMainMenu,\n  palette: ICommandPalette,\n  contentFactory: ConsolePanel.IContentFactory,\n  editorServices: IEditorServices,\n  restorer: ILayoutRestorer,\n  browserFactory: IFileBrowserFactory,\n  rendermime: IRenderMimeRegistry,\n  settingRegistry: ISettingRegistry,\n  launcher: ILauncher | null\n): IConsoleTracker {\n  const manager = app.serviceManager;\n  const { commands, shell } = app;\n  const category = 'Console';\n\n  // Create an instance tracker for all console panels.\n  const tracker = new InstanceTracker<ConsolePanel>({ namespace: 'console' });\n\n  // Handle state restoration.\n  restorer.restore(tracker, {\n    command: CommandIDs.open,\n    args: panel => ({\n      path: panel.console.session.path,\n      name: panel.console.session.name\n    }),\n    name: panel => panel.console.session.path,\n    when: manager.ready\n  });\n\n  // Add a launcher item if the launcher is available.\n  if (launcher) {\n    manager.ready.then(() => {\n      const specs = manager.specs;\n      if (!specs) {\n        return;\n      }\n      let baseUrl = PageConfig.getBaseUrl();\n      for (let name in specs.kernelspecs) {\n        let rank = name === specs.default ? 0 : Infinity;\n        let kernelIconUrl = specs.kernelspecs[name].resources['logo-64x64'];\n        if (kernelIconUrl) {\n          let index = kernelIconUrl.indexOf('kernelspecs');\n          kernelIconUrl = baseUrl + kernelIconUrl.slice(index);\n        }\n        launcher.add({\n          command: CommandIDs.create,\n          args: { isLauncher: true, kernelPreference: { name } },\n          category: 'Console',\n          rank,\n          kernelIconUrl\n        });\n      }\n    });\n  }\n\n  /**\n   * The options used to create a widget.\n   */\n  interface ICreateOptions extends Partial<ConsolePanel.IOptions> {\n    /**\n     * The reference widget id for the insert location.\n     *\n     * The default is `null`.\n     */\n    ref?: string | null;\n\n    /**\n     * The tab insert mode.\n     *\n     * An insert mode is used to specify how a widget should be added\n     * to the main area relative to a reference widget.\n     */\n    insertMode?: DockLayout.InsertMode;\n\n    /**\n     * Whether to activate the widget.  Defaults to `true`.\n     */\n    activate?: boolean;\n  }\n\n  /**\n   * Create a console for a given path.\n   */\n  function createConsole(options: ICreateOptions): Promise<ConsolePanel> {\n    let panel: ConsolePanel;\n    return manager.ready\n      .then(() => {\n        panel = new ConsolePanel({\n          manager,\n          contentFactory,\n          mimeTypeService: editorServices.mimeTypeService,\n          rendermime,\n          setBusy: app.setBusy.bind(app),\n          ...(options as Partial<ConsolePanel.IOptions>)\n        });\n\n        return panel.session.ready;\n      })\n      .then(() => {\n        // Add the console panel to the tracker.\n        tracker.add(panel);\n        shell.addToMainArea(panel, {\n          ref: options.ref,\n          mode: options.insertMode,\n          activate: options.activate\n        });\n        return panel;\n      });\n  }\n\n  /**\n   * Whether there is an active console.\n   */\n  function isEnabled(): boolean {\n    return (\n      tracker.currentWidget !== null &&\n      tracker.currentWidget === app.shell.currentWidget\n    );\n  }\n\n  /**\n   * The options used to open a console.\n   */\n  interface IOpenOptions extends Partial<ConsolePanel.IOptions> {\n    /**\n     * Whether to activate the console.  Defaults to `true`.\n     */\n    activate?: boolean;\n  }\n\n  let command = CommandIDs.open;\n  commands.addCommand(command, {\n    execute: (args: IOpenOptions) => {\n      let path = args['path'];\n      let widget = tracker.find(value => {\n        return value.console.session.path === path;\n      });\n      if (widget) {\n        if (args['activate'] !== false) {\n          shell.activateById(widget.id);\n        }\n        return widget;\n      } else {\n        return manager.ready.then(() => {\n          let model = find(manager.sessions.running(), item => {\n            return item.path === path;\n          });\n          if (model) {\n            return createConsole(args);\n          }\n          return Promise.reject(`No running kernel session for path: ${path}`);\n        });\n      }\n    }\n  });\n\n  command = CommandIDs.create;\n  commands.addCommand(command, {\n    label: args => {\n      if (args['isPalette']) {\n        return 'New Console';\n      } else if (args['isLauncher'] && args['kernelPreference']) {\n        const kernelPreference = args[\n          'kernelPreference'\n        ] as IClientSession.IKernelPreference;\n        return manager.specs.kernelspecs[kernelPreference.name].display_name;\n      }\n      return 'Console';\n    },\n    iconClass: args => (args['isPalette'] ? '' : 'jp-CodeConsoleIcon'),\n    execute: args => {\n      let basePath =\n        (args['basePath'] as string) ||\n        (args['cwd'] as string) ||\n        browserFactory.defaultBrowser.model.path;\n      return createConsole({ basePath, ...args });\n    }\n  });\n\n  // Get the current widget and activate unless the args specify otherwise.\n  function getCurrent(args: ReadonlyJSONObject): ConsolePanel | null {\n    let widget = tracker.currentWidget;\n    let activate = args['activate'] !== false;\n    if (activate && widget) {\n      shell.activateById(widget.id);\n    }\n    return widget;\n  }\n\n  commands.addCommand(CommandIDs.clear, {\n    label: 'Clear Console Cells',\n    execute: args => {\n      let current = getCurrent(args);\n      if (!current) {\n        return;\n      }\n      current.console.clear();\n    },\n    isEnabled\n  });\n\n  commands.addCommand(CommandIDs.runUnforced, {\n    label: 'Run Cell (unforced)',\n    execute: args => {\n      let current = getCurrent(args);\n      if (!current) {\n        return;\n      }\n      return current.console.execute();\n    },\n    isEnabled\n  });\n\n  commands.addCommand(CommandIDs.runForced, {\n    label: 'Run Cell (forced)',\n    execute: args => {\n      let current = getCurrent(args);\n      if (!current) {\n        return;\n      }\n      current.console.execute(true);\n    },\n    isEnabled\n  });\n\n  commands.addCommand(CommandIDs.linebreak, {\n    label: 'Insert Line Break',\n    execute: args => {\n      let current = getCurrent(args);\n      if (!current) {\n        return;\n      }\n      current.console.insertLinebreak();\n    },\n    isEnabled\n  });\n\n  commands.addCommand(CommandIDs.interrupt, {\n    label: 'Interrupt Kernel',\n    execute: args => {\n      let current = getCurrent(args);\n      if (!current) {\n        return;\n      }\n      let kernel = current.console.session.kernel;\n      if (kernel) {\n        return kernel.interrupt();\n      }\n    },\n    isEnabled\n  });\n\n  commands.addCommand(CommandIDs.restart, {\n    label: 'Restart Kernel…',\n    execute: args => {\n      let current = getCurrent(args);\n      if (!current) {\n        return;\n      }\n      return current.console.session.restart();\n    },\n    isEnabled\n  });\n\n  commands.addCommand(CommandIDs.closeAndShutdown, {\n    label: 'Close and Shutdown…',\n    execute: args => {\n      const current = getCurrent(args);\n      if (!current) {\n        return;\n      }\n      return showDialog({\n        title: 'Shutdown the console?',\n        body: `Are you sure you want to close \"${current.title.label}\"?`,\n        buttons: [Dialog.cancelButton(), Dialog.warnButton()]\n      }).then(result => {\n        if (result.button.accept) {\n          current.console.session.shutdown().then(() => {\n            current.dispose();\n          });\n        } else {\n          return false;\n        }\n      });\n    },\n    isEnabled\n  });\n\n  commands.addCommand(CommandIDs.inject, {\n    execute: args => {\n      let path = args['path'];\n      tracker.find(widget => {\n        if (widget.console.session.path === path) {\n          if (args['activate'] !== false) {\n            shell.activateById(widget.id);\n          }\n          widget.console.inject(args['code'] as string);\n          return true;\n        }\n        return false;\n      });\n    },\n    isEnabled\n  });\n\n  commands.addCommand(CommandIDs.changeKernel, {\n    label: 'Change Kernel…',\n    execute: args => {\n      let current = getCurrent(args);\n      if (!current) {\n        return;\n      }\n      return current.console.session.selectKernel();\n    },\n    isEnabled\n  });\n\n  commands.addCommand(CommandIDs.toggleShowAllActivity, {\n    label: args => 'Show All Kernel Activity',\n    execute: args => {\n      let current = getCurrent(args);\n      if (!current) {\n        return;\n      }\n      current.console.showAllActivity = !current.console.showAllActivity;\n    },\n    isToggled: () =>\n      tracker.currentWidget\n        ? tracker.currentWidget.console.showAllActivity\n        : false,\n    isEnabled\n  });\n\n  // Constants for setting the shortcuts for executing console cells.\n  const shortcutPlugin = '@jupyterlab/shortcuts-extension:plugin';\n  const selector = '.jp-CodeConsole-promptCell';\n\n  // Keep updated keybindings for the console commands related to execution.\n  let linebreak = find(\n    commands.keyBindings,\n    kb => kb.command === CommandIDs.linebreak\n  );\n  let runUnforced = find(\n    commands.keyBindings,\n    kb => kb.command === CommandIDs.runUnforced\n  );\n  let runForced = find(\n    commands.keyBindings,\n    kb => kb.command === CommandIDs.runForced\n  );\n  commands.keyBindingChanged.connect((s, args) => {\n    if (args.binding.command === CommandIDs.linebreak) {\n      linebreak = args.type === 'added' ? args.binding : undefined;\n      return;\n    }\n    if (args.binding.command === CommandIDs.runUnforced) {\n      runUnforced = args.type === 'added' ? args.binding : undefined;\n      return;\n    }\n    if (args.binding.command === CommandIDs.runForced) {\n      runForced = args.type === 'added' ? args.binding : undefined;\n      return;\n    }\n  });\n\n  commands.addCommand(CommandIDs.shiftEnterToExecute, {\n    label: 'Execute with Shift+Enter',\n    isToggled: () => {\n      // Only show as toggled if the shortcuts are strictly\n      // The Shift+Enter ones.\n      return (\n        linebreak &&\n        JSONExt.deepEqual(linebreak.keys, ['Enter']) &&\n        runUnforced === undefined &&\n        runForced &&\n        JSONExt.deepEqual(runForced.keys, ['Shift Enter'])\n      );\n    },\n    execute: () => {\n      const first = settingRegistry.set(shortcutPlugin, CommandIDs.linebreak, {\n        command: CommandIDs.linebreak,\n        keys: ['Enter'],\n        selector\n      });\n      const second = settingRegistry.remove(\n        shortcutPlugin,\n        CommandIDs.runUnforced\n      );\n      const third = settingRegistry.set(shortcutPlugin, CommandIDs.runForced, {\n        command: CommandIDs.runForced,\n        keys: ['Shift Enter'],\n        selector\n      });\n\n      return Promise.all([first, second, third]);\n    }\n  });\n\n  commands.addCommand(CommandIDs.enterToExecute, {\n    label: 'Execute with Enter',\n    isToggled: () => {\n      // Only show as toggled if the shortcuts are strictly\n      // The Enter ones.\n      return (\n        linebreak &&\n        JSONExt.deepEqual(linebreak.keys, ['Ctrl Enter']) &&\n        runUnforced &&\n        JSONExt.deepEqual(runUnforced.keys, ['Enter']) &&\n        runForced &&\n        JSONExt.deepEqual(runForced.keys, ['Shift Enter'])\n      );\n    },\n    execute: () => {\n      const first = settingRegistry.set(shortcutPlugin, CommandIDs.linebreak, {\n        command: CommandIDs.linebreak,\n        keys: ['Ctrl Enter'],\n        selector\n      });\n      const second = settingRegistry.set(\n        shortcutPlugin,\n        CommandIDs.runUnforced,\n        {\n          command: CommandIDs.runUnforced,\n          keys: ['Enter'],\n          selector\n        }\n      );\n      const third = settingRegistry.set(shortcutPlugin, CommandIDs.runForced, {\n        command: CommandIDs.runForced,\n        keys: ['Shift Enter'],\n        selector\n      });\n\n      return Promise.all([first, second, third]);\n    }\n  });\n\n  // Add command palette items\n  [\n    CommandIDs.create,\n    CommandIDs.linebreak,\n    CommandIDs.clear,\n    CommandIDs.runUnforced,\n    CommandIDs.runForced,\n    CommandIDs.restart,\n    CommandIDs.interrupt,\n    CommandIDs.changeKernel,\n    CommandIDs.closeAndShutdown,\n    CommandIDs.toggleShowAllActivity\n  ].forEach(command => {\n    palette.addItem({ command, category, args: { isPalette: true } });\n  });\n\n  // Add a console creator to the File menu\n  mainMenu.fileMenu.newMenu.addGroup([{ command: CommandIDs.create }], 0);\n\n  // Add a close and shutdown command to the file menu.\n  mainMenu.fileMenu.closeAndCleaners.add({\n    tracker,\n    action: 'Shutdown',\n    name: 'Console',\n    closeAndCleanup: (current: ConsolePanel) => {\n      return showDialog({\n        title: 'Shutdown the console?',\n        body: `Are you sure you want to close \"${current.title.label}\"?`,\n        buttons: [Dialog.cancelButton(), Dialog.warnButton()]\n      }).then(result => {\n        if (result.button.accept) {\n          current.console.session.shutdown().then(() => {\n            current.dispose();\n          });\n        } else {\n          return void 0;\n        }\n      });\n    }\n  } as IFileMenu.ICloseAndCleaner<ConsolePanel>);\n\n  // Add a kernel user to the Kernel menu\n  mainMenu.kernelMenu.kernelUsers.add({\n    tracker,\n    interruptKernel: current => {\n      let kernel = current.console.session.kernel;\n      if (kernel) {\n        return kernel.interrupt();\n      }\n      return Promise.resolve(void 0);\n    },\n    noun: 'Console',\n    restartKernel: current => current.console.session.restart(),\n    restartKernelAndClear: current => {\n      return current.console.session.restart().then(restarted => {\n        if (restarted) {\n          current.console.clear();\n        }\n        return restarted;\n      });\n    },\n    changeKernel: current => current.console.session.selectKernel(),\n    shutdownKernel: current => current.console.session.shutdown()\n  } as IKernelMenu.IKernelUser<ConsolePanel>);\n\n  // Add a code runner to the Run menu.\n  mainMenu.runMenu.codeRunners.add({\n    tracker,\n    noun: 'Cell',\n    pluralNoun: 'Cells',\n    run: current => current.console.execute(true)\n  } as IRunMenu.ICodeRunner<ConsolePanel>);\n\n  // Add a clearer to the edit menu\n  mainMenu.editMenu.clearers.add({\n    tracker,\n    noun: 'Console Cells',\n    clearCurrent: (current: ConsolePanel) => {\n      return current.console.clear();\n    }\n  } as IEditMenu.IClearer<ConsolePanel>);\n\n  // Add the execute keystroke setting submenu.\n  const executeMenu = new Menu({ commands });\n  executeMenu.title.label = 'Console Run Keystroke';\n  executeMenu.addItem({ command: CommandIDs.enterToExecute });\n  executeMenu.addItem({ command: CommandIDs.shiftEnterToExecute });\n  mainMenu.settingsMenu.addGroup(\n    [\n      {\n        type: 'submenu' as Menu.ItemType,\n        submenu: executeMenu\n      }\n    ],\n    10\n  );\n\n  // Add kernel information to the application help menu.\n  mainMenu.helpMenu.kernelUsers.add({\n    tracker,\n    getKernel: current => current.session.kernel\n  } as IHelpMenu.IKernelUser<ConsolePanel>);\n\n  app.contextMenu.addItem({\n    command: CommandIDs.clear,\n    selector: '.jp-CodeConsole-content'\n  });\n  app.contextMenu.addItem({\n    command: CommandIDs.restart,\n    selector: '.jp-CodeConsole'\n  });\n  app.contextMenu.addItem({\n    command: CommandIDs.toggleShowAllActivity,\n    selector: '.jp-CodeConsole'\n  });\n\n  return tracker;\n}\n"]}