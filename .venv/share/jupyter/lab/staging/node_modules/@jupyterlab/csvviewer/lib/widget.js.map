{"version":3,"file":"widget.js","sourceRoot":"","sources":["../../../../csvviewer/src/widget.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { ActivityMonitor } from '@jupyterlab/coreutils';\n\nimport {\n  ABCWidgetFactory,\n  DocumentRegistry,\n  IDocumentWidget,\n  DocumentWidget\n} from '@jupyterlab/docregistry';\n\nimport { PromiseDelegate } from '@phosphor/coreutils';\n\nimport { DataGrid } from '@phosphor/datagrid';\n\nimport { Message } from '@phosphor/messaging';\n\nimport { PanelLayout, Widget } from '@phosphor/widgets';\n\nimport { CSVDelimiter } from './toolbar';\n\nimport { DSVModel } from './model';\n\n/**\n * The class name added to a CSV viewer.\n */\nconst CSV_CLASS = 'jp-CSVViewer';\n\n/**\n * The class name added to a CSV viewer datagrid.\n */\nconst CSV_GRID_CLASS = 'jp-CSVViewer-grid';\n\n/**\n * The timeout to wait for change activity to have ceased before rendering.\n */\nconst RENDER_TIMEOUT = 1000;\n\n/**\n * A viewer for CSV tables.\n */\nexport class CSVViewer extends Widget {\n  /**\n   * Construct a new CSV viewer.\n   */\n  constructor(options: CSVViewer.IOptions) {\n    super();\n\n    let context = (this._context = options.context);\n    let layout = (this.layout = new PanelLayout());\n\n    this.addClass(CSV_CLASS);\n\n    this._grid = new DataGrid();\n    this._grid.addClass(CSV_GRID_CLASS);\n    this._grid.headerVisibility = 'all';\n    layout.addWidget(this._grid);\n\n    this._context.ready.then(() => {\n      this._updateGrid();\n      this._revealed.resolve(undefined);\n      // Throttle the rendering rate of the widget.\n      this._monitor = new ActivityMonitor({\n        signal: context.model.contentChanged,\n        timeout: RENDER_TIMEOUT\n      });\n      this._monitor.activityStopped.connect(this._updateGrid, this);\n    });\n  }\n\n  /**\n   * The CSV widget's context.\n   */\n  get context(): DocumentRegistry.Context {\n    return this._context;\n  }\n\n  /**\n   * A promise that resolves when the csv viewer is ready to be revealed.\n   */\n  get revealed() {\n    return this._revealed.promise;\n  }\n\n  /**\n   * The delimiter for the file.\n   */\n  get delimiter(): string {\n    return this._delimiter;\n  }\n  set delimiter(value: string) {\n    if (value === this._delimiter) {\n      return;\n    }\n    this._delimiter = value;\n    this._updateGrid();\n  }\n\n  /**\n   * Dispose of the resources used by the widget.\n   */\n  dispose(): void {\n    if (this._monitor) {\n      this._monitor.dispose();\n    }\n    super.dispose();\n  }\n\n  /**\n   * Handle `'activate-request'` messages.\n   */\n  protected onActivateRequest(msg: Message): void {\n    this.node.tabIndex = -1;\n    this.node.focus();\n  }\n\n  /**\n   * Create the model for the grid.\n   */\n  private _updateGrid(): void {\n    let data: string = this._context.model.toString();\n    let delimiter = this._delimiter;\n    let oldModel = this._grid.model as DSVModel;\n    this._grid.model = new DSVModel({ data, delimiter });\n    if (oldModel) {\n      oldModel.dispose();\n    }\n  }\n\n  private _context: DocumentRegistry.Context;\n  private _grid: DataGrid;\n  private _monitor: ActivityMonitor<any, any> | null = null;\n  private _delimiter = ',';\n  private _revealed = new PromiseDelegate<void>();\n}\n\n/**\n * A namespace for `CSVViewer` statics.\n */\nexport namespace CSVViewer {\n  /**\n   * Instantiation options for CSV widgets.\n   */\n  export interface IOptions {\n    /**\n     * The document context for the CSV being rendered by the widget.\n     */\n    context: DocumentRegistry.Context;\n  }\n}\n\n/**\n * A document widget for CSV content widgets.\n */\nexport class CSVDocumentWidget extends DocumentWidget<CSVViewer> {\n  constructor(options: CSVDocumentWidget.IOptions) {\n    let { content, context, delimiter, reveal, ...other } = options;\n    content = content || Private.createContent(context);\n    reveal = Promise.all([reveal, content.revealed]);\n    super({ content, context, reveal, ...other });\n\n    if (delimiter) {\n      content.delimiter = delimiter;\n    }\n    const csvDelimiter = new CSVDelimiter({ selected: content.delimiter });\n    this.toolbar.addItem('delimiter', csvDelimiter);\n    csvDelimiter.delimiterChanged.connect(\n      (sender: CSVDelimiter, delimiter: string) => {\n        content.delimiter = delimiter;\n      }\n    );\n  }\n}\n\nexport namespace CSVDocumentWidget {\n  // TODO: In TypeScript 2.8, we can make just the content property optional\n  // using something like https://stackoverflow.com/a/46941824, instead of\n  // inheriting from this IOptionsOptionalContent.\n\n  export interface IOptions\n    extends DocumentWidget.IOptionsOptionalContent<CSVViewer> {\n    delimiter?: string;\n  }\n}\n\nnamespace Private {\n  export function createContent(\n    context: DocumentRegistry.IContext<DocumentRegistry.IModel>\n  ) {\n    return new CSVViewer({ context });\n  }\n}\n\n/**\n * A widget factory for CSV widgets.\n */\nexport class CSVViewerFactory extends ABCWidgetFactory<\n  IDocumentWidget<CSVViewer>\n> {\n  /**\n   * Create a new widget given a context.\n   */\n  protected createNewWidget(\n    context: DocumentRegistry.Context\n  ): IDocumentWidget<CSVViewer> {\n    return new CSVDocumentWidget({ context });\n  }\n}\n\n/**\n * A widget factory for TSV widgets.\n */\nexport class TSVViewerFactory extends ABCWidgetFactory<\n  IDocumentWidget<CSVViewer>\n> {\n  /**\n   * Create a new widget given a context.\n   */\n  protected createNewWidget(\n    context: DocumentRegistry.Context\n  ): IDocumentWidget<CSVViewer> {\n    const delimiter = '\\t';\n    return new CSVDocumentWidget({ context, delimiter });\n  }\n}\n"]}